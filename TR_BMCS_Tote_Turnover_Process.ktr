<transformation>
  <info>
    <name>TR_BMCS_Tote_Turnover_Process</name>
    <description />
    <extended_description />
    <trans_version />
    <trans_type>Normal</trans_type>
    <trans_status>0</trans_status>
    <directory>/public/ABC/SAPFIN/BMCS/BMTRNOVR</directory>
    <parameters>
      <parameter>
        <name>businessdate</name>
        <default_value />
        <description />
      </parameter>
      <parameter>
        <name>input.file</name>
        <default_value>maprfs:///dev/raw/bmcs/turnoverview/data/year=2025/month=01/day=01/turnoverview.parquet</default_value>
        <description />
      </parameter>
      <parameter>
        <name>input_bettingdutycmgl.file</name>
        <default_value />
        <description />
      </parameter>
      <parameter>
        <name>input_bettingdutynoncmgl.file</name>
        <default_value />
        <description />
      </parameter>
      <parameter>
        <name>output.csv_file</name>
        <default_value>D:\johndoe\sapfin\Turnover_20250101(01)</default_value>
        <description />
      </parameter>
      <parameter>
        <name>output.xml_file</name>
        <default_value>D:\johndoe\sapfin\Turnover_20250101(01)</default_value>
        <description />
      </parameter>
    </parameters>
    <log>
      <trans-log-table>
        <connection />
        <schema />
        <table />
        <size_limit_lines />
        <interval />
        <timeout_days />
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STATUS</id>
          <enabled>Y</enabled>
          <name>STATUS</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
          <subject />
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
          <subject />
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
          <subject />
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
          <subject />
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
          <subject />
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
          <subject />
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>STARTDATE</id>
          <enabled>Y</enabled>
          <name>STARTDATE</name>
        </field>
        <field>
          <id>ENDDATE</id>
          <enabled>Y</enabled>
          <name>ENDDATE</name>
        </field>
        <field>
          <id>LOGDATE</id>
          <enabled>Y</enabled>
          <name>LOGDATE</name>
        </field>
        <field>
          <id>DEPDATE</id>
          <enabled>Y</enabled>
          <name>DEPDATE</name>
        </field>
        <field>
          <id>REPLAYDATE</id>
          <enabled>Y</enabled>
          <name>REPLAYDATE</name>
        </field>
        <field>
          <id>LOG_FIELD</id>
          <enabled>Y</enabled>
          <name>LOG_FIELD</name>
        </field>
        <field>
          <id>EXECUTING_SERVER</id>
          <enabled>N</enabled>
          <name>EXECUTING_SERVER</name>
        </field>
        <field>
          <id>EXECUTING_USER</id>
          <enabled>N</enabled>
          <name>EXECUTING_USER</name>
        </field>
        <field>
          <id>CLIENT</id>
          <enabled>N</enabled>
          <name>CLIENT</name>
        </field>
      </trans-log-table>
      <perf-log-table>
        <connection />
        <schema />
        <table />
        <interval />
        <timeout_days />
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>SEQ_NR</id>
          <enabled>Y</enabled>
          <name>SEQ_NR</name>
        </field>
        <field>
          <id>LOGDATE</id>
          <enabled>Y</enabled>
          <name>LOGDATE</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STEPNAME</id>
          <enabled>Y</enabled>
          <name>STEPNAME</name>
        </field>
        <field>
          <id>STEP_COPY</id>
          <enabled>Y</enabled>
          <name>STEP_COPY</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>INPUT_BUFFER_ROWS</id>
          <enabled>Y</enabled>
          <name>INPUT_BUFFER_ROWS</name>
        </field>
        <field>
          <id>OUTPUT_BUFFER_ROWS</id>
          <enabled>Y</enabled>
          <name>OUTPUT_BUFFER_ROWS</name>
        </field>
      </perf-log-table>
      <channel-log-table>
        <connection />
        <schema />
        <table />
        <timeout_days />
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>LOGGING_OBJECT_TYPE</id>
          <enabled>Y</enabled>
          <name>LOGGING_OBJECT_TYPE</name>
        </field>
        <field>
          <id>OBJECT_NAME</id>
          <enabled>Y</enabled>
          <name>OBJECT_NAME</name>
        </field>
        <field>
          <id>OBJECT_COPY</id>
          <enabled>Y</enabled>
          <name>OBJECT_COPY</name>
        </field>
        <field>
          <id>REPOSITORY_DIRECTORY</id>
          <enabled>Y</enabled>
          <name>REPOSITORY_DIRECTORY</name>
        </field>
        <field>
          <id>FILENAME</id>
          <enabled>Y</enabled>
          <name>FILENAME</name>
        </field>
        <field>
          <id>OBJECT_ID</id>
          <enabled>Y</enabled>
          <name>OBJECT_ID</name>
        </field>
        <field>
          <id>OBJECT_REVISION</id>
          <enabled>Y</enabled>
          <name>OBJECT_REVISION</name>
        </field>
        <field>
          <id>PARENT_CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>PARENT_CHANNEL_ID</name>
        </field>
        <field>
          <id>ROOT_CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>ROOT_CHANNEL_ID</name>
        </field>
      </channel-log-table>
      <step-log-table>
        <connection />
        <schema />
        <table />
        <timeout_days />
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STEPNAME</id>
          <enabled>Y</enabled>
          <name>STEPNAME</name>
        </field>
        <field>
          <id>STEP_COPY</id>
          <enabled>Y</enabled>
          <name>STEP_COPY</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>LOG_FIELD</id>
          <enabled>N</enabled>
          <name>LOG_FIELD</name>
        </field>
      </step-log-table>
      <metrics-log-table>
        <connection />
        <schema />
        <table />
        <timeout_days />
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>METRICS_DATE</id>
          <enabled>Y</enabled>
          <name>METRICS_DATE</name>
        </field>
        <field>
          <id>METRICS_CODE</id>
          <enabled>Y</enabled>
          <name>METRICS_CODE</name>
        </field>
        <field>
          <id>METRICS_DESCRIPTION</id>
          <enabled>Y</enabled>
          <name>METRICS_DESCRIPTION</name>
        </field>
        <field>
          <id>METRICS_SUBJECT</id>
          <enabled>Y</enabled>
          <name>METRICS_SUBJECT</name>
        </field>
        <field>
          <id>METRICS_TYPE</id>
          <enabled>Y</enabled>
          <name>METRICS_TYPE</name>
        </field>
        <field>
          <id>METRICS_VALUE</id>
          <enabled>Y</enabled>
          <name>METRICS_VALUE</name>
        </field>
      </metrics-log-table>
    </log>
    <maxdate>
      <connection />
      <table />
      <field />
      <offset>0.0</offset>
      <maxdiff>0.0</maxdiff>
    </maxdate>
    <size_rowset>10000</size_rowset>
    <sleep_time_empty>50</sleep_time_empty>
    <sleep_time_full>50</sleep_time_full>
    <unique_connections>N</unique_connections>
    <feedback_shown>Y</feedback_shown>
    <feedback_size>50000</feedback_size>
    <using_thread_priorities>Y</using_thread_priorities>
    <shared_objects_file />
    <capture_step_performance>N</capture_step_performance>
    <step_performance_capturing_delay>1000</step_performance_capturing_delay>
    <step_performance_capturing_size_limit>100</step_performance_capturing_size_limit>
    <dependencies>
    </dependencies>
    <partitionschemas>
      <partitionschema>
        <name>cluster</name>
        <dynamic>N</dynamic>
        <partitions_per_slave />
      </partitionschema>
      <partitionschema>
        <name>dynamic</name>
        <dynamic>Y</dynamic>
        <partitions_per_slave>1</partitions_per_slave>
      </partitionschema>
    </partitionschemas>
    <slaveservers>
      <slaveserver>
        <name>ATI-PRD-ANA03</name>
        <hostname>ATI-PRD-ANA03</hostname>
        <port>9080</port>
        <webAppName>pentaho-di</webAppName>
        <username>admin</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>N</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>ATI-STG-ANA03</name>
        <hostname>ATI-STG-ANA03</hostname>
        <port>9080</port>
        <webAppName>pentaho-di</webAppName>
        <username>pentaho</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>N</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>Cloud_Server</name>
        <hostname>34.231.146.112</hostname>
        <port>8080</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>N</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>DI Server</name>
        <hostname>localhost</hostname>
        <port>9080</port>
        <webAppName>pentaho-di</webAppName>
        <username>joe</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>DI Server 5.0</name>
        <hostname>localhost</hostname>
        <port>9080</port>
        <webAppName>pentaho-di</webAppName>
        <username>admin</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>master</name>
        <hostname>192.168.0.133</hostname>
        <port>8001</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>Master Kettle</name>
        <hostname>${IP_ADDR}</hostname>
        <port>8080</port>
        <webAppName>pentaho</webAppName>
        <username>dh_superadmin1</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>N</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>PDI on VM</name>
        <hostname>192.168.111.210</hostname>
        <port />
        <webAppName />
        <username>admin</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>N</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>PDI_win7</name>
        <hostname>192.168.111.131</hostname>
        <port />
        <webAppName>pdi_win7</webAppName>
        <username>admin</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>N</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>Slave Carte</name>
        <hostname>${IP_ADDR}</hostname>
        <port>8081</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>N</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>Slave1</name>
        <hostname>localhost</hostname>
        <port>8082</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>N</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>Slave2</name>
        <hostname>localhost</hostname>
        <port>8083</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>N</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>Slave3</name>
        <hostname>localhost</hostname>
        <port>8084</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>N</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>Slave4</name>
        <hostname>localhost</hostname>
        <port>8085</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>N</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>Slave5</name>
        <hostname>localhost</hostname>
        <port>8086</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>N</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>YarnCluster - dn1:30301</name>
        <hostname>dn1</hostname>
        <port>30301</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>YarnCluster - dn3:30302</name>
        <hostname>dn3</hostname>
        <port>30302</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>N</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>YarnCluster - sandbox.hortonworks.com:30301</name>
        <hostname>sandbox.hortonworks.com</hostname>
        <port>30301</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>YarnCluster - sandbox.hortonworks.com:30302</name>
        <hostname>sandbox.hortonworks.com</hostname>
        <port>30302</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>N</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>YarnCluster - sandbox.hortonworks.com:30303</name>
        <hostname>sandbox.hortonworks.com</hostname>
        <port>30303</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>N</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>ati-dev-ana01</name>
        <hostname>ati-dev-ana01</hostname>
        <port>9081</port>
        <webAppName>pentaho-di</webAppName>
        <username>njain</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>bmcPentaho</name>
        <hostname>11.123.123.45</hostname>
        <port>8080</port>
        <webAppName>pentaho</webAppName>
        <username>slaveRunner</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>carte_local</name>
        <hostname>localhost</hostname>
        <port>8081</port>
        <webAppName>kettle</webAppName>
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>N</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>cptlx007</name>
        <hostname>cptlx007.cipal.be</hostname>
        <port>10001</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>di-server</name>
        <hostname>localhost</hostname>
        <port>9080</port>
        <webAppName>pentaho-di</webAppName>
        <username>joe</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>N</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>local</name>
        <hostname>127.0.0.1</hostname>
        <port>9080</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>local carte</name>
        <hostname>localhost</hostname>
        <port>8080</port>
        <webAppName>spoon</webAppName>
        <username>admin</username>
        <password>Encrypted </password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>N</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>pdi-centos</name>
        <hostname>192.168.56.101</hostname>
        <port>8081</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>pdi-master1</name>
        <hostname>localhost</hostname>
        <port>8081</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>pdi-master10</name>
        <hostname>localhost</hostname>
        <port>8090</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>pdi-master2</name>
        <hostname>localhost</hostname>
        <port>8082</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>pdi-master3</name>
        <hostname>localhost</hostname>
        <port>8083</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>pdi-master4</name>
        <hostname>localhost</hostname>
        <port>8084</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>pdi-master5</name>
        <hostname>localhost</hostname>
        <port>8085</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>pdi-master6</name>
        <hostname>localhost</hostname>
        <port>8086</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>pdi-master7</name>
        <hostname>localhost</hostname>
        <port>8087</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>pdi-master8</name>
        <hostname>localhost</hostname>
        <port>8088</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>pdi-master9</name>
        <hostname>localhost</hostname>
        <port>8089</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>pdi_server10</name>
        <hostname>localhost</hostname>
        <port>8090</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>pdi_win10</name>
        <hostname>localhost</hostname>
        <port>8081</port>
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>pudx</name>
        <hostname>localhost</hostname>
        <port>8080</port>
        <webAppName>pentaho</webAppName>
        <username>admin</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>N</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>remote</name>
        <hostname>192.168.1.16</hostname>
        <port>9080</port>
        <webAppName>pentaho-di/kettle</webAppName>
        <username>admin</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>slave</name>
        <hostname>192.168.0.133</hostname>
        <port />
        <webAppName />
        <username>cluster</username>
        <password>Encrypted abcdefjk12345</password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>Y</master>
        <sslMode>N</sslMode>
      </slaveserver>
      <slaveserver>
        <name>webspoon</name>
        <hostname>localhost</hostname>
        <port>8080</port>
        <webAppName>spoon</webAppName>
        <username>admin</username>
        <password>Encrypted </password>
        <proxy_hostname />
        <proxy_port />
        <non_proxy_hosts />
        <master>N</master>
        <sslMode>N</sslMode>
      </slaveserver>
    </slaveservers>
    <clusterschemas>
      <clusterschema>
        <name>ClusterSchema</name>
        <base_port>40000</base_port>
        <sockets_buffer_size>2000</sockets_buffer_size>
        <sockets_flush_interval>5000</sockets_flush_interval>
        <sockets_compressed>Y</sockets_compressed>
        <dynamic>N</dynamic>
        <slaveservers>
        </slaveservers>
      </clusterschema>
      <clusterschema>
        <name>ClusterSchema_dynamic</name>
        <base_port>40000</base_port>
        <sockets_buffer_size>2000</sockets_buffer_size>
        <sockets_flush_interval>5000</sockets_flush_interval>
        <sockets_compressed>Y</sockets_compressed>
        <dynamic>Y</dynamic>
        <slaveservers>
        </slaveservers>
      </clusterschema>
      <clusterschema>
        <name>YarnCluster</name>
        <base_port>4000</base_port>
        <sockets_buffer_size>2000</sockets_buffer_size>
        <sockets_flush_interval>5000</sockets_flush_interval>
        <sockets_compressed>N</sockets_compressed>
        <dynamic>N</dynamic>
        <slaveservers>
        </slaveservers>
      </clusterschema>
    </clusterschemas>
    <created_user>johndoe</created_user>
    <created_date>2025/05/29 20:15:19.157</created_date>
    <modified_user>dh_ldap</modified_user>
    <modified_date>2023/11/15 18:36:30.510</modified_date>
    <key_for_session_key />
    <is_key_private>N</is_key_private>
  </info>
  <notepads>
    <notepad>
      <note>Extract fileds from row

Also create fields CompanyCode, Currency_SGD_Key as fixed values for lookup</note>
      <xloc>64</xloc>
      <yloc>912</yloc>
      <width>424</width>
      <heigth>57</heigth>
      <fontname>Segoe UI</fontname>
      <fontsize>9</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Extract column:

+ OriginalReferenceDocumentType
+ OriginalReferenceDocument
+ OriginalReferenceDocumentLogicalSystem
+ BusinessTransactionType
+ AccountingDocumentType

+ CreatedByUser
+ CompanyCode
+ DocumentDate
+ PostingDate

These columns get from row data
+ DocumentReferenceID
+ DocumentHeaderText</note>
      <xloc>0</xloc>
      <yloc>192</yloc>
      <width>247</width>
      <heigth>263</heigth>
      <fontname>Segoe UI</fontname>
      <fontsize>9</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>+ DocumentReferenceID
+ DocumentItemText
+ SoldMaterial</note>
      <xloc>1072</xloc>
      <yloc>912</yloc>
      <width>150</width>
      <heigth>58</heigth>
      <fontname>Tahoma</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>credit</note>
      <xloc>1680</xloc>
      <yloc>864</yloc>
      <width>43</width>
      <heigth>26</heigth>
      <fontname>Tahoma</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>debit</note>
      <xloc>1696</xloc>
      <yloc>1072</yloc>
      <width>39</width>
      <heigth>26</heigth>
      <fontname>Tahoma</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Step "frmla-Turnover"

Create DocumentHeaderText, Sign
</note>
      <xloc>1728</xloc>
      <yloc>1424</yloc>
      <width>209</width>
      <heigth>74</heigth>
      <fontname>Tahoma</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Step "frmla-DividendPayable"

Create DocumentHeaderText, Sign</note>
      <xloc>1744</xloc>
      <yloc>1584</yloc>
      <width>209</width>
      <heigth>58</heigth>
      <fontname>Tahoma</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Step "frmla-Gst"

Create DocumentHeaderText, Sign</note>
      <xloc>1728</xloc>
      <yloc>1760</yloc>
      <width>268</width>
      <heigth>73</heigth>
      <fontname>Tahoma</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Step "frmla-BettingDuty"

Create DocumentHeaderText, Sign</note>
      <xloc>1680</xloc>
      <yloc>2048</yloc>
      <width>209</width>
      <heigth>58</heigth>
      <fontname>Tahoma</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Step "frmla-BetlineRebate"

Create DocumentHeaderText, Sign</note>
      <xloc>1760</xloc>
      <yloc>2560</yloc>
      <width>209</width>
      <heigth>58</heigth>
      <fontname>Tahoma</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Step "frmla-LosingRebate"

Create DocumentHeaderText, Sign</note>
      <xloc>1776</xloc>
      <yloc>2400</yloc>
      <width>268</width>
      <heigth>73</heigth>
      <fontname>Tahoma</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Step "slkp-Turnover-CreditGL_DebitGL" ( Turn Over step )


Create Debit/Credit GLAccount
</note>
      <xloc>1232</xloc>
      <yloc>1376</yloc>
      <width>340</width>
      <heigth>90</heigth>
      <fontname>Tahoma</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Step "slkp-DividendPayable-CreditGL_DebitGL" 
( DIVIDEND PAYABLE step )

Create Debit/Credit GLAccount
</note>
      <xloc>1280</xloc>
      <yloc>1536</yloc>
      <width>277</width>
      <heigth>90</heigth>
      <fontname>Tahoma</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Step "slkp-Gst-CreditGL_DebitGL" 
( GST step )

Create Debit/Credit GLAccount
</note>
      <xloc>1328</xloc>
      <yloc>1728</yloc>
      <width>265</width>
      <heigth>115</heigth>
      <fontname>Tahoma</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Step "slkp-BettingDuty-CreditGL_DebitGL" 
( Betting Duty step )

Create Debit/Credit GLAccount</note>
      <xloc>1344</xloc>
      <yloc>1984</yloc>
      <width>249</width>
      <heigth>74</heigth>
      <fontname>Tahoma</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Step "slkp-LoosingRebate-CreditGL_DebitGL" 
( Betting Loosing Rebate step )

Create Debit/Credit GLAccount
</note>
      <xloc>1376</xloc>
      <yloc>2352</yloc>
      <width>268</width>
      <heigth>90</heigth>
      <fontname>Tahoma</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Step "slkp-BetlineRebate-CreditGL_DebitGL" 
( Betting Betline Rebate step )

Create Debit/Credit GLAccount</note>
      <xloc>1376</xloc>
      <yloc>2560</yloc>
      <width>263</width>
      <heigth>74</heigth>
      <fontname>Tahoma</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Step "gb-PL"
Get Total Betting Duty based on 
20171020_Turnover Workings ( sheet " 2. By each Location (P&amp;L)")</note>
      <xloc>2208</xloc>
      <yloc>720</yloc>
      <width>395</width>
      <heigth>58</heigth>
      <fontname>Tahoma</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Step "gb-TotalBettingDutyPL"
Get Sum of all Total Betting Duty BL 
Complete Step on row 13 file 20171020_Turnover Workings
( sheet "Final Summary")</note>
      <xloc>2208</xloc>
      <yloc>784</yloc>
      <width>353</width>
      <heigth>74</heigth>
      <fontname>Tahoma</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Step "slkp-BS"
Get Sum of all Total Betting Duty Bs
Complete Step on row 1 file 20171020_Turnover Workings
( sheet "Final Summary")</note>
      <xloc>2208</xloc>
      <yloc>864</yloc>
      <width>346</width>
      <heigth>74</heigth>
      <fontname>Tahoma</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Step "frmla-BettingDutyDifference"
Create new column name "BettingDutyPLLast"

This column will replace the last &lt;item> ...&lt;/item> (PL).
refer to Step 
udjc-BettingDuty-build_xml ( XML output )
udjc-BettingDuty-build_csv ( CSV output )</note>
      <xloc>2016</xloc>
      <yloc>1360</yloc>
      <width>336</width>
      <heigth>122</heigth>
      <fontname>Tahoma</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Step "frmla-CashReceipt"

Create DocumentHeaderText, Sign</note>
      <xloc>1776</xloc>
      <yloc>2736</yloc>
      <width>209</width>
      <heigth>58</heigth>
      <fontname>Tahoma</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Step "slkp-CashReceipt-CreditGL" 
( -Cash Receipt step )

Create Credit GLAccount</note>
      <xloc>1360</xloc>
      <yloc>2816</yloc>
      <width>192</width>
      <heigth>73</heigth>
      <fontname>Segoe UI</fontname>
      <fontsize>9</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>+ DocumentReferenceID
+ DocumentItemText
+ SoldMaterial</note>
      <xloc>2432</xloc>
      <yloc>560</yloc>
      <width>141</width>
      <heigth>58</heigth>
      <fontname>Segoe UI</fontname>
      <fontsize>9</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Old BettingDuty Logic.
Disabled.</note>
      <xloc>800</xloc>
      <yloc>1968</yloc>
      <width>130</width>
      <heigth>42</heigth>
      <fontname>Segoe UI</fontname>
      <fontsize>9</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>128</backgroundcolorgreen>
      <backgroundcolorblue>128</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Old BettingDuty Logic.
Disabled.</note>
      <xloc>1328</xloc>
      <yloc>2016</yloc>
      <width>130</width>
      <heigth>42</heigth>
      <fontname>Segoe UI</fontname>
      <fontsize>9</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>128</backgroundcolorgreen>
      <backgroundcolorblue>128</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Old BettingDuty Logic.
Disabled.</note>
      <xloc>1936</xloc>
      <yloc>2032</yloc>
      <width>130</width>
      <heigth>42</heigth>
      <fontname>Segoe UI</fontname>
      <fontsize>9</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>128</backgroundcolorgreen>
      <backgroundcolorblue>128</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>New BettingDuty logic.
To calculate betting duty from 2 views: 
BETTINGDUTYNONCMGLVIEW and BETTINGDUTYCMGLVIEW</note>
      <xloc>1296</xloc>
      <yloc>560</yloc>
      <width>336</width>
      <heigth>58</heigth>
      <fontname>Segoe UI</fontname>
      <fontsize>9</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Step "frmla-BettingDuty"

Create DocumentHeaderText, Sign, BetMode</note>
      <xloc>1728</xloc>
      <yloc>2160</yloc>
      <width>246</width>
      <heigth>57</heigth>
      <fontname>Segoe UI</fontname>
      <fontsize>9</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
  </notepads>
  <connection>
    <name>SAPFIN</name>
    <server>11.123.123.45</server>
    <type>POSTGRESQL</type>
    <access>Native</access>
    <database>sapfin?currentSchema=sapfin_mapping</database>
    <port>9999</port>
    <username>sp_sapfin</username>
    <password>Encrypted abcdefjk12345</password>
    <servername />
    <data_tablespace />
    <index_tablespace />
    <attributes>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>9999</attribute>
      </attribute>
      <attribute>
        <code>PRESERVE_RESERVED_WORD_CASE</code>
        <attribute>Y</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>Y</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_TIMESTAMP_DATA_TYPE</code>
        <attribute>Y</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <order>
    <hop>
      <from>frmla-AccountingDocumentType</from>
      <to>slkp-AccountingDocumentType</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-CompanyCode</from>
      <to>slkp-CompanyCode</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-CreatedByUser</from>
      <to>slkp-CreatedByUser</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-Currency_SGD</from>
      <to>slkp-Currency_SGD</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-OriginalReferenceDocumentLogicalSystem</from>
      <to>slkp-OriginalReferenceDocumentLogicalSystem</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-AccountingDocumentType</from>
      <to>slkp-headers</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-CreatedByUser</from>
      <to>slkp-CompanyCode</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-OriginalReferenceDocumentLogicalSystem</from>
      <to>slkp-CreatedByUser</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ti-yy1_bmcs_desc</from>
      <to>slkp-ClubShort</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ti-yy1_bmcs_turn_pcenter</from>
      <to>slkp-ProfitCenterPL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ti-yy1_findoctype</from>
      <to>frmla-AccountingDocumentType</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ti-yy1_finfixedcon</from>
      <to>frmla-CompanyCode</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ti-yy1_finfixedcon</from>
      <to>frmla-CreatedByUser</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ti-yy1_finfixedcon</from>
      <to>frmla-Currency_SGD</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ti-yy1_finfixedcon</from>
      <to>frmla-OriginalReferenceDocumentLogicalSystem</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>udjc-build_xml_SoapEnv</from>
      <to>tfo-xml</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-CompanyCode</from>
      <to>slkp-Currency_SGD</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-ProfitCenterBS</from>
      <to>slkp-ProfitCenterBS</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ti-yy1_finfixedcon</from>
      <to>frmla-ProfitCenterBS</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-ClubShort</from>
      <to>frmla-club_short</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sv-Reformat_Precision</from>
      <to>frmla-DividendPayable</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sv-Reformat_Precision</from>
      <to>frmla-Gst</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sv-Reformat_Precision</from>
      <to>frmla-LosingRebate</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sr-CM_PM</from>
      <to>gb-BS</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ur-CM_PM_L_TT</from>
      <to>slkp-PL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sr-CM_PM_L_TT 2</from>
      <to>ur-CM_PM_L_TT</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-club_short</from>
      <to>slkp-BetMode</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-BetMode</from>
      <to>slkp-ProfitCenterPL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ti-yy1_bmcs_turn_betmode</from>
      <to>slkp-BetMode</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-DividendPayable-CreditGL_DebitGL</from>
      <to>udjc-DividendPayable-build_xml</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-Gst-CreditGL_DebitGL</from>
      <to>udjc-Gst-build_xml</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-LoosingRebate-CreditGL_DebitGL</from>
      <to>udjc-LoosingRebate-build_xml</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-BettingDuty-CreditGL_DebitGL</from>
      <to>udjc-BettingDuty-build_xml</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>udjc-Turnover-build_xml</from>
      <to>ac-Document_1 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>udjc-DividendPayable-build_xml</from>
      <to>ac-Document_2 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>udjc-Gst-build_xml</from>
      <to>ac-Document_3 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>udjc-BettingDuty-build_xml</from>
      <to>ac-Document_4 2</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>udjc-LoosingRebate-build_xml</from>
      <to>ac-Document_5 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ac-Document_5 2</from>
      <to>sm-GroupKey-Document-csv-xml</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ac-Document_4 2</from>
      <to>sm-GroupKey-Document-csv-xml</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>ac-Document_3 2</from>
      <to>sm-GroupKey-Document-csv-xml</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ac-Document_2 2</from>
      <to>sm-GroupKey-Document-csv-xml</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-DividendPayable-CreditGL_DebitGL</from>
      <to>udjc-DividendPayable-build_csv</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>udjc-build_csv_content</from>
      <to>tfo-csv</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>udjc-DividendPayable-build_csv</from>
      <to>ac-Document_2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ac-Document_2</from>
      <to>sm-GroupKey-Document-csv</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-BettingDuty-CreditGL_DebitGL</from>
      <to>udjc-BettingDuty-build_csv</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>slkp-BS</from>
      <to>frmla-BettingDutyDifference</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>udjc-Gst-build_csv</from>
      <to>ac-Document_3</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-Gst-CreditGL_DebitGL</from>
      <to>udjc-Gst-build_csv</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ac-Document_3</from>
      <to>sm-GroupKey-Document-csv</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>udjc-BettingDuty-build_csv</from>
      <to>ac-Document_4</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>ac-Document_4</from>
      <to>sm-GroupKey-Document-csv</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>udjc-LoosingRebate-build_csv</from>
      <to>ac-Document_5</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-LoosingRebate-CreditGL_DebitGL</from>
      <to>udjc-LoosingRebate-build_csv</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ac-Document_5</from>
      <to>sm-GroupKey-Document-csv</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sr-keys</from>
      <to>udjc-build_csv_content</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-split_group_key</from>
      <to>sr-keys</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sm-GroupKey-Document-csv-xml</from>
      <to>frmla-split_group_key 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-split_group_key 2</from>
      <to>sr-keys 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sr-keys 2</from>
      <to>udjc-build_xml_SoapEnv</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-BettingDutyDifference</from>
      <to>frmla-negative_credit_amounts</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>gb-PL</from>
      <to>slkp-PL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>calc-BettingDutyRounded</from>
      <to>gb-PL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-ProfitCenterPL</from>
      <to>frmla-BettingDutyPL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-BettingDutyPL</from>
      <to>sr-CM_PM_L_TT</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-BettingDutyPL</from>
      <to>sr-CM_PM_L_TT 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-BettingDutyPL</from>
      <to>sr-CM_PM</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sr-CM_PM_L_TT</from>
      <to>calc-BettingDutyRounded</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>calc-BettingDutyRounded 2</from>
      <to>slkp-BS</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>gb-BS</from>
      <to>frmla-Round</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-Round</from>
      <to>calc-BettingDutyRounded 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>gb-PL</from>
      <to>gb-TotalBettingDutyPL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-PL</from>
      <to>slkp-PL 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>gb-TotalBettingDutyPL</from>
      <to>slkp-PL 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-negative_credit_amounts</from>
      <to>frmla-DebitCode_BettingDuty</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-DebitCode_BettingDuty</from>
      <to>sv-Reformat_Precision</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-BetlineRebate-CreditGL_DebitGL</from>
      <to>udjc-BetlineRebate-build_csv</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-BetlineRebate-CreditGL_DebitGL</from>
      <to>udjc-BetlineRebate-build_xml</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>udjc-BetlineRebate-build_csv</from>
      <to>ac-Document_6</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>udjc-BetlineRebate-build_xml</from>
      <to>ac-Document_6 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sv-Reformat_Precision</from>
      <to>frmla-BetlineRebate</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ac-Document_6</from>
      <to>sm-GroupKey-Document-csv</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ac-Document_6 2</from>
      <to>sm-GroupKey-Document-csv-xml</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ti-yy1_fin_bmcs_turn_glacct</from>
      <to>sv-format_creditgl_debitgl</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sv-format_creditgl_debitgl</from>
      <to>slkp-Turnover-CreditGL_DebitGL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sv-format_creditgl_debitgl</from>
      <to>slkp-DividendPayable-CreditGL_DebitGL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sv-format_creditgl_debitgl</from>
      <to>slkp-Gst-CreditGL_DebitGL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sv-format_creditgl_debitgl</from>
      <to>slkp-BettingDuty-CreditGL_DebitGL</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>sv-format_creditgl_debitgl</from>
      <to>slkp-LoosingRebate-CreditGL_DebitGL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sv-format_creditgl_debitgl</from>
      <to>slkp-BetlineRebate-CreditGL_DebitGL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>pqi-turnover-data</from>
      <to>frmla-extract_fields</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-Reference1InDocumentHeader</from>
      <to>slkp-OriginalReferenceDocumentLogicalSystem</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>gr-fixed_values</from>
      <to>gv-parameters</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>gv-parameters</from>
      <to>frmla-Reference1InDocumentHeader</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>fr-amount_0-Turnover</from>
      <to>slkp-Turnover-CreditGL_DebitGL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-DividendPayable</from>
      <to>fr-amount_0-DividendPayable</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>fr-amount_0-DividendPayable</from>
      <to>slkp-DividendPayable-CreditGL_DebitGL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-Gst</from>
      <to>fr-amount_0-Gst</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>fr-amount_0-Gst</from>
      <to>slkp-Gst-CreditGL_DebitGL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-LosingRebate</from>
      <to>fr-amount_0-LoosingRebate</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-BetlineRebate</from>
      <to>fr-amount_0-BetlineRebate</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>fr-amount_0-BetlineRebate</from>
      <to>slkp-BetlineRebate-CreditGL_DebitGL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-extract_fields</from>
      <to>tf-sort_unique_grouping</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>tf-sort_unique_grouping</from>
      <to>slkp-headers</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>fr-amount_0-LoosingRebate</from>
      <to>slkp-LoosingRebate-CreditGL_DebitGL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-headers</from>
      <to>slkp-ClubShort</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ti-yy1_finfixedcon</from>
      <to>frmla-DebtorConst</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-DebtorConst</from>
      <to>slkp-DebtorConst</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-Currency_SGD</from>
      <to>slkp-DebtorConst</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-DebtorConst</from>
      <to>slkp-ProfitCenterBS</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ac-Document_1 2</from>
      <to>sm-GroupKey-Document-csv-xml</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ac-Document_1</from>
      <to>sm-GroupKey-Document-csv</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-Turnover-CreditGL_DebitGL</from>
      <to>frmla-Debtor</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-Debtor</from>
      <to>udjc-Turnover-build_xml</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sv-Reformat_Precision</from>
      <to>frmla-Turnover</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-Turnover</from>
      <to>fr-amount_0-Turnover</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>fr-amount_0-CashReceipt</from>
      <to>slkp-CashReceipt-CreditGL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-CashReceipt</from>
      <to>fr-amount_0-CashReceipt</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>udjc-CashReceipt-build_csv</from>
      <to>ac-Document_7</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sv-Reformat_Precision</from>
      <to>frmla-CashReceipt</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sv-format_creditgl_debitgl</from>
      <to>slkp-CashReceipt-CreditGL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ac-Document_7</from>
      <to>sm-GroupKey-Document-csv</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ac-Document_7 2</from>
      <to>sm-GroupKey-Document-csv-xml</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-CashReceipt-CreditGL</from>
      <to>udjc-CashReceipt-build_xml</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-CashReceipt-CreditGL</from>
      <to>udjc-CashReceipt-build_csv</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>udjc-CashReceipt-build_xml</from>
      <to>ac-Document_7 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ti-yy1_finfixedcon</from>
      <to>frmla-ProfitCenterCashReceipt</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-ProfitCenterCashReceipt</from>
      <to>slkp-ProfitCenterCashReceipt</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-PL 2</from>
      <to>slkp-BS</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-ProfitCenterRebate</from>
      <to>slkp-ProfitCenterRebate</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ti-yy1_finfixedcon</from>
      <to>frmla-ProfitCenterRebate</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-ProfitCenterBS</from>
      <to>slkp-ProfitCenterRebate</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-ProfitCenterRebate</from>
      <to>slkp-ProfitCenterCashReceipt</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ti-yy1_bmcs_desc</from>
      <to>slkp-ClubShort-BettingDuty</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-BettingDuty-BS</from>
      <to>sv-Reformat_BettingDuty</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-BettingDuty-PL</from>
      <to>frmla-BettingDuty-BS</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-BettingDuty</from>
      <to>fr-amount_0-BettingDuty</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>fr-amount_0-BettingDuty</from>
      <to>slkp-BettingDuty-CreditGL_DebitGL</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>sv-Reformat_Precision</from>
      <to>frmla-BettingDuty</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>fr-amount_0-BettingDuty 2</from>
      <to>slkp-BettingDuty-CreditGL_DebitGL 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-BettingDuty-CreditGL_DebitGL 2</from>
      <to>udjc-BettingDuty-build_csv 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-BettingDuty-CreditGL_DebitGL 2</from>
      <to>udjc-BettingDuty-build_xml 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>udjc-BettingDuty-build_csv 2</from>
      <to>ac-Document_4 3</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>udjc-BettingDuty-build_xml 2</from>
      <to>ac-Document_4 2 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ur-MT_AT</from>
      <to>slkp-BettingDuty-PL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ac-Document_4 3</from>
      <to>sm-GroupKey-Document-csv</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ac-Document_4 2 2</from>
      <to>sm-GroupKey-Document-csv-xml</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>ti-yy1_bmcs_turn_pcenter</from>
      <to>slkp-ProfitCenterPL-BettingDuty</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-ProfitCenterCashReceipt</from>
      <to>slkp-AccountingDocumentType</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sv-format_creditgl_debitgl</from>
      <to>slkp-BettingDuty-CreditGL_DebitGL 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sr-MD_AT</from>
      <to>gb-BettingDuty-PL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sr-MD_AT</from>
      <to>ur-MT_AT</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>gb-BettingDuty-PL</from>
      <to>slkp-BettingDuty-PL</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-ClubShort-BettingDuty</from>
      <to>slkp-ProfitCenterPL-BettingDuty</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-AccountingDocumentType</from>
      <to>slkp-headers_BettingDuty</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-extract-BettingDuty</from>
      <to>slkp-headers_BettingDuty</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-ProfitCenterPL-BettingDuty</from>
      <to>frmla-fields-BettingDuty</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>slkp-headers_BettingDuty</from>
      <to>slkp-ClubShort-BettingDuty</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sm-GroupKey-Document-csv</from>
      <to>frmla-split_group_key</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-Debtor</from>
      <to>udjc-Turnover-build_csv</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>udjc-Turnover-build_csv</from>
      <to>ac-Document_1</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-fields-BettingDuty</from>
      <to>sr-MD_AT</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sv-Reformat_BettingDuty</from>
      <to>frmla-BettingDuty 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-BettingDuty 2</from>
      <to>fr-amount_0-BettingDuty 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>gv-input_bettingdutycmgl</from>
      <to>mjsv-spec_input</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>mjsv-spec_input</from>
      <to>fr-bettingdutycmgl</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>gv-input_bettingdutynoncmgl</from>
      <to>mjsv-spec_input 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>fr-bettingdutycmgl</from>
      <to>te-bettingdutycmgl</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>frmla-Add-EmptyFields</from>
      <to>frmla-extract-BettingDuty</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>te-bettingdutynoncmgl</from>
      <to>sv-bettingdutynoncmgl</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sv-bettingdutynoncmgl</from>
      <to>frmla-Add-EmptyFields</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>mjsv-spec_input 2</from>
      <to>fr-bettingdutynoncmgl</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>fr-bettingdutynoncmgl</from>
      <to>te-bettingdutynoncmgl</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>te-bettingdutycmgl</from>
      <to>sv-bettingdutycmgl</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>sv-bettingdutycmgl</from>
      <to>frmla-extract-BettingDuty</to>
      <enabled>Y</enabled>
    </hop>
  </order>
  <step>
    <name>ac-Document_1</name>
    <type>Constant</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>Document</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>1</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>864</xloc>
      <yloc>1360</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ac-Document_1 2</name>
    <type>Constant</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>Document</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>1</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>864</xloc>
      <yloc>1456</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ac-Document_2</name>
    <type>Constant</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>Document</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>2</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>864</xloc>
      <yloc>1568</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ac-Document_2 2</name>
    <type>Constant</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>Document</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>2</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>864</xloc>
      <yloc>1632</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ac-Document_3</name>
    <type>Constant</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>Document</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>3</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>864</xloc>
      <yloc>1760</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ac-Document_3 2</name>
    <type>Constant</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>Document</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>3</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>864</xloc>
      <yloc>1824</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ac-Document_4</name>
    <type>Constant</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>Document</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>4</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>928</xloc>
      <yloc>2000</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ac-Document_4 2</name>
    <type>Constant</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>Document</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>4</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>928</xloc>
      <yloc>2064</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ac-Document_4 2 2</name>
    <type>Constant</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>Document</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>4</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>896</xloc>
      <yloc>2224</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ac-Document_4 3</name>
    <type>Constant</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>Document</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>4</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>896</xloc>
      <yloc>2160</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ac-Document_5</name>
    <type>Constant</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>Document</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>5</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>896</xloc>
      <yloc>2384</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ac-Document_5 2</name>
    <type>Constant</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>Document</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>5</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>896</xloc>
      <yloc>2448</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ac-Document_6</name>
    <type>Constant</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>Document</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>6</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>896</xloc>
      <yloc>2576</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ac-Document_6 2</name>
    <type>Constant</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>Document</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>6</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>896</xloc>
      <yloc>2640</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ac-Document_7</name>
    <type>Constant</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>Document</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>7</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>880</xloc>
      <yloc>2768</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ac-Document_7 2</name>
    <type>Constant</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>Document</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>7</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>880</xloc>
      <yloc>2864</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>calc-BettingDutyRounded</name>
    <type>Calculator</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <calculation>
      <field_name>BettingDutyRounded</field_name>
      <calc_type>ROUND_STD_2</calc_type>
      <field_a>BettingDuty</field_a>
      <field_b>Round</field_b>
      <field_c />
      <value_type>Number</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <remove>N</remove>
      <conversion_mask />
      <decimal_symbol />
      <grouping_symbol />
      <currency_symbol />
    </calculation>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1920</xloc>
      <yloc>768</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>calc-BettingDutyRounded 2</name>
    <type>Calculator</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <calculation>
      <field_name>BettingDutyRounded</field_name>
      <calc_type>ROUND_STD_2</calc_type>
      <field_a>BettingDutyBS</field_a>
      <field_b>Round</field_b>
      <field_c />
      <value_type>Number</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <remove>N</remove>
      <conversion_mask />
      <decimal_symbol />
      <grouping_symbol />
      <currency_symbol />
    </calculation>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>2160</xloc>
      <yloc>1184</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>fr-amount_0-BetlineRebate</name>
    <type>FilterRows</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <send_true_to>slkp-BetlineRebate-CreditGL_DebitGL</send_true_to>
    <send_false_to />
    <compare>
      <condition>
        <negated>N</negated>
        <leftvalue>RebatePL</leftvalue>
        <function>&lt;></function>
        <rightvalue />
        <value>
          <name>constant</name>
          <type>Number</type>
          <text>0.0</text>
          <length>-1</length>
          <precision>-1</precision>
          <isnull>N</isnull>
          <mask>#.#</mask>
        </value>
      </condition>
    </compare>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1568</xloc>
      <yloc>2640</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>fr-amount_0-BettingDuty</name>
    <type>FilterRows</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <send_true_to>slkp-BettingDuty-CreditGL_DebitGL</send_true_to>
    <send_false_to />
    <compare>
      <condition>
        <negated>N</negated>
        <leftvalue>BettingDutyPL</leftvalue>
        <function>&lt;></function>
        <rightvalue />
        <value>
          <name>constant</name>
          <type>Number</type>
          <text>0.0</text>
          <length>-1</length>
          <precision>-1</precision>
          <isnull>N</isnull>
          <mask>#.#</mask>
        </value>
      </condition>
    </compare>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1504</xloc>
      <yloc>2064</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>fr-amount_0-BettingDuty 2</name>
    <type>FilterRows</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <send_true_to>slkp-BettingDuty-CreditGL_DebitGL 2</send_true_to>
    <send_false_to />
    <compare>
      <condition>
        <negated>N</negated>
        <leftvalue>BettingDutyPL</leftvalue>
        <function>&gt;</function>
        <rightvalue />
        <value>
          <name>constant</name>
          <type>Number</type>
          <text>0.0</text>
          <length>-1</length>
          <precision>-1</precision>
          <isnull>N</isnull>
          <mask>#.#</mask>
        </value>
      </condition>
    </compare>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1632</xloc>
      <yloc>2224</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>fr-amount_0-CashReceipt</name>
    <type>FilterRows</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <send_true_to>slkp-CashReceipt-CreditGL</send_true_to>
    <send_false_to />
    <compare>
      <condition>
        <negated>N</negated>
        <conditions>
          <condition>
            <negated>N</negated>
            <leftvalue>CashReceiptPL</leftvalue>
            <function>&lt;></function>
            <rightvalue />
            <value>
              <name>constant</name>
              <type>Number</type>
              <text>0.0</text>
              <length>-1</length>
              <precision>-1</precision>
              <isnull>N</isnull>
              <mask>#.#</mask>
            </value>
          </condition>
          <condition>
            <negated>N</negated>
            <operator>AND</operator>
            <leftvalue>PaymentMode</leftvalue>
            <function>=</function>
            <rightvalue />
            <value>
              <name>constant</name>
              <type>String</type>
              <text>CA</text>
              <length>-1</length>
              <precision>-1</precision>
              <isnull>N</isnull>
              <mask />
            </value>
          </condition>
        </conditions>
      </condition>
    </compare>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1568</xloc>
      <yloc>2768</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>fr-amount_0-DividendPayable</name>
    <type>FilterRows</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <send_true_to>slkp-DividendPayable-CreditGL_DebitGL</send_true_to>
    <send_false_to />
    <compare>
      <condition>
        <negated>N</negated>
        <leftvalue>DividendPayablePL</leftvalue>
        <function>&lt;></function>
        <rightvalue />
        <value>
          <name>constant</name>
          <type>Number</type>
          <text>0.0</text>
          <length>-1</length>
          <precision>-1</precision>
          <isnull>N</isnull>
          <mask>#.#</mask>
        </value>
      </condition>
    </compare>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1520</xloc>
      <yloc>1632</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>fr-amount_0-Gst</name>
    <type>FilterRows</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <send_true_to>slkp-Gst-CreditGL_DebitGL</send_true_to>
    <send_false_to />
    <compare>
      <condition>
        <negated>N</negated>
        <leftvalue>GstPL</leftvalue>
        <function>&lt;></function>
        <rightvalue />
        <value>
          <name>constant</name>
          <type>Number</type>
          <text>0.0</text>
          <length>-1</length>
          <precision>-1</precision>
          <isnull>N</isnull>
          <mask>#.#</mask>
        </value>
      </condition>
    </compare>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1504</xloc>
      <yloc>1824</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>fr-amount_0-LoosingRebate</name>
    <type>FilterRows</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <send_true_to>slkp-LoosingRebate-CreditGL_DebitGL</send_true_to>
    <send_false_to />
    <compare>
      <condition>
        <negated>N</negated>
        <leftvalue>LosingRebatePL</leftvalue>
        <function>&lt;></function>
        <rightvalue />
        <value>
          <name>constant</name>
          <type>Number</type>
          <text>0.0</text>
          <length>-1</length>
          <precision>-1</precision>
          <isnull>N</isnull>
          <mask>#.#</mask>
        </value>
      </condition>
    </compare>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1568</xloc>
      <yloc>2448</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>fr-amount_0-Turnover</name>
    <type>FilterRows</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <send_true_to>slkp-Turnover-CreditGL_DebitGL</send_true_to>
    <send_false_to />
    <compare>
      <condition>
        <negated>N</negated>
        <leftvalue>TurnoverPL</leftvalue>
        <function>&lt;></function>
        <rightvalue />
        <value>
          <name>constant</name>
          <type>Number</type>
          <text>0.0</text>
          <length>-1</length>
          <precision>-1</precision>
          <isnull>N</isnull>
          <mask>#.#</mask>
        </value>
      </condition>
    </compare>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1520</xloc>
      <yloc>1456</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-AccountingDocumentType</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>AccountingDocumentType</field_name>
      <formula_string>[DocType]</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>272</xloc>
      <yloc>848</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-Add-EmptyFields</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>Commingled</field_name>
      <formula_string>""</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1376</xloc>
      <yloc>496</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-BetlineRebate</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>DocumentHeaderText</field_name>
      <formula_string>IF([PaymentMode] = "CA"; "TOTE CASH REBATES"; IF([PaymentMode] = "AC"; "TOTE TELEBET REBATES";""))</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>Sign</field_name>
      <formula_string>"06 - Losing_Rebate"</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>ProfitCenterPL</field_name>
      <formula_string>IF(ISBLANK([ProfitCenterRebateConst]); [ProfitCenterPL]; [ProfitCenterRebateConst])</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1728</xloc>
      <yloc>2640</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-BettingDuty</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>DocumentHeaderText</field_name>
      <formula_string>IF([PaymentMode] = "CA"; "TOTE CASH PROFIT TAX"; IF([PaymentMode] = "AC"; "TOTE TELEBET PROFIT TAX";""))</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>Sign</field_name>
      <formula_string>"04 - Betting_Duty"</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1904</xloc>
      <yloc>2064</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-BettingDuty 2</name>
    <type>Formula</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>DocumentHeaderText</field_name>
      <formula_string>If([GuestOrHostIndicator]=""; "GD NON COMMINGLING"; IF(LOWER([GuestOrHostIndicator])="guest"; "GD COMMINGLING GUEST"; IF(LOWER([GuestOrHostIndicator])="host"; "GD COMMINGLING HOST"; "")))</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>Sign</field_name>
      <formula_string>"04 - Betting_Duty"</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>BetMode</field_name>
      <formula_string>"CASH"</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1936</xloc>
      <yloc>2224</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-BettingDutyDifference</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>BettingDutyPLLast</field_name>
      <formula_string>[BettingDutyPL] + ([BettingDutyBS] - [TotalBettingDutyPL])</formula_string>
      <value_type>Number</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>2288</xloc>
      <yloc>1456</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-BettingDutyPL</name>
    <type>Formula</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>BettingDuty</field_name>
      <formula_string>([Turnover] - [DividendPayable] - [Gst]) * 0.25</formula_string>
      <value_type>Number</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field>BettingDuty</replace_field>
    </formula>
    <formula>
      <field_name>Round</field_name>
      <formula_string>2</formula_string>
      <value_type>Integer</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1568</xloc>
      <yloc>976</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-CashReceipt</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>DocumentHeaderText</field_name>
      <formula_string>"TOTE DAILY CASH RECEIPT"</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>Sign</field_name>
      <formula_string>"07 - Cash_Receipts"</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>CustomDocumentItemText</field_name>
      <formula_string>"CASH RECEIPTS - " &amp; [DocumentItemText]</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1728</xloc>
      <yloc>2768</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-CompanyCode</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>CompanyCode</field_name>
      <formula_string>[FieldVal]</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>832</xloc>
      <yloc>304</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-CreatedByUser</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>CreatedByUser</field_name>
      <formula_string>[FieldVal]</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>832</xloc>
      <yloc>224</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-Currency_SGD</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>Currency_SGD</field_name>
      <formula_string>[FieldVal]</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>832</xloc>
      <yloc>400</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-DebitCode_BettingDuty</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>DebitCodeBettingDuty</field_name>
      <formula_string>IF([BettingDutyPL] &lt; 0; "H"; "S")</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>2288</xloc>
      <yloc>1760</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-Debtor</name>
    <type>Formula</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>DebtorBS</field_name>
      <formula_string>IF([PaymentMode] = "CA"; [DebtorConst]; "")</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>GLAccountBS</field_name>
      <formula_string>IF([PaymentMode] = "CA";"";[DebitGL])</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>ReferenceDocumentItem</field_name>
      <formula_string>IF([PaymentMode]="CA";[ReferenceDocumentItem];"")</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field>ReferenceDocumentItem</replace_field>
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1184</xloc>
      <yloc>1456</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-DebtorConst</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>DebtorConst</field_name>
      <formula_string>[FieldVal]</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>832</xloc>
      <yloc>480</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-DividendPayable</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>DocumentHeaderText</field_name>
      <formula_string>IF([PaymentMode] = "CA"; "TOTE CASH DIV. PAYABLE"; IF([PaymentMode] = "AC"; "TOTE TELEBET DIV. PAYABLE";""))</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>Sign</field_name>
      <formula_string>"02 - Dividend_Payable"</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1696</xloc>
      <yloc>1632</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-Gst</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>DocumentHeaderText</field_name>
      <formula_string>IF([PaymentMode] = "CA"; "GST OUT-PUT TAX PAYABLE"; IF([PaymentMode] = "AC"; "GST OUT-PUT TAX - TELEBET";""))</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>Sign</field_name>
      <formula_string>"03 - GST"</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1696</xloc>
      <yloc>1824</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-LosingRebate</name>
    <type>Formula</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>DocumentHeaderText</field_name>
      <formula_string>IF([PaymentMode] = "CA"; "TOTE CASH REBATES"; IF([PaymentMode] = "AC"; "TOTE TELEBET REBATES";""))</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>Sign</field_name>
      <formula_string>"06 - Losing_Rebate"</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>ProfitCenterPL</field_name>
      <formula_string>IF(ISBLANK([ProfitCenterRebateConst]); [ProfitCenterPL]; [ProfitCenterRebateConst])</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field>ProfitCenterPL</replace_field>
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1728</xloc>
      <yloc>2448</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-OriginalReferenceDocumentLogicalSystem</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>OriginalReferenceDocumentLogicalSystem</field_name>
      <formula_string>[FieldVal]</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>832</xloc>
      <yloc>128</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-ProfitCenterBS</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>ProfitCenterBS</field_name>
      <formula_string>[FieldVal]</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>832</xloc>
      <yloc>576</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-ProfitCenterCashReceipt</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>ProfitCenterCashReceiptConst</field_name>
      <formula_string>[FieldVal]</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>832</xloc>
      <yloc>752</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-ProfitCenterRebate</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>ProfitCenterRebateConst</field_name>
      <formula_string>[FieldVal]</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>832</xloc>
      <yloc>656</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-Reference1InDocumentHeader</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>Reference1InDocumentHeader</field_name>
      <formula_string>[interface_code] &amp; [businessdate] &amp; [control_id]</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>288</xloc>
      <yloc>128</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-Round</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>Round</field_name>
      <formula_string>2</formula_string>
      <value_type>Integer</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>2000</xloc>
      <yloc>1184</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-Turnover</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>DocumentHeaderText</field_name>
      <formula_string>IF([PaymentMode] = "CA"; "TOTE CASH TURNOVER"; IF([PaymentMode] = "AC"; "TOTE TELEBET TURNOVER";""))</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>Sign</field_name>
      <formula_string>"01 - Turnover"</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1696</xloc>
      <yloc>1456</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-BettingDuty-BS</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>BettingDutyBS</field_name>
      <formula_string>-1*ABS([BettingDutyPL])</formula_string>
      <value_type>Number</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>2528</xloc>
      <yloc>1568</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-club_short</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>DocumentReferenceID</field_name>
      <formula_string>[ClubShort] &amp; " " &amp; RIGHT([RawPostingDate]; 2) &amp; IF(MID([RawPostingDate]; 5; 2) = "01"; "JAN"; IF(MID([RawPostingDate]; 5; 2) = "02"; "FEB"; IF(MID([RawPostingDate]; 5; 2) = "03"; "MAR"; IF(MID([RawPostingDate]; 5; 2) = "04"; "APR"; IF(MID([RawPostingDate]; 5; 2) = "05"; "MAY"; IF(MID([RawPostingDate]; 5; 2) = "06"; "JUN"; IF(MID([RawPostingDate]; 5; 2) = "07"; "JUL"; IF(MID([RawPostingDate]; 5; 2) = "08"; "AUG"; IF(MID([RawPostingDate]; 5; 2) = "09"; "SEP"; IF(MID([RawPostingDate]; 5; 2) = "10"; "OCT"; IF(MID([RawPostingDate]; 5; 2) = "11"; "NOV"; "DEC"))))))))))) &amp; MID([RawPostingDate]; 3; 2)</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>DocumentItemText</field_name>
      <formula_string>[ClubShort] &amp; " " &amp; RIGHT([RawFixtureDate]; 2) &amp; IF(MID([RawFixtureDate]; 5; 2) = "01"; "JAN"; IF(MID([RawFixtureDate]; 5; 2) = "02"; "FEB"; IF(MID([RawFixtureDate]; 5; 2) = "03"; "MAR"; IF(MID([RawFixtureDate]; 5; 2) = "04"; "APR"; IF(MID([RawFixtureDate]; 5; 2) = "05"; "MAY"; IF(MID([RawFixtureDate]; 5; 2) = "06"; "JUN"; IF(MID([RawFixtureDate]; 5; 2) = "07"; "JUL"; IF(MID([RawFixtureDate]; 5; 2) = "08"; "AUG"; IF(MID([RawFixtureDate]; 5; 2) = "09"; "SEP"; IF(MID([RawFixtureDate]; 5; 2) = "10"; "OCT"; IF(MID([RawFixtureDate]; 5; 2) = "11"; "NOV"; "DEC"))))))))))) &amp; MID([RawFixtureDate]; 3; 2)</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>SoldMaterial</field_name>
      <formula_string>[ClubShort]</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1136</xloc>
      <yloc>976</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-extract-BettingDuty</name>
    <type>Formula</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>RawFixtureDate</field_name>
      <formula_string>LEFT([FixtureDate]; 4) &amp; MID([FixtureDate]; 6; 2) &amp; RIGHT ([FixtureDate]; 2)</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>DocumentDate</field_name>
      <formula_string>LEFT([FixtureDate]; 4) &amp; "-" &amp; MID([FixtureDate]; 6; 2) &amp; "-"  &amp; RIGHT ([FixtureDate]; 2)</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>PostingDate</field_name>
      <formula_string>LEFT([FixtureDate]; 4) &amp; "-" &amp; MID([FixtureDate]; 6; 2) &amp; "-"  &amp; RIGHT ([FixtureDate]; 2)</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>AssignmentReference</field_name>
      <formula_string>LEFT([FixtureDate]; 4) &amp; "-" &amp; MID([FixtureDate]; 6; 2) &amp; "-"  &amp; RIGHT ([FixtureDate]; 2)</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>ClubMeeting</field_name>
      <formula_string>TRIM([ClubMeeting])</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field>ClubMeeting</replace_field>
    </formula>
    <formula>
      <field_name>ActualMeeting</field_name>
      <formula_string>TRIM([ActualMeeting])</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field>ActualMeeting</replace_field>
    </formula>
    <formula>
      <field_name>GuestOrHostIndicator</field_name>
      <formula_string>[Commingled]</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>Header_Key</field_name>
      <formula_string>"Header"</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>Location_Key</field_name>
      <formula_string>"GAMEDUTY"</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1184</xloc>
      <yloc>496</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-extract_fields</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>Header_Key</field_name>
      <formula_string>"Header"</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>RawFixtureDate</field_name>
      <formula_string>LEFT([FixtureDate]; 4) &amp; MID([FixtureDate]; 6; 2) &amp; RIGHT ([FixtureDate]; 2)</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>AssignmentReference</field_name>
      <formula_string>LEFT([FixtureDate]; 4) &amp; "-" &amp; MID([FixtureDate]; 6; 2) &amp; "-"  &amp; RIGHT ([FixtureDate]; 2)</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>DocumentDate</field_name>
      <formula_string>LEFT([FixtureDate]; 4) &amp; "-" &amp; MID([FixtureDate]; 6; 2) &amp; "-"  &amp; RIGHT ([FixtureDate]; 2)</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>PostingDate</field_name>
      <formula_string>LEFT([FixtureDate]; 4) &amp; "-" &amp; MID([FixtureDate]; 6; 2) &amp; "-"  &amp; RIGHT ([FixtureDate]; 2)</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>RawPostingDate</field_name>
      <formula_string>LEFT([FixtureDate]; 4) &amp; MID([FixtureDate]; 6; 2) &amp; RIGHT ([FixtureDate]; 2)</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>ClubMeeting</field_name>
      <formula_string>TRIM([ClubMeeting])</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field>ClubMeeting</replace_field>
    </formula>
    <formula>
      <field_name>Location</field_name>
      <formula_string>TRIM([Location])</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field>Location</replace_field>
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>160</xloc>
      <yloc>976</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-fields-BettingDuty</name>
    <type>Formula</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>DocumentReferenceID</field_name>
      <formula_string>[ClubShort] &amp; " " &amp; RIGHT([RawFixtureDate]; 2) &amp; IF(MID([RawFixtureDate]; 5; 2) = "01"; "JAN"; IF(MID([RawFixtureDate]; 5; 2) = "02"; "FEB"; IF(MID([RawFixtureDate]; 5; 2) = "03"; "MAR"; IF(MID([RawFixtureDate]; 5; 2) = "04"; "APR"; IF(MID([RawFixtureDate]; 5; 2) = "05"; "MAY"; IF(MID([RawFixtureDate]; 5; 2) = "06"; "JUN"; IF(MID([RawFixtureDate]; 5; 2) = "07"; "JUL"; IF(MID([RawFixtureDate]; 5; 2) = "08"; "AUG"; IF(MID([RawFixtureDate]; 5; 2) = "09"; "SEP"; IF(MID([RawFixtureDate]; 5; 2) = "10"; "OCT"; IF(MID([RawFixtureDate]; 5; 2) = "11"; "NOV"; "DEC"))))))))))) &amp; MID([RawFixtureDate]; 3; 2)</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>DocumentItemText</field_name>
      <formula_string>[ClubShort] &amp; " " &amp; RIGHT([RawFixtureDate]; 2) &amp; IF(MID([RawFixtureDate]; 5; 2) = "01"; "JAN"; IF(MID([RawFixtureDate]; 5; 2) = "02"; "FEB"; IF(MID([RawFixtureDate]; 5; 2) = "03"; "MAR"; IF(MID([RawFixtureDate]; 5; 2) = "04"; "APR"; IF(MID([RawFixtureDate]; 5; 2) = "05"; "MAY"; IF(MID([RawFixtureDate]; 5; 2) = "06"; "JUN"; IF(MID([RawFixtureDate]; 5; 2) = "07"; "JUL"; IF(MID([RawFixtureDate]; 5; 2) = "08"; "AUG"; IF(MID([RawFixtureDate]; 5; 2) = "09"; "SEP"; IF(MID([RawFixtureDate]; 5; 2) = "10"; "OCT"; IF(MID([RawFixtureDate]; 5; 2) = "11"; "NOV"; "DEC"))))))))))) &amp; MID([RawFixtureDate]; 3; 2)</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>SoldMaterial</field_name>
      <formula_string>[ClubShort]</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>2528</xloc>
      <yloc>624</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-negative_credit_amounts</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>TurnoverPL</field_name>
      <formula_string>-1*ABS([TurnoverPL])</formula_string>
      <value_type>Number</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field>TurnoverPL</replace_field>
    </formula>
    <formula>
      <field_name>DividendPayableBS</field_name>
      <formula_string>-1*ABS([DividendPayableBS])</formula_string>
      <value_type>Number</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field>DividendPayableBS</replace_field>
    </formula>
    <formula>
      <field_name>GstBs</field_name>
      <formula_string>-1*ABS([GstBs])</formula_string>
      <value_type>Number</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field>GstBs</replace_field>
    </formula>
    <formula>
      <field_name>BettingDutyBS</field_name>
      <formula_string>-1*ABS([BettingDutyBS])</formula_string>
      <value_type>Number</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field>BettingDutyBS</replace_field>
    </formula>
    <formula>
      <field_name>RebateBS</field_name>
      <formula_string>-1*ABS([RebateBS])</formula_string>
      <value_type>Number</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field>RebateBS</replace_field>
    </formula>
    <formula>
      <field_name>LosingRebateBS</field_name>
      <formula_string>-1*ABS([LosingRebateBS])</formula_string>
      <value_type>Number</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field>LosingRebateBS</replace_field>
    </formula>
    <formula>
      <field_name>CashReceiptPL</field_name>
      <formula_string>-1*ABS([CashReceiptPL])</formula_string>
      <value_type>None</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field>CashReceiptPL</replace_field>
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>2288</xloc>
      <yloc>1568</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-split_group_key</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>Key1</field_name>
      <formula_string>Left([GroupKey]; 2)</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>Key2</field_name>
      <formula_string>Mid([GroupKey];3;2)</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>384</xloc>
      <yloc>1792</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>frmla-split_group_key 2</name>
    <type>Formula</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <formula>
      <field_name>Key1</field_name>
      <formula_string>Left([GroupKey]; 2)</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <formula>
      <field_name>Key2</field_name>
      <formula_string>Mid([GroupKey];3;2)</formula_string>
      <value_type>String</value_type>
      <value_length>-1</value_length>
      <value_precision>-1</value_precision>
      <replace_field />
    </formula>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>384</xloc>
      <yloc>2064</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>gb-BS</name>
    <type>GroupBy</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <all_rows>N</all_rows>
    <ignore_aggregate>N</ignore_aggregate>
    <field_ignore />
    <directory>%%java.io.tmpdir%%</directory>
    <prefix>grp</prefix>
    <add_linenr>N</add_linenr>
    <linenr_fieldname />
    <give_back_row>N</give_back_row>
    <group>
      <field>
        <name>ClubMeeting</name>
      </field>
      <field>
        <name>PaymentMode</name>
      </field>
    </group>
    <fields>
      <field>
        <aggregate>TurnoverBS</aggregate>
        <subject>Turnover</subject>
        <type>SUM</type>
        <valuefield />
      </field>
      <field>
        <aggregate>DividendPayableBS</aggregate>
        <subject>DividendPayable</subject>
        <type>SUM</type>
        <valuefield />
      </field>
      <field>
        <aggregate>GstBS</aggregate>
        <subject>Gst</subject>
        <type>SUM</type>
        <valuefield />
      </field>
      <field>
        <aggregate>RebateBS</aggregate>
        <subject>Rebate</subject>
        <type>SUM</type>
        <valuefield />
      </field>
      <field>
        <aggregate>BettingDutyBS</aggregate>
        <subject>BettingDuty</subject>
        <type>SUM</type>
        <valuefield />
      </field>
      <field>
        <aggregate>LosingRebateBS</aggregate>
        <subject>LosingRebate</subject>
        <type>SUM</type>
        <valuefield />
      </field>
      <field>
        <aggregate>CashReceiptBS</aggregate>
        <subject>Turnover</subject>
        <type>SUM</type>
        <valuefield />
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1888</xloc>
      <yloc>1184</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>gb-BettingDuty-PL</name>
    <type>GroupBy</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <all_rows>N</all_rows>
    <ignore_aggregate>N</ignore_aggregate>
    <field_ignore />
    <directory>%%java.io.tmpdir%%</directory>
    <prefix>grp</prefix>
    <add_linenr>N</add_linenr>
    <linenr_fieldname />
    <give_back_row>Y</give_back_row>
    <group>
      <field>
        <name>GuestOrHostIndicator</name>
      </field>
      <field>
        <name>ActualMeeting</name>
      </field>
    </group>
    <fields>
      <field>
        <aggregate>BettingDutyPL</aggregate>
        <subject>BettingDuty</subject>
        <type>SUM</type>
        <valuefield />
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>2528</xloc>
      <yloc>1200</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>gb-PL</name>
    <type>GroupBy</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <all_rows>N</all_rows>
    <ignore_aggregate>N</ignore_aggregate>
    <field_ignore />
    <directory>%%java.io.tmpdir%%</directory>
    <prefix>grp</prefix>
    <add_linenr>N</add_linenr>
    <linenr_fieldname />
    <give_back_row>Y</give_back_row>
    <group>
      <field>
        <name>ClubMeeting</name>
      </field>
      <field>
        <name>PaymentMode</name>
      </field>
      <field>
        <name>Location</name>
      </field>
      <field>
        <name>TerminalType</name>
      </field>
    </group>
    <fields>
      <field>
        <aggregate>TurnoverPL</aggregate>
        <subject>Turnover</subject>
        <type>SUM</type>
        <valuefield />
      </field>
      <field>
        <aggregate>DividendPayablePL</aggregate>
        <subject>DividendPayable</subject>
        <type>SUM</type>
        <valuefield />
      </field>
      <field>
        <aggregate>GstPL</aggregate>
        <subject>Gst</subject>
        <type>SUM</type>
        <valuefield />
      </field>
      <field>
        <aggregate>RebatePL</aggregate>
        <subject>Rebate</subject>
        <type>SUM</type>
        <valuefield />
      </field>
      <field>
        <aggregate>BettingDutyPL</aggregate>
        <subject>BettingDutyRounded</subject>
        <type>SUM</type>
        <valuefield />
      </field>
      <field>
        <aggregate>LosingRebatePL</aggregate>
        <subject>LosingRebate</subject>
        <type>SUM</type>
        <valuefield />
      </field>
      <field>
        <aggregate>CashReceiptPLTemp</aggregate>
        <subject>Turnover</subject>
        <type>SUM</type>
        <valuefield />
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>2048</xloc>
      <yloc>768</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>gb-TotalBettingDutyPL</name>
    <type>GroupBy</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <all_rows>N</all_rows>
    <ignore_aggregate>N</ignore_aggregate>
    <field_ignore />
    <directory>%%java.io.tmpdir%%</directory>
    <prefix>grp</prefix>
    <add_linenr>N</add_linenr>
    <linenr_fieldname />
    <give_back_row>Y</give_back_row>
    <group>
      <field>
        <name>ClubMeeting</name>
      </field>
      <field>
        <name>PaymentMode</name>
      </field>
    </group>
    <fields>
      <field>
        <aggregate>TotalBettingDutyPL</aggregate>
        <subject>BettingDutyPL</subject>
        <type>SUM</type>
        <valuefield />
      </field>
      <field>
        <aggregate>CashReceiptPL</aggregate>
        <subject>CashReceiptPLTemp</subject>
        <type>SUM</type>
        <valuefield />
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>2144</xloc>
      <yloc>768</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>gr-fixed_values</name>
    <type>RowGenerator</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>OriginalReferenceDocumentType</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>BKPFF</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>OriginalReferenceDocument</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif />
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>Y</set_empty_string>
      </field>
      <field>
        <name>OriginalReferenceDocumentLogicalSystem_Key</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>SYSTEM</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>BusinessTransactionType</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>RFBU</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>Header_Key</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>Header</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>AccountingDocumentType_Key</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>BMTRNOVR</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>CreatedByUser_Key</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>INT_USER</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>CompanyCode_Key</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>ABC_COCODE</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>Currency_SGD_Key</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>CURR_SGD</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>ProfitCenter_Key</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>ABC_DWPCTR</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>CreditCode</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>H</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>DebitCode</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>S</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>FileType</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>BMTRNOVR</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>AccountAssignmentType</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>EO</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>Debtor_Key</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>BMCS_CUST</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>ProfitCenter_CashReceipt_Key</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>ABC_DPCTR</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>ProfitCenter_Rebate_Key</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>BMCS_REBATE</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>ReferenceDocumentItem</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif>1</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
    </fields>
    <limit>1</limit>
    <never_ending>N</never_ending>
    <interval_in_ms>5000</interval_in_ms>
    <row_time_field>now</row_time_field>
    <last_time_field>FiveSecondsAgo</last_time_field>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>16</xloc>
      <yloc>128</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>gv-parameters</name>
    <type>GetVariable</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>interface_code</name>
        <variable>${interface_code}</variable>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <length>-1</length>
        <precision>-1</precision>
        <trim_type>both</trim_type>
      </field>
      <field>
        <name>control_id</name>
        <variable>${control_id}</variable>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <length>-1</length>
        <precision>-1</precision>
        <trim_type>both</trim_type>
      </field>
      <field>
        <name>businessdate</name>
        <variable>${businessdate}</variable>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <length>-1</length>
        <precision>-1</precision>
        <trim_type>both</trim_type>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>128</xloc>
      <yloc>128</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>pg filter</name>
    <type>FilterRows</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <send_true_to />
    <send_false_to />
    <compare>
      <condition>
        <negated>N</negated>
        <leftvalue>location_table</leftvalue>
        <function>=</function>
        <rightvalue />
        <value>
          <name>constant</name>
          <type>String</type>
          <text>8888</text>
          <length>-1</length>
          <precision>-1</precision>
          <isnull>N</isnull>
          <mask />
        </value>
      </condition>
    </compare>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1024</xloc>
      <yloc>96</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>pqi-turnover-data</name>
    <type>ParquetInput</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <passing_through_fields>N</passing_through_fields>
    <file>
      <environment />
      <name>${input.file}</name>
      <filemask />
      <exclude_filemask />
      <file_required>N</file_required>
      <include_subfolders>N</include_subfolders>
    </file>
    <fields>
      <field>
        <path>FIXTUREDATE</path>
        <name>FixtureDate</name>
        <type>String</type>
        <parquet_type>UTF8</parquet_type>
        <format />
      </field>
      <field>
        <path>CLUBMEETING</path>
        <name>ClubMeeting</name>
        <type>String</type>
        <parquet_type>UTF8</parquet_type>
        <format />
      </field>
      <field>
        <path>RACENUMBER</path>
        <name>RaceNumber</name>
        <type>String</type>
        <parquet_type>UTF8</parquet_type>
        <format />
      </field>
      <field>
        <path>PMODE</path>
        <name>PaymentMode</name>
        <type>String</type>
        <parquet_type>UTF8</parquet_type>
        <format />
      </field>
      <field>
        <path>SUMMARYTYPE</path>
        <name>Location</name>
        <type>String</type>
        <parquet_type>UTF8</parquet_type>
        <format />
      </field>
      <field>
        <path>SOURCE</path>
        <name>TerminalType</name>
        <type>String</type>
        <parquet_type>UTF8</parquet_type>
        <format />
      </field>
      <field>
        <path>TURNOVER</path>
        <name>Turnover</name>
        <type>Number</type>
        <parquet_type>UTF8</parquet_type>
        <format />
      </field>
      <field>
        <path>DIVIDENDPAYABLE</path>
        <name>DividendPayable</name>
        <type>Number</type>
        <parquet_type>UTF8</parquet_type>
        <format />
      </field>
      <field>
        <path>GST</path>
        <name>Gst</name>
        <type>Number</type>
        <parquet_type>UTF8</parquet_type>
        <format />
      </field>
      <field>
        <path>DUTY</path>
        <name>BettingDuty</name>
        <type>Number</type>
        <parquet_type>UTF8</parquet_type>
        <format />
      </field>
      <field>
        <path>REBATE</path>
        <name>Rebate</name>
        <type>Number</type>
        <parquet_type>UTF8</parquet_type>
        <format />
      </field>
      <field>
        <path>TIMESTAMP</path>
        <name>TIMESTAMP</name>
        <type>String</type>
        <parquet_type>UTF8</parquet_type>
        <format />
      </field>
      <field>
        <path>LOSINGREBATE</path>
        <name>LosingRebate</name>
        <type>Number</type>
        <parquet_type>UTF8</parquet_type>
        <format />
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>16</xloc>
      <yloc>976</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-AccountingDocumentType</name>
    <type>StreamLookup</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>frmla-AccountingDocumentType</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>AccountingDocumentType_Key</name>
        <field>FileType</field>
      </key>
      <value>
        <name>AccountingDocumentType</name>
        <rename>AccountingDocumentType</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>832</xloc>
      <yloc>848</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-BS</name>
    <type>StreamLookup</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>calc-BettingDutyRounded 2</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>ClubMeeting</name>
        <field>ClubMeeting</field>
      </key>
      <key>
        <name>PaymentMode</name>
        <field>PaymentMode</field>
      </key>
      <value>
        <name>TurnoverBS</name>
        <rename>TurnoverBS</rename>
        <default />
        <type>Number</type>
      </value>
      <value>
        <name>DividendPayableBS</name>
        <rename>DividendPayableBS</rename>
        <default />
        <type>Number</type>
      </value>
      <value>
        <name>GstBS</name>
        <rename>GstBS</rename>
        <default />
        <type>Number</type>
      </value>
      <value>
        <name>BettingDutyRounded</name>
        <rename>BettingDutyBS</rename>
        <default />
        <type>Number</type>
      </value>
      <value>
        <name>RebateBS</name>
        <rename>RebateBS</rename>
        <default />
        <type>Number</type>
      </value>
      <value>
        <name>LosingRebateBS</name>
        <rename>LosingRebateBS</rename>
        <default />
        <type>Number</type>
      </value>
      <value>
        <name>CashReceiptBS</name>
        <rename>CashReceiptBS</rename>
        <default />
        <type>Number</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>2288</xloc>
      <yloc>1184</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-BetMode</name>
    <type>StreamLookup</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>ti-yy1_bmcs_turn_betmode</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>FileType</name>
        <field>filetype</field>
      </key>
      <key>
        <name>CompanyCode</name>
        <field>ccode</field>
      </key>
      <key>
        <name>TerminalType</name>
        <field>terminaltype</field>
      </key>
      <value>
        <name>betmode</name>
        <rename>BetMode</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1264</xloc>
      <yloc>976</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-BetlineRebate-CreditGL_DebitGL</name>
    <type>StreamLookup</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>sv-format_creditgl_debitgl</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>CompanyCode</name>
        <field>ccode</field>
      </key>
      <key>
        <name>Sign</name>
        <field>sign</field>
      </key>
      <key>
        <name>PaymentMode</name>
        <field>paymentmode</field>
      </key>
      <key>
        <name>FileType</name>
        <field>filetype</field>
      </key>
      <value>
        <name>creditgl</name>
        <rename>CreditGL</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>debitgl</name>
        <rename>DebitGL</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1344</xloc>
      <yloc>2640</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-BettingDuty-CreditGL_DebitGL</name>
    <type>StreamLookup</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>sv-format_creditgl_debitgl</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>CompanyCode</name>
        <field>ccode</field>
      </key>
      <key>
        <name>Sign</name>
        <field>sign</field>
      </key>
      <key>
        <name>FileType</name>
        <field>filetype</field>
      </key>
      <value>
        <name>creditgl</name>
        <rename>CreditGL</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>debitgl</name>
        <rename>DebitGL</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1312</xloc>
      <yloc>2064</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-BettingDuty-CreditGL_DebitGL 2</name>
    <type>StreamLookup</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>sv-format_creditgl_debitgl</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>CompanyCode</name>
        <field>ccode</field>
      </key>
      <key>
        <name>Sign</name>
        <field>sign</field>
      </key>
      <key>
        <name>FileType</name>
        <field>filetype</field>
      </key>
      <value>
        <name>creditgl</name>
        <rename>CreditGL</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>debitgl</name>
        <rename>DebitGL</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1344</xloc>
      <yloc>2224</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-CashReceipt-CreditGL</name>
    <type>StreamLookup</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>sv-format_creditgl_debitgl</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>CompanyCode</name>
        <field>ccode</field>
      </key>
      <key>
        <name>PaymentMode</name>
        <field>paymentmode</field>
      </key>
      <key>
        <name>Sign</name>
        <field>sign</field>
      </key>
      <key>
        <name>FileType</name>
        <field>filetype</field>
      </key>
      <value>
        <name>debitgl</name>
        <rename>DebitGL</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1344</xloc>
      <yloc>2768</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-ClubShort</name>
    <type>StreamLookup</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>ti-yy1_bmcs_desc</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>ClubMeeting</name>
        <field>ClubMeeting</field>
      </key>
      <value>
        <name>ClubShort</name>
        <rename>ClubShort</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1008</xloc>
      <yloc>976</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-ClubShort-BettingDuty</name>
    <type>StreamLookup</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>ti-yy1_bmcs_desc</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>ClubMeeting</name>
        <field>ClubMeeting</field>
      </key>
      <value>
        <name>ClubShort</name>
        <rename>ClubShort</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1376</xloc>
      <yloc>624</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-CompanyCode</name>
    <type>StreamLookup</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>frmla-CompanyCode</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>CompanyCode_Key</name>
        <field>FieldType</field>
      </key>
      <value>
        <name>CompanyCode</name>
        <rename>CompanyCode</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>544</xloc>
      <yloc>304</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-CreatedByUser</name>
    <type>StreamLookup</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>frmla-CreatedByUser</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>CreatedByUser_Key</name>
        <field>FieldType</field>
      </key>
      <value>
        <name>CreatedByUser</name>
        <rename>CreatedByUser</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>544</xloc>
      <yloc>224</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-Currency_SGD</name>
    <type>StreamLookup</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>frmla-Currency_SGD</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>Currency_SGD_Key</name>
        <field>FieldType</field>
      </key>
      <value>
        <name>Currency_SGD</name>
        <rename>Currency_SGD</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>544</xloc>
      <yloc>400</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-DebtorConst</name>
    <type>StreamLookup</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>frmla-DebtorConst</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>Debtor_Key</name>
        <field>FieldType</field>
      </key>
      <value>
        <name>DebtorConst</name>
        <rename>DebtorConst</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>544</xloc>
      <yloc>480</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-DividendPayable-CreditGL_DebitGL</name>
    <type>StreamLookup</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>sv-format_creditgl_debitgl</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>CompanyCode</name>
        <field>ccode</field>
      </key>
      <key>
        <name>PaymentMode</name>
        <field>paymentmode</field>
      </key>
      <key>
        <name>Sign</name>
        <field>sign</field>
      </key>
      <key>
        <name>ClubMeeting</name>
        <field>clubmeeting</field>
      </key>
      <key>
        <name>FileType</name>
        <field>filetype</field>
      </key>
      <value>
        <name>creditgl</name>
        <rename>CreditGL</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>debitgl</name>
        <rename>DebitGL</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1312</xloc>
      <yloc>1632</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-Gst-CreditGL_DebitGL</name>
    <type>StreamLookup</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>sv-format_creditgl_debitgl</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>CompanyCode</name>
        <field>ccode</field>
      </key>
      <key>
        <name>Sign</name>
        <field>sign</field>
      </key>
      <key>
        <name>FileType</name>
        <field>filetype</field>
      </key>
      <value>
        <name>creditgl</name>
        <rename>CreditGL</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>debitgl</name>
        <rename>DebitGL</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1312</xloc>
      <yloc>1824</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-LoosingRebate-CreditGL_DebitGL</name>
    <type>StreamLookup</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>sv-format_creditgl_debitgl</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>CompanyCode</name>
        <field>ccode</field>
      </key>
      <key>
        <name>Sign</name>
        <field>sign</field>
      </key>
      <key>
        <name>PaymentMode</name>
        <field>paymentmode</field>
      </key>
      <key>
        <name>FileType</name>
        <field>filetype</field>
      </key>
      <value>
        <name>creditgl</name>
        <rename>CreditGL</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>debitgl</name>
        <rename>DebitGL</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1344</xloc>
      <yloc>2448</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-OriginalReferenceDocumentLogicalSystem</name>
    <type>StreamLookup</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>frmla-OriginalReferenceDocumentLogicalSystem</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>OriginalReferenceDocumentLogicalSystem_Key</name>
        <field>FieldType</field>
      </key>
      <value>
        <name>OriginalReferenceDocumentLogicalSystem</name>
        <rename>OriginalReferenceDocumentLogicalSystem</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>544</xloc>
      <yloc>128</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-PL</name>
    <type>StreamLookup</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>gb-PL</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>ClubMeeting</name>
        <field>ClubMeeting</field>
      </key>
      <key>
        <name>PaymentMode</name>
        <field>PaymentMode</field>
      </key>
      <key>
        <name>Location</name>
        <field>Location</field>
      </key>
      <key>
        <name>TerminalType</name>
        <field>TerminalType</field>
      </key>
      <value>
        <name>TurnoverPL</name>
        <rename>TurnoverPL</rename>
        <default />
        <type>Number</type>
      </value>
      <value>
        <name>DividendPayablePL</name>
        <rename>DividendPayablePL</rename>
        <default />
        <type>Number</type>
      </value>
      <value>
        <name>GstPL</name>
        <rename>GstPL</rename>
        <default />
        <type>Number</type>
      </value>
      <value>
        <name>BettingDutyPL</name>
        <rename>BettingDutyPL</rename>
        <default />
        <type>Number</type>
      </value>
      <value>
        <name>RebatePL</name>
        <rename>RebatePL</rename>
        <default />
        <type>Number</type>
      </value>
      <value>
        <name>LosingRebatePL</name>
        <rename>LosingRebatePL</rename>
        <default />
        <type>Number</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>2048</xloc>
      <yloc>976</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-PL 2</name>
    <type>StreamLookup</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>gb-TotalBettingDutyPL</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>ClubMeeting</name>
        <field>ClubMeeting</field>
      </key>
      <key>
        <name>PaymentMode</name>
        <field>PaymentMode</field>
      </key>
      <value>
        <name>TotalBettingDutyPL</name>
        <rename>TotalBettingDutyPL</rename>
        <default />
        <type>Number</type>
      </value>
      <value>
        <name>CashReceiptPL</name>
        <rename>CashReceiptPL</rename>
        <default />
        <type>Number</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>2144</xloc>
      <yloc>976</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-ProfitCenterBS</name>
    <type>StreamLookup</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>frmla-ProfitCenterBS</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>ProfitCenter_Key</name>
        <field>FieldType</field>
      </key>
      <value>
        <name>ProfitCenterBS</name>
        <rename>ProfitCenterBS</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>544</xloc>
      <yloc>576</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-ProfitCenterCashReceipt</name>
    <type>StreamLookup</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>frmla-ProfitCenterCashReceipt</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>ProfitCenter_CashReceipt_Key</name>
        <field>FieldType</field>
      </key>
      <value>
        <name>ProfitCenterCashReceiptConst</name>
        <rename>ProfitCenterCashReceiptConst</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>544</xloc>
      <yloc>752</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-ProfitCenterPL</name>
    <type>StreamLookup</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>ti-yy1_bmcs_turn_pcenter</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>CompanyCode</name>
        <field>CCode</field>
      </key>
      <key>
        <name>Location</name>
        <field>Location</field>
      </key>
      <key>
        <name>FileType</name>
        <field>filetype</field>
      </key>
      <value>
        <name>ProfitCenterPL</name>
        <rename>ProfitCenterPL</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1456</xloc>
      <yloc>976</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-ProfitCenterPL-BettingDuty</name>
    <type>StreamLookup</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>ti-yy1_bmcs_turn_pcenter</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>CompanyCode</name>
        <field>ccode</field>
      </key>
      <key>
        <name>Location_Key</name>
        <field>location</field>
      </key>
      <key>
        <name>FileType</name>
        <field>filetype</field>
      </key>
      <value>
        <name>ProfitCenterPL</name>
        <rename>ProfitCenterPL</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1552</xloc>
      <yloc>624</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-ProfitCenterRebate</name>
    <type>StreamLookup</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>frmla-ProfitCenterRebate</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>ProfitCenter_Rebate_Key</name>
        <field>FieldType</field>
      </key>
      <value>
        <name>ProfitCenterRebateConst</name>
        <rename>ProfitCenterRebateConst</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>544</xloc>
      <yloc>656</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-Turnover-CreditGL_DebitGL</name>
    <type>StreamLookup</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>sv-format_creditgl_debitgl</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>CompanyCode</name>
        <field>ccode</field>
      </key>
      <key>
        <name>PaymentMode</name>
        <field>paymentmode</field>
      </key>
      <key>
        <name>Sign</name>
        <field>sign</field>
      </key>
      <key>
        <name>FileType</name>
        <field>filetype</field>
      </key>
      <value>
        <name>creditgl</name>
        <rename>CreditGL</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>debitgl</name>
        <rename>DebitGL</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1312</xloc>
      <yloc>1456</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-BettingDuty-PL</name>
    <type>StreamLookup</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>gb-BettingDuty-PL</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>GuestOrHostIndicator</name>
        <field>GuestOrHostIndicator</field>
      </key>
      <key>
        <name>ActualMeeting</name>
        <field>ActualMeeting</field>
      </key>
      <value>
        <name>BettingDutyPL</name>
        <rename>BettingDutyPL</rename>
        <default />
        <type>Number</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>2528</xloc>
      <yloc>1344</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-headers</name>
    <type>StreamLookup</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>slkp-AccountingDocumentType</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>Header_Key</name>
        <field>Header_Key</field>
      </key>
      <value>
        <name>OriginalReferenceDocumentType</name>
        <rename>OriginalReferenceDocumentType</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>OriginalReferenceDocument</name>
        <rename>OriginalReferenceDocument</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>OriginalReferenceDocumentLogicalSystem</name>
        <rename>OriginalReferenceDocumentLogicalSystem</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>BusinessTransactionType</name>
        <rename>BusinessTransactionType</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>AccountingDocumentType</name>
        <rename>AccountingDocumentType</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>CreatedByUser</name>
        <rename>CreatedByUser</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>CompanyCode</name>
        <rename>CompanyCode</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>FileType</name>
        <rename>FileType</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>CreditCode</name>
        <rename>CreditCode</rename>
        <default>H</default>
        <type>String</type>
      </value>
      <value>
        <name>DebitCode</name>
        <rename>DebitCode</rename>
        <default>S</default>
        <type>String</type>
      </value>
      <value>
        <name>ProfitCenterBS</name>
        <rename>ProfitCenterBS</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>Currency_SGD</name>
        <rename>Currency_SGD</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>AccountAssignmentType</name>
        <rename>AccountAssignmentType</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>Reference1InDocumentHeader</name>
        <rename>Reference1InDocumentHeader</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>DebtorConst</name>
        <rename>DebtorConst</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>ProfitCenterCashReceiptConst</name>
        <rename>ProfitCenterCashReceiptConst</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>ProfitCenterRebateConst</name>
        <rename>ProfitCenterRebateConst</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>ReferenceDocumentItem</name>
        <rename>ReferenceDocumentItem</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>832</xloc>
      <yloc>976</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>slkp-headers_BettingDuty</name>
    <type>StreamLookup</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <from>slkp-AccountingDocumentType</from>
    <input_sorted>N</input_sorted>
    <preserve_memory>Y</preserve_memory>
    <sorted_list>N</sorted_list>
    <integer_pair>N</integer_pair>
    <lookup>
      <key>
        <name>Header_Key</name>
        <field>Header_Key</field>
      </key>
      <value>
        <name>OriginalReferenceDocumentType</name>
        <rename>OriginalReferenceDocumentType</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>OriginalReferenceDocument</name>
        <rename>OriginalReferenceDocument</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>OriginalReferenceDocumentLogicalSystem</name>
        <rename>OriginalReferenceDocumentLogicalSystem</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>BusinessTransactionType</name>
        <rename>BusinessTransactionType</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>AccountingDocumentType</name>
        <rename>AccountingDocumentType</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>CreatedByUser</name>
        <rename>CreatedByUser</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>CompanyCode</name>
        <rename>CompanyCode</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>FileType</name>
        <rename>FileType</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>CreditCode</name>
        <rename>CreditCode</rename>
        <default>H</default>
        <type>String</type>
      </value>
      <value>
        <name>DebitCode</name>
        <rename>DebitCode</rename>
        <default>S</default>
        <type>String</type>
      </value>
      <value>
        <name>Currency_SGD</name>
        <rename>Currency_SGD</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>AccountAssignmentType</name>
        <rename>AccountAssignmentType</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>Reference1InDocumentHeader</name>
        <rename>Reference1InDocumentHeader</rename>
        <default />
        <type>String</type>
      </value>
      <value>
        <name>ProfitCenterBS</name>
        <rename>ProfitCenterBS</rename>
        <default />
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1184</xloc>
      <yloc>624</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>sm-GroupKey-Document-csv</name>
    <type>SortedMerge</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>GroupKey</name>
        <ascending>Y</ascending>
      </field>
      <field>
        <name>Document</name>
        <ascending>Y</ascending>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>592</xloc>
      <yloc>1792</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>sm-GroupKey-Document-csv-xml</name>
    <type>SortedMerge</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>GroupKey</name>
        <ascending>Y</ascending>
      </field>
      <field>
        <name>Document</name>
        <ascending>Y</ascending>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>592</xloc>
      <yloc>2064</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>sr-CM_PM</name>
    <type>SortRows</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <directory>%%java.io.tmpdir%%</directory>
    <prefix>out</prefix>
    <sort_size>1000000</sort_size>
    <free_memory />
    <compress>N</compress>
    <compress_variable />
    <unique_rows>N</unique_rows>
    <fields>
      <field>
        <name>ClubMeeting</name>
        <ascending>Y</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
      <field>
        <name>PaymentMode</name>
        <ascending>N</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1776</xloc>
      <yloc>1184</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>sr-CM_PM_L_TT</name>
    <type>SortRows</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <directory>%%java.io.tmpdir%%</directory>
    <prefix>out</prefix>
    <sort_size>1000000</sort_size>
    <free_memory />
    <compress>N</compress>
    <compress_variable />
    <unique_rows>N</unique_rows>
    <fields>
      <field>
        <name>ClubMeeting</name>
        <ascending>Y</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
      <field>
        <name>PaymentMode</name>
        <ascending>N</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
      <field>
        <name>Location</name>
        <ascending>Y</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
      <field>
        <name>TerminalType</name>
        <ascending>Y</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1760</xloc>
      <yloc>768</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>sr-CM_PM_L_TT 2</name>
    <type>SortRows</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <directory>%%java.io.tmpdir%%</directory>
    <prefix>out</prefix>
    <sort_size>1000000</sort_size>
    <free_memory />
    <compress>N</compress>
    <compress_variable />
    <unique_rows>N</unique_rows>
    <fields>
      <field>
        <name>ClubMeeting</name>
        <ascending>Y</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
      <field>
        <name>PaymentMode</name>
        <ascending>N</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
      <field>
        <name>Location</name>
        <ascending>Y</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
      <field>
        <name>TerminalType</name>
        <ascending>Y</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1744</xloc>
      <yloc>976</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>sr-MD_AT</name>
    <type>SortRows</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <directory>%%java.io.tmpdir%%</directory>
    <prefix>out</prefix>
    <sort_size>1000000</sort_size>
    <free_memory />
    <compress>N</compress>
    <compress_variable />
    <unique_rows>N</unique_rows>
    <fields>
      <field>
        <name>GuestOrHostIndicator</name>
        <ascending>Y</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
      <field>
        <name>ActualMeeting</name>
        <ascending>Y</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>2528</xloc>
      <yloc>1040</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>sr-keys</name>
    <type>SortRows</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <directory>%%java.io.tmpdir%%</directory>
    <prefix>out</prefix>
    <sort_size>1000000</sort_size>
    <free_memory />
    <compress>N</compress>
    <compress_variable />
    <unique_rows>N</unique_rows>
    <fields>
      <field>
        <name>Key1</name>
        <ascending>Y</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
      <field>
        <name>Key2</name>
        <ascending>N</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>272</xloc>
      <yloc>1792</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>sr-keys 2</name>
    <type>SortRows</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <directory>%%java.io.tmpdir%%</directory>
    <prefix>out</prefix>
    <sort_size>1000000</sort_size>
    <free_memory />
    <compress>N</compress>
    <compress_variable />
    <unique_rows>N</unique_rows>
    <fields>
      <field>
        <name>Key1</name>
        <ascending>Y</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
      <field>
        <name>Key2</name>
        <ascending>N</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>272</xloc>
      <yloc>2064</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>sv-Reformat_BettingDuty</name>
    <type>SelectValues</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <select_unspecified>N</select_unspecified>
      <remove>
        <name>BettingDuty</name>
      </remove>
      <remove>
        <name>RawFixtureDate</name>
      </remove>
      <meta>
        <name>BettingDutyPL</name>
        <rename>BettingDutyPL</rename>
        <type>Number</type>
        <length>-2</length>
        <precision>2</precision>
        <conversion_mask>0.00</conversion_mask>
        <date_format_lenient>false</date_format_lenient>
        <date_format_locale />
        <date_format_timezone />
        <lenient_string_to_number>false</lenient_string_to_number>
        <encoding />
        <decimal_symbol />
        <grouping_symbol />
        <currency_symbol />
        <storage_type />
      </meta>
      <meta>
        <name>BettingDutyBS</name>
        <rename>BettingDutyBS</rename>
        <type>Number</type>
        <length>-2</length>
        <precision>2</precision>
        <conversion_mask>0.00</conversion_mask>
        <date_format_lenient>false</date_format_lenient>
        <date_format_locale />
        <date_format_timezone />
        <lenient_string_to_number>false</lenient_string_to_number>
        <encoding />
        <decimal_symbol />
        <grouping_symbol />
        <currency_symbol />
        <storage_type />
      </meta>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>2528</xloc>
      <yloc>2224</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>sv-Reformat_Precision</name>
    <type>SelectValues</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <select_unspecified>N</select_unspecified>
      <meta>
        <name>TurnoverBS</name>
        <rename>TurnoverBS</rename>
        <type>Number</type>
        <length>-2</length>
        <precision>2</precision>
        <conversion_mask>0.00</conversion_mask>
        <date_format_lenient>false</date_format_lenient>
        <date_format_locale />
        <date_format_timezone />
        <lenient_string_to_number>false</lenient_string_to_number>
        <encoding />
        <decimal_symbol />
        <grouping_symbol />
        <currency_symbol />
        <storage_type />
      </meta>
      <meta>
        <name>TurnoverPL</name>
        <rename>TurnoverPL</rename>
        <type>Number</type>
        <length>-2</length>
        <precision>2</precision>
        <conversion_mask>0.00</conversion_mask>
        <date_format_lenient>false</date_format_lenient>
        <date_format_locale />
        <date_format_timezone />
        <lenient_string_to_number>false</lenient_string_to_number>
        <encoding />
        <decimal_symbol />
        <grouping_symbol />
        <currency_symbol />
        <storage_type />
      </meta>
      <meta>
        <name>DividendPayablePL</name>
        <rename>DividendPayablePL</rename>
        <type>Number</type>
        <length>-2</length>
        <precision>2</precision>
        <conversion_mask>0.00</conversion_mask>
        <date_format_lenient>false</date_format_lenient>
        <date_format_locale />
        <date_format_timezone />
        <lenient_string_to_number>false</lenient_string_to_number>
        <encoding />
        <decimal_symbol />
        <grouping_symbol />
        <currency_symbol />
        <storage_type />
      </meta>
      <meta>
        <name>DividendPayableBS</name>
        <rename>DividendPayableBS</rename>
        <type>Number</type>
        <length>-2</length>
        <precision>2</precision>
        <conversion_mask>0.00</conversion_mask>
        <date_format_lenient>false</date_format_lenient>
        <date_format_locale />
        <date_format_timezone />
        <lenient_string_to_number>false</lenient_string_to_number>
        <encoding />
        <decimal_symbol />
        <grouping_symbol />
        <currency_symbol />
        <storage_type />
      </meta>
      <meta>
        <name>GstPL</name>
        <rename>GstPL</rename>
        <type>Number</type>
        <length>-2</length>
        <precision>2</precision>
        <conversion_mask>0.00</conversion_mask>
        <date_format_lenient>false</date_format_lenient>
        <date_format_locale />
        <date_format_timezone />
        <lenient_string_to_number>false</lenient_string_to_number>
        <encoding />
        <decimal_symbol />
        <grouping_symbol />
        <currency_symbol />
        <storage_type />
      </meta>
      <meta>
        <name>GstBS</name>
        <rename>GstBS</rename>
        <type>Number</type>
        <length>-2</length>
        <precision>2</precision>
        <conversion_mask>0.00</conversion_mask>
        <date_format_lenient>false</date_format_lenient>
        <date_format_locale />
        <date_format_timezone />
        <lenient_string_to_number>false</lenient_string_to_number>
        <encoding />
        <decimal_symbol />
        <grouping_symbol />
        <currency_symbol />
        <storage_type />
      </meta>
      <meta>
        <name>RebatePL</name>
        <rename>RebatePL</rename>
        <type>Number</type>
        <length>-2</length>
        <precision>2</precision>
        <conversion_mask>0.00</conversion_mask>
        <date_format_lenient>false</date_format_lenient>
        <date_format_locale />
        <date_format_timezone />
        <lenient_string_to_number>false</lenient_string_to_number>
        <encoding />
        <decimal_symbol />
        <grouping_symbol />
        <currency_symbol />
        <storage_type />
      </meta>
      <meta>
        <name>RebateBS</name>
        <rename>RebateBS</rename>
        <type>Number</type>
        <length>-2</length>
        <precision>2</precision>
        <conversion_mask>0.00</conversion_mask>
        <date_format_lenient>false</date_format_lenient>
        <date_format_locale />
        <date_format_timezone />
        <lenient_string_to_number>false</lenient_string_to_number>
        <encoding />
        <decimal_symbol />
        <grouping_symbol />
        <currency_symbol />
        <storage_type />
      </meta>
      <meta>
        <name>BettingDutyPL</name>
        <rename>BettingDutyPL</rename>
        <type>Number</type>
        <length>-2</length>
        <precision>2</precision>
        <conversion_mask>0.00</conversion_mask>
        <date_format_lenient>false</date_format_lenient>
        <date_format_locale />
        <date_format_timezone />
        <lenient_string_to_number>false</lenient_string_to_number>
        <encoding />
        <decimal_symbol />
        <grouping_symbol />
        <currency_symbol />
        <storage_type />
      </meta>
      <meta>
        <name>BettingDutyBS</name>
        <rename>BettingDutyBS</rename>
        <type>Number</type>
        <length>-2</length>
        <precision>2</precision>
        <conversion_mask>0.00</conversion_mask>
        <date_format_lenient>false</date_format_lenient>
        <date_format_locale />
        <date_format_timezone />
        <lenient_string_to_number>false</lenient_string_to_number>
        <encoding />
        <decimal_symbol />
        <grouping_symbol />
        <currency_symbol />
        <storage_type />
      </meta>
      <meta>
        <name>LosingRebatePL</name>
        <rename>LosingRebatePL</rename>
        <type>Number</type>
        <length>-2</length>
        <precision>2</precision>
        <conversion_mask>0.00</conversion_mask>
        <date_format_lenient>false</date_format_lenient>
        <date_format_locale />
        <date_format_timezone />
        <lenient_string_to_number>false</lenient_string_to_number>
        <encoding />
        <decimal_symbol />
        <grouping_symbol />
        <currency_symbol />
        <storage_type />
      </meta>
      <meta>
        <name>LosingRebateBS</name>
        <rename>LosingRebateBS</rename>
        <type>Number</type>
        <length>-2</length>
        <precision>2</precision>
        <conversion_mask>0.00</conversion_mask>
        <date_format_lenient>false</date_format_lenient>
        <date_format_locale />
        <date_format_timezone />
        <lenient_string_to_number>false</lenient_string_to_number>
        <encoding />
        <decimal_symbol />
        <grouping_symbol />
        <currency_symbol />
        <storage_type />
      </meta>
      <meta>
        <name>CashReceiptPL</name>
        <rename>CashReceiptPL</rename>
        <type>Number</type>
        <length>-2</length>
        <precision>2</precision>
        <conversion_mask>0.00</conversion_mask>
        <date_format_lenient>false</date_format_lenient>
        <date_format_locale />
        <date_format_timezone />
        <lenient_string_to_number>false</lenient_string_to_number>
        <encoding />
        <decimal_symbol />
        <grouping_symbol />
        <currency_symbol />
        <storage_type />
      </meta>
      <meta>
        <name>CashReceiptBS</name>
        <rename>CashReceiptBS</rename>
        <type>Number</type>
        <length>-2</length>
        <precision>2</precision>
        <conversion_mask>0.00</conversion_mask>
        <date_format_lenient>false</date_format_lenient>
        <date_format_locale />
        <date_format_timezone />
        <lenient_string_to_number>false</lenient_string_to_number>
        <encoding />
        <decimal_symbol />
        <grouping_symbol />
        <currency_symbol />
        <storage_type />
      </meta>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>2288</xloc>
      <yloc>1968</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>sv-format_creditgl_debitgl</name>
    <type>SelectValues</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <select_unspecified>N</select_unspecified>
      <meta>
        <name>creditgl</name>
        <rename>creditgl</rename>
        <type>String</type>
        <length>-2</length>
        <precision>-2</precision>
        <conversion_mask>0000000000</conversion_mask>
        <date_format_lenient>false</date_format_lenient>
        <date_format_locale />
        <date_format_timezone />
        <lenient_string_to_number>false</lenient_string_to_number>
        <encoding />
        <decimal_symbol />
        <grouping_symbol />
        <currency_symbol />
        <storage_type />
      </meta>
      <meta>
        <name>debitgl</name>
        <rename>debitgl</rename>
        <type>String</type>
        <length>-2</length>
        <precision>-2</precision>
        <conversion_mask>0000000000</conversion_mask>
        <date_format_lenient>false</date_format_lenient>
        <date_format_locale />
        <date_format_timezone />
        <lenient_string_to_number>false</lenient_string_to_number>
        <encoding />
        <decimal_symbol />
        <grouping_symbol />
        <currency_symbol />
        <storage_type />
      </meta>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1696</xloc>
      <yloc>1968</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>tf-sort_unique_grouping</name>
    <type>SortRows</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <directory>%%java.io.tmpdir%%</directory>
    <prefix>out</prefix>
    <sort_size>1000000</sort_size>
    <free_memory />
    <compress>N</compress>
    <compress_variable />
    <unique_rows>N</unique_rows>
    <fields>
      <field>
        <name>FixtureDate</name>
        <ascending>Y</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
      <field>
        <name>ClubMeeting</name>
        <ascending>Y</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
      <field>
        <name>Location</name>
        <ascending>Y</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
      <field>
        <name>TerminalType</name>
        <ascending>Y</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
      <field>
        <name>PaymentMode</name>
        <ascending>N</ascending>
        <case_sensitive>N</case_sensitive>
        <collator_enabled>N</collator_enabled>
        <collator_strength>0</collator_strength>
        <presorted>N</presorted>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>352</xloc>
      <yloc>976</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>tfo-csv</name>
    <type>TextFileOutput</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <separator />
    <enclosure />
    <enclosure_forced>N</enclosure_forced>
    <enclosure_fix_disabled>N</enclosure_fix_disabled>
    <header>N</header>
    <footer>N</footer>
    <format>DOS</format>
    <compression>None</compression>
    <encoding>UTF-8</encoding>
    <endedLine />
    <fileNameInField>N</fileNameInField>
    <fileNameField>OutputFileName</fileNameField>
    <create_parent_folder>Y</create_parent_folder>
    <file>
      <name>${output.csv_file}</name>
      <servlet_output>N</servlet_output>
      <do_not_open_new_file_init>Y</do_not_open_new_file_init>
      <extention>csv</extention>
      <append>N</append>
      <split>N</split>
      <haspartno>N</haspartno>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <SpecifyFormat>N</SpecifyFormat>
      <date_time_format />
      <add_to_result_filenames>Y</add_to_result_filenames>
      <pad>N</pad>
      <fast_dump>N</fast_dump>
      <splitevery>0</splitevery>
    </file>
    <fields>
      <field>
        <name>Content</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif />
        <trim_type>none</trim_type>
        <length>-1</length>
        <precision>-1</precision>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>32</xloc>
      <yloc>1792</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>tfo-xml</name>
    <type>TextFileOutput</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <separator />
    <enclosure />
    <enclosure_forced>N</enclosure_forced>
    <enclosure_fix_disabled>N</enclosure_fix_disabled>
    <header>N</header>
    <footer>N</footer>
    <format>DOS</format>
    <compression>None</compression>
    <encoding>UTF-8</encoding>
    <endedLine />
    <fileNameInField>N</fileNameInField>
    <fileNameField>OutputFileName</fileNameField>
    <create_parent_folder>Y</create_parent_folder>
    <file>
      <name>${output.xml_file}</name>
      <servlet_output>N</servlet_output>
      <do_not_open_new_file_init>Y</do_not_open_new_file_init>
      <extention>xml</extention>
      <append>N</append>
      <split>N</split>
      <haspartno>N</haspartno>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <SpecifyFormat>N</SpecifyFormat>
      <date_time_format />
      <add_to_result_filenames>Y</add_to_result_filenames>
      <pad>N</pad>
      <fast_dump>N</fast_dump>
      <splitevery>0</splitevery>
    </file>
    <fields>
      <field>
        <name>SoapEnv</name>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <nullif />
        <trim_type>none</trim_type>
        <length>-1</length>
        <precision>-1</precision>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>32</xloc>
      <yloc>2064</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ti-yy1_bmcs_desc</name>
    <type>TableInput</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <connection>SAPFIN</connection>
    <sql>select
  t.clubmeeting as "ClubMeeting",
  t.clubshort as "ClubShort",
  u.clublong as "ClubLong"
from
  (
    select
	  clubmeeting,
	  clubshort,
	  max(effective_date) as effective_date
    from
	  yy1_bmcs_desc
	where
	  effective_date &lt;= to_date('${businessdate}', 'YYYYMMDD')
	group by
	  clubmeeting,
      clubshort
  ) t
  left join yy1_bmcs_desc u 
  on t.clubmeeting = u.clubmeeting
  and t.clubshort = u.clubshort
  and t.effective_date = u.effective_date</sql>
    <limit>0</limit>
    <lookup />
    <execute_each_row>N</execute_each_row>
    <variables_active>Y</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1008</xloc>
      <yloc>848</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ti-yy1_bmcs_turn_betmode</name>
    <type>TableInput</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <connection>SAPFIN</connection>
    <sql>select
  t.filetype,
  t.ccode,
  t.terminaltype,
  u.betmode
from
  (
    select
      filetype,
      ccode,
      terminaltype,
      max(effective_date) as effective_date
    from
      yy1_bmcs_turn_betmode
    where
      effective_date &lt;= to_date('${businessdate}', 'yyyymmdd')
    group by
      filetype,
      ccode,
      terminaltype
  ) t
  left join yy1_bmcs_turn_betmode u 
  on t.filetype = u.filetype
  and t.ccode = u.ccode
  and t.terminaltype = u.terminaltype
</sql>
    <limit>0</limit>
    <lookup />
    <execute_each_row>N</execute_each_row>
    <variables_active>Y</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1264</xloc>
      <yloc>848</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ti-yy1_bmcs_turn_pcenter</name>
    <type>TableInput</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <connection>SAPFIN</connection>
    <sql>select
  t.filetype as "filetype",
  t.ccode as "ccode",
  t.location as "location",
  u.locdesc as "locationdesc",
  u.pcenter as "profitcenterpl"
from
  (
    select
      filetype,
      ccode,
      "location",
      max(effective_date) as effective_date
    from
      yy1_bmcs_turn_pcenter
    where
      effective_date &lt;= to_date('${businessdate}', 'yyyymmdd')
    group by
      filetype,
      ccode,
      "location"
  ) t
  left join yy1_bmcs_turn_pcenter u
  on t.filetype = u.filetype
  and t.ccode = u.ccode
  and t.location = u.location</sql>
    <limit>0</limit>
    <lookup />
    <execute_each_row>N</execute_each_row>
    <variables_active>Y</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1456</xloc>
      <yloc>800</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ti-yy1_fin_bmcs_turn_glacct</name>
    <type>TableInput</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <connection>SAPFIN</connection>
    <sql>select
  t.filetype,
  t.ccode,
  u.clubmeeting,
  u.paymentmode,
  t.sign,
  u.debitgl,
  u.creditgl
from
  (
    select
      filetype,
      ccode,
      sign,
      max(effective_date) as effective_date
    from
      yy1_fin_bmcs_turn_glacct
    where
      effective_date &lt;= to_date('${businessdate}', 'yyyymmdd')
    group by
      filetype,
      ccode,
      sign
  ) t
  left join yy1_fin_bmcs_turn_glacct u
  on t.filetype = u.filetype
  and t.ccode = u.ccode
  and t.sign = u.sign</sql>
    <limit>0</limit>
    <lookup />
    <execute_each_row>N</execute_each_row>
    <variables_active>Y</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1920</xloc>
      <yloc>1968</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ti-yy1_findoctype</name>
    <type>TableInput</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <connection>SAPFIN</connection>
    <sql>select
  t.filetype as "FileType",
  u.doctype as "DocType"
from
  (
    select
      filetype,
      max(effective_date) as effective_date
    from
      yy1_findoctype
    where
      effective_date &lt;= to_date('${businessdate}', 'YYYYMMDD')
    group by
      filetype
  ) t
  left join yy1_findoctype u on t.filetype = u.filetype
  and t.effective_date = u.effective_date</sql>
    <limit>0</limit>
    <lookup />
    <execute_each_row>N</execute_each_row>
    <variables_active>Y</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>80</xloc>
      <yloc>848</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ti-yy1_finfixedcon</name>
    <type>TableInput</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <connection>SAPFIN</connection>
    <sql>select
	t.fieldtype as "FieldType",
	u.fieldval as "FieldVal"
from
	(
		select
		fieldtype,
		max(effective_date) as effective_date
		from
			yy1_finfixedcon
		where
			effective_date &lt;= to_date('${businessdate}', 'YYYYMMDD')
		group by
			fieldtype
	) t
	left join yy1_finfixedcon u on t.fieldtype = u.fieldtype
	and t.effective_date = u.effective_date</sql>
    <limit>0</limit>
    <lookup />
    <execute_each_row>N</execute_each_row>
    <variables_active>Y</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1024</xloc>
      <yloc>304</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>udjc-BetlineRebate-build_csv</name>
    <type>UserDefinedJavaClass</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.pentaho.di.core.row.value.ValueMetaString;

	static final String TAG_IGNORE = "_tag_ignore_";
	static final String DEFAULT_SEPARATOR = ",";
	static final String DEFAULT_ESCAPE_CHARACTER = "\"";
	static final String DEFAULT_END_LINE = "\r\n";

	RowMetaInterface inputRowMeta;
	RowMetaInterface outputRowMeta;

	// Step not support generic
	Map mapColumnIdx = new HashMap();// Map&lt;String, Integer>
	String groupKey = ""; // Current combined key
	Map mapTagCommon = new LinkedHashMap(); // Map&lt;String, String>: common header tag - column name
	Map mapTagDebitItem = new LinkedHashMap(); // Map&lt;String, String>: hedger tag - column name for Balance Sheet account
	Map mapTagCreditItem = new LinkedHashMap(); // Map&lt;String, String>: header tag - column name for P&amp;L account

	String[] groupedColumns;
	StringBuilder sbCsv = new StringBuilder(128);
	StringBuilder sbCsvCredit = new StringBuilder(128);

	private void init() {
		// Initialize input, error and output metadata
		inputRowMeta = getInputRowMeta();
		outputRowMeta = new RowMeta();
		outputRowMeta.addValueMeta(new ValueMetaString("JournalEntry"));
		outputRowMeta.addValueMeta(new ValueMetaString("GroupKey"));

		// define grouped column
		groupedColumns = new String[] { //
				"ClubMeeting", //
				"PaymentMode" //
		};

		// common header tags
		mapTagCommon.put("OriginalReferenceDocumentType", "OriginalReferenceDocumentType");
		mapTagCommon.put("OriginalReferenceDocument", "OriginalReferenceDocument");
		mapTagCommon.put("OriginalReferenceDocumentLogicalSystem", "OriginalReferenceDocumentLogicalSystem");
		mapTagCommon.put("BusinessTransactionType", "BusinessTransactionType");
		mapTagCommon.put("AccountingDocumentType", "AccountingDocumentType");
		mapTagCommon.put("DocumentReferenceID", "DocumentReferenceID");
		mapTagCommon.put("DocumentHeaderText", "DocumentHeaderText");
		mapTagCommon.put("Reference1InDocumentHeader", "Reference1InDocumentHeader");
		mapTagCommon.put("CreatedByUser", "CreatedByUser");
		mapTagCommon.put("CompanyCode", "CompanyCode");
		mapTagCommon.put("DocumentDate", "DocumentDate");
		mapTagCommon.put("PostingDate", "PostingDate");

		// Debit item tags
		mapTagDebitItem.put("Debtor", TAG_IGNORE);
		mapTagDebitItem.put("GLAccount", "DebitGL");
		mapTagDebitItem.put("Amount_Debit", ""); // special tag => AmountInTransactionCurrency, AmountInCompanyCodeCurrency,
		mapTagDebitItem.put("Currency_SGD", "Currency_SGD");
		mapTagDebitItem.put("DebitCreditCode", "DebitCode");
		mapTagDebitItem.put("DocumentItemText", "DocumentItemText");
		mapTagDebitItem.put("AssignmentReference", "AssignmentReference");
		mapTagDebitItem.put("AccountAssignmentType", "AccountAssignmentType");
		mapTagDebitItem.put("ProfitCenter", "ProfitCenterPL");
		mapTagDebitItem.put("YY1_Bet_Mode", "BetMode");
		mapTagDebitItem.put("SoldMaterial", "SoldMaterial");
		mapTagDebitItem.put("ReferenceDocumentItem", TAG_IGNORE);

		// Credit item tags
		mapTagCreditItem.put("Debtor", TAG_IGNORE);
		mapTagCreditItem.put("GLAccount", "CreditGL");
		mapTagCreditItem.put("Amount_Credit", ""); // special tag => AmountInTransactionCurrency, AmountInCompanyCodeCurrency,
		mapTagCreditItem.put("Currency_SGD", "Currency_SGD");
		mapTagCreditItem.put("DebitCreditCode", "CreditCode");
		mapTagCreditItem.put("DocumentItemText", "DocumentItemText");
		mapTagCreditItem.put("AssignmentReference", "AssignmentReference");
		mapTagCreditItem.put("AccountAssignmentType", TAG_IGNORE);
		mapTagCreditItem.put("ProfitCenter", "ProfitCenterBS");
		mapTagCreditItem.put("YY1_Bet_Mode", TAG_IGNORE);
		mapTagCreditItem.put("SoldMaterial", TAG_IGNORE);
		mapTagCreditItem.put("ReferenceDocumentItem", TAG_IGNORE);
	}

	public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException {

		// get incoming row, getRow() potentially blocks waiting for more rows, returns
		// null if no more rows expected
		final Object[] r = getRow();

		// if no more rows are expected, indicate step is finished and processRow()
		// should not be called again
		if (r == null) {
			// the last group
			if (sbCsv.length() > 0) {
				sbCsv.append(sbCsvCredit);
				
				// logBasic("====End group");
				// redundant end line
				int idx = sbCsv.lastIndexOf(DEFAULT_END_LINE);
				if (idx >= 0) {
					sbCsv.delete(idx, idx + DEFAULT_END_LINE.length());
				}
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbCsv.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);
			}
			// done
			setOutputDone();
			return false;
		}

		// the "first" flag is inherited from the base step implementation
		// it is used to guard some processing tasks, like figuring out field indexes
		// in the row structure that only need to be done once
		if (first) {
			first = false;

			init();
		}

		StringBuilder sbKey = new StringBuilder();
		for (int i = 0; i &lt; groupedColumns.length; i++) {
			String columnName = groupedColumns[i];
			int idx = getColumnIndex(inputRowMeta, columnName);
			String value = inputRowMeta.getString(r, idx);
			sbKey.append(value);
		}

		String key = sbKey.toString();
		if (!groupKey.equals(key)) { // new group
			if (sbCsv.length() > 0) {
				sbCsv.append(sbCsvCredit);
				
				// logBasic("====End group");

				// redundant end line
				int idx = sbCsv.lastIndexOf(DEFAULT_END_LINE);
				if (idx >= 0) {
					sbCsv.delete(idx, idx + DEFAULT_END_LINE.length());
				}

				// put the row to the output row stream
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbCsv.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);

				sbCsv = new StringBuilder(128);
			}
			groupKey = key;

			// logBasic("====Begin group: " + groupKey);
			// begin group, has common tags
			// build common tags
			buildCells(r, inputRowMeta, mapTagCommon, sbCsv, false);
		} else {
			// build common tags with empty value
			buildEmptyCells(mapTagCommon, sbCsv);
		}
		// build tag Item for Debit
		buildCells(r, inputRowMeta, mapTagDebitItem, sbCsv, true);

		
		
		sbCsvCredit = new StringBuilder(128);

		if (0.0 != inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("LosingRebateBS"))) {
			// build common tags with empty value
			buildEmptyCells(mapTagCommon, sbCsvCredit);
			// build tag Item for Credit
			buildCells(r, inputRowMeta, mapTagCreditItem, sbCsvCredit, true);
		}

		// log progress if it is time to to so
		if (checkFeedback(getLinesRead())) {
			// logBasic("Linenr " + getLinesRead()); // Some basic logging
		}

		// indicate that processRow() should be called again
		return true;
	}

	private void buildEmptyCells(Map mapTag, StringBuilder sbCsv) {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			sbCsv.append(DEFAULT_SEPARATOR);
		}
	}

	private void buildCells(Object[] r, RowMetaInterface inputRowMeta, Map mapTag, StringBuilder sbCsv,
			boolean autoEndRow) throws KettleValueException {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			String tag = (String) tags[i];
			String columnName = (String) mapTag.get(tag);

			boolean handled = TAG_IGNORE.equals(columnName);
			if (!handled) {
				handled = handleSpecialTag(tag, r, inputRowMeta, sbCsv);
			}
			if (!handled) {
				int idx = getColumnIndex(inputRowMeta, columnName);
				String value = inputRowMeta.getString(r, idx);
				if (value != null) {
					if (stringContainsSpecialCharacters(value)) {
						sbCsv.append(DEFAULT_ESCAPE_CHARACTER).append(value).append(DEFAULT_ESCAPE_CHARACTER);
					} else {
						sbCsv.append(value);
					}
				}
			}
			if (i &lt; tags.length - 1) {
				sbCsv.append(DEFAULT_SEPARATOR);
			}
		}

		if (autoEndRow) {
			sbCsv.append(DEFAULT_END_LINE);
		} else {
			sbCsv.append(DEFAULT_SEPARATOR);
		}
	}

	private boolean handleSpecialTag(String tag, Object[] r, RowMetaInterface inputRowMeta, StringBuilder sbXml)
			throws KettleValueException {
		if ("Amount_Debit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("LosingRebatePL"));
			String amount = formatAmount(amountInTransactionCurrency);

			// AmountInTransactionCurrency
			sbXml.append(amount);
			return true;
		} else if ("Amount_Credit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("LosingRebateBS"));
			String amount = formatAmount(amountInTransactionCurrency);
			
			// AmountInTransactionCurrency
			sbXml.append(amount);
			return true;
		}
		return false;
	}

	private int getColumnIndex(RowMetaInterface inputRowMeta, String columnName) {
		if (mapColumnIdx.containsKey(columnName)) {
			return ((Integer) mapColumnIdx.get(columnName)).intValue();
		}
		int idx = inputRowMeta.indexOfValue(columnName);
		if (idx &lt; 0) {
			logError("====Not found column `" + columnName + "`");
		}
		mapColumnIdx.put(columnName, Integer.valueOf(idx));
		return idx;
	}

	private static boolean stringContainsSpecialCharacters(String value) {
		if (value == null) {
			return false;
		}
		return value.contains(DEFAULT_SEPARATOR) || value.contains(DEFAULT_ESCAPE_CHARACTER)
				|| value.contains(DEFAULT_END_LINE);
	}
	private String formatAmount(Double amount) {
		return formatAmount(amount, "%.2f");
	}

	String formatAmount(Double amount, String format) {
		if(null == amount) {
		return "null";
		}
		return String.format(format, new Object[] {amount});
	}</class_source>
      </definition>
    </definitions>
    <fields>
      <field>
        <field_name>JournalEntryRequest</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
      <field>
        <field_name>GroupKey</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps />
    <target_steps />
    <usage_parameters />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1088</xloc>
      <yloc>2576</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>udjc-BetlineRebate-build_xml</name>
    <type>UserDefinedJavaClass</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.pentaho.di.core.row.value.ValueMetaString;

	static final String TAG_OPEN = "_tag_open_";
	static final String TAG_CLOSE = "_tag_close_";

	RowMetaInterface inputRowMeta;
	RowMetaInterface outputRowMeta;

	// Step not support generic
	Map mapColumnIdx = new HashMap();// Map&lt;String, Integer>
	String groupKey = ""; // Current combined key
	Map mapTagHeader = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name
	Map mapTagDebitItem = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name for Balance Sheet account
	Map mapTagCreditItem = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name for P&amp;L account

	String[] groupedColumns;
	StringBuilder sbXml = new StringBuilder(128);
	StringBuilder sbXmlCredit = new StringBuilder(128);
	
	private void init() {
		// Initialize input, error and output metadata
		inputRowMeta = getInputRowMeta();
		outputRowMeta = new RowMeta();
		outputRowMeta.addValueMeta(new ValueMetaString("JournalEntryRequest"));
		outputRowMeta.addValueMeta(new ValueMetaString("GroupKey"));
		
		// define grouped column
		groupedColumns = new String[] { //
				"ClubMeeting", //
				"PaymentMode" //
		};

		// header tags
		mapTagHeader.put("OriginalReferenceDocumentType", "OriginalReferenceDocumentType");
		mapTagHeader.put("OriginalReferenceDocument", "OriginalReferenceDocument");
		mapTagHeader.put("OriginalReferenceDocumentLogicalSystem", "OriginalReferenceDocumentLogicalSystem");
		mapTagHeader.put("BusinessTransactionType", "BusinessTransactionType");
		mapTagHeader.put("AccountingDocumentType", "AccountingDocumentType");
		mapTagHeader.put("DocumentReferenceID", "DocumentReferenceID");
		mapTagHeader.put("DocumentHeaderText", "DocumentHeaderText");
		mapTagHeader.put("Reference1InDocumentHeader", "Reference1InDocumentHeader");
		mapTagHeader.put("CreatedByUser", "CreatedByUser");
		mapTagHeader.put("CompanyCode", "CompanyCode");
		mapTagHeader.put("DocumentDate", "DocumentDate");
		mapTagHeader.put("PostingDate", "PostingDate");

		// Debit item tags
		mapTagDebitItem = BuildDebitItem();

		// Credit item tags
		mapTagCreditItem = BuildCreditItem();
	}

	private LinkedHashMap BuildDebitItem() {
		LinkedHashMap debitItem = new LinkedHashMap();
		
		debitItem.put(TAG_OPEN + "Item", "");
		debitItem.put("GLAccount", "DebitGL");
		debitItem.put("Amount_Debit", ""); // special tag => AmountInTransactionCurrency_SGD
		debitItem.put("DebitCreditCode", "DebitCode");
		debitItem.put("DocumentItemText", "DocumentItemText");
		debitItem.put("AssignmentReference", "AssignmentReference");
		debitItem.put(TAG_OPEN + "AccountAssignment", "");
		debitItem.put("AccountAssignmentType", "AccountAssignmentType");
		debitItem.put("ProfitCenter", "ProfitCenterPL");
		debitItem.put("YY1_Bet_Mode", "BetMode");
		debitItem.put(TAG_CLOSE + "AccountAssignment", "");
		debitItem.put(TAG_OPEN + "ProfitabilitySupplement", "");
		debitItem.put("SoldMaterial", "SoldMaterial");
		debitItem.put(TAG_CLOSE + "ProfitabilitySupplement", "");
		debitItem.put(TAG_CLOSE + "Item", "");
		
		return debitItem;
	}
	
	private LinkedHashMap BuildCreditItem() {
		LinkedHashMap creditItem = new LinkedHashMap();
		
		creditItem.put(TAG_OPEN + "Item", "");
		creditItem.put("GLAccount", "CreditGL");
		creditItem.put("Amount_Credit", ""); // special tag => AmountInTransactionCurrency_SGD
		creditItem.put("DebitCreditCode", "CreditCode");
		creditItem.put("DocumentItemText", "DocumentItemText");
		creditItem.put("AssignmentReference", "AssignmentReference");
		creditItem.put(TAG_OPEN + "AccountAssignment", "");
		creditItem.put("ProfitCenter", "ProfitCenterBS");
		creditItem.put(TAG_CLOSE + "AccountAssignment", "");
		creditItem.put(TAG_CLOSE + "Item", "");

		return creditItem;
	}
	

	public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException {

		// get incoming row, getRow() potentially blocks waiting for more rows, returns
		// null if no more rows expected
		final Object[] r = getRow();

		// if no more rows are expected, indicate step is finished and processRow()
		// should not be called again
		if (r == null) {
			// the last group
			if (sbXml.length() > 0) {
				sbXml.append(sbXmlCredit);

				// logBasic("====End group");
				sbXml.append("&lt;/JournalEntry>").append("&lt;/JournalEntryCreateRequest>");
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbXml.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);
			}
			setOutputDone();
			return false;
		}

		// the "first" flag is inherited from the base step implementation
		// it is used to guard some processing tasks, like figuring out field indexes
		// in the row structure that only need to be done once
		if (first) {
			first = false;

			init();
		}

		StringBuilder sbKey = new StringBuilder();
		for (int i = 0; i &lt; groupedColumns.length; i++) {
			String tag = groupedColumns[i];
			int idx = inputRowMeta.indexOfValue(tag);
			String value = inputRowMeta.getString(r, idx);
			sbKey.append(value);
		}

		String key = sbKey.toString();
		if (!groupKey.equals(key)) { // new group
			if (sbXml.length() > 0) {
				sbXml.append(sbXmlCredit);
				
				// logBasic("====End group");

				// end tag JournalEntryCreateRequest
				sbXml.append("&lt;/JournalEntry>")//
						.append("&lt;/JournalEntryCreateRequest>");

				// put the row to the output row stream
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbXml.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);

				sbXml = new StringBuilder(128);
			}
			groupKey = key;

			// logBasic("====Begin group: " + sbKey.toString());
			// begin tag JournalEntryCreateRequest
			sbXml.append("&lt;JournalEntryCreateRequest>")//
					.append("&lt;MessageHeader>")//
					.append("&lt;CreationDateTime>&lt;/CreationDateTime>")//
					.append("&lt;/MessageHeader>")//
					.append("&lt;JournalEntry>");

			// build header tags
			buildXml(r, inputRowMeta, mapTagHeader, sbXml);
		}
		
		buildXml(r, inputRowMeta, mapTagDebitItem, sbXml);
		sbXmlCredit = new StringBuilder(128);
		if (0.0 != inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("LosingRebateBS"))) {
			buildXml(r, inputRowMeta, mapTagCreditItem, sbXmlCredit);
		}

		// log progress if it is time to to so
		if (checkFeedback(getLinesRead())) {
			// logBasic("Linenr " + getLinesRead()); // Some basic logging
		}

		// indicate that processRow() should be called again
		return true;
	}
	


	private void buildXml(Object[] r, RowMetaInterface inputRowMeta, Map mapTag, StringBuilder sbXml)
			throws KettleValueException {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			String tag = (String) tags[i];
			String columnName = (String) mapTag.get(tag);

			boolean handled = handleOpenCloseTag(tag, sbXml);
			if (!handled) {
				handled = handleSpecialTag(tag, r, inputRowMeta, sbXml);
			}
			if (handled) {
				continue;
			}

			int idx = getColumnIndex(inputRowMeta, columnName);
			String value = inputRowMeta.getString(r, idx);
			if("YY1_Bet_Mode".equals(tag)){
				sbXml.append("&lt;yy1:").append(tag).append(">").append(value).append("&lt;/yy1:").append(tag).append(">");
			} else {
				sbXml.append("&lt;").append(tag).append(">").append(value).append("&lt;/").append(tag).append(">");
			}
		}
	}

	private boolean handleSpecialTag(String tag, Object[] r, RowMetaInterface inputRowMeta, StringBuilder sbXml)
			throws KettleValueException {
		if ("Amount_Debit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			String currencySgd = inputRowMeta.getString(r, getColumnIndex(inputRowMeta, "Currency_SGD"));

			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("LosingRebatePL"));
			String amount = formatAmount(amountInTransactionCurrency);

			sbXml.append("&lt;AmountInTransactionCurrency currencyCode=\"").append(currencySgd).append("\">")
					.append(amount).append("&lt;/AmountInTransactionCurrency>");
			return true;

		} else if ("Amount_Credit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			String currencySgd = inputRowMeta.getString(r, getColumnIndex(inputRowMeta, "Currency_SGD"));

			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("LosingRebateBS"));
			String amount = formatAmount(amountInTransactionCurrency);
			
			sbXml.append("&lt;AmountInTransactionCurrency currencyCode=\"").append(currencySgd).append("\">")
					.append(amount).append("&lt;/AmountInTransactionCurrency>");
			return true;
		}
		return false;
	}

	private boolean handleOpenCloseTag(String tag, StringBuilder sbXml) {
		if (tag.startsWith(TAG_OPEN)) {
			// logBasic("====Open tag " + tag);
			sbXml.append("&lt;").append(tag.substring(TAG_OPEN.length())).append(">");
			return true;
		} else if (tag.startsWith(TAG_CLOSE)) {
			// logBasic("====Close tag " + tag);
			sbXml.append("&lt;/").append(tag.substring(TAG_CLOSE.length())).append(">");
			return true;
		}
		return false;
	}

	private int getColumnIndex(RowMetaInterface inputRowMeta, String columnName) {
		if (mapColumnIdx.containsKey(columnName)) {
			return ((Integer) mapColumnIdx.get(columnName)).intValue();
		}
		int idx = inputRowMeta.indexOfValue(columnName);
		if (idx &lt; 0) {
			logError("====Not found column `" + columnName + "`");
		}
		mapColumnIdx.put(columnName, Integer.valueOf(idx));
		return idx;
	}
	private String formatAmount(Double amount) {
		return formatAmount(amount, "%.2f");
	}

	String formatAmount(Double amount, String format) {
		if(null == amount) {
		return "null";
		}
		return String.format(format, new Object[] {amount});
	}</class_source>
      </definition>
    </definitions>
    <fields>
      <field>
        <field_name>JournalEntryRequest</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
      <field>
        <field_name>GroupKey</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps />
    <target_steps />
    <usage_parameters />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1088</xloc>
      <yloc>2640</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>udjc-BettingDuty-build_csv</name>
    <type>UserDefinedJavaClass</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.pentaho.di.core.row.value.ValueMetaString;

	static final String TAG_IGNORE = "_tag_ignore_";
	static final String DEFAULT_SEPARATOR = ",";
	static final String DEFAULT_ESCAPE_CHARACTER = "\"";
	static final String DEFAULT_END_LINE = "\r\n";

	RowMetaInterface inputRowMeta;
	RowMetaInterface outputRowMeta;

	// Step not support generic
	Map mapColumnIdx = new HashMap();// Map&lt;String, Integer>
	String groupKey = ""; // Current combined key
	Map mapTagCommon = new LinkedHashMap(); // Map&lt;String, String>: common header tag - column name
	Map mapTagDebitItem = new LinkedHashMap(); // Map&lt;String, String>: hedger tag - column name for Balance Sheet account
	Map mapTagDebitItemLast = new LinkedHashMap(); // Map&lt;String, String>: hedger tag - column name for Balance Sheet account
	Map mapTagCreditItem = new LinkedHashMap(); // Map&lt;String, String>: header tag - column name for P&amp;L account

	String[] groupedColumns;
	StringBuilder sbCsv = new StringBuilder(128);
	StringBuilder sbCsvDebit = new StringBuilder(128);
	StringBuilder sbCsvDebitLast = new StringBuilder(128);
	StringBuilder sbCsvCredit = new StringBuilder(128);

	private void init() {
		// Initialize input, error and output metadata
		inputRowMeta = getInputRowMeta();
		outputRowMeta = new RowMeta();
		outputRowMeta.addValueMeta(new ValueMetaString("JournalEntry"));
		outputRowMeta.addValueMeta(new ValueMetaString("GroupKey"));

		// define grouped column
		groupedColumns = new String[] { //
				"ClubMeeting", //
				"PaymentMode" //
		};

		// common header tags
		mapTagCommon.put("OriginalReferenceDocumentType", "OriginalReferenceDocumentType");
		mapTagCommon.put("OriginalReferenceDocument", "OriginalReferenceDocument");
		mapTagCommon.put("OriginalReferenceDocumentLogicalSystem", "OriginalReferenceDocumentLogicalSystem");
		mapTagCommon.put("BusinessTransactionType", "BusinessTransactionType");
		mapTagCommon.put("AccountingDocumentType", "AccountingDocumentType");
		mapTagCommon.put("DocumentReferenceID", "DocumentReferenceID");
		mapTagCommon.put("DocumentHeaderText", "DocumentHeaderText");
		mapTagCommon.put("Reference1InDocumentHeader", "Reference1InDocumentHeader");
		mapTagCommon.put("CreatedByUser", "CreatedByUser");
		mapTagCommon.put("CompanyCode", "CompanyCode");
		mapTagCommon.put("DocumentDate", "DocumentDate");
		mapTagCommon.put("PostingDate", "PostingDate");

		// Debit item tags
		mapTagDebitItem.put("Debtor", TAG_IGNORE);
		mapTagDebitItem.put("GLAccount", "DebitGL");
		mapTagDebitItem.put("Amount_Debit", ""); // special tag => AmountInTransactionCurrency, AmountInCompanyCodeCurrency,
		mapTagDebitItem.put("Currency_SGD", "Currency_SGD");
		mapTagDebitItem.put("DebitCreditCode", "DebitCodeBettingDuty");
		mapTagDebitItem.put("DocumentItemText", "DocumentItemText");
		mapTagDebitItem.put("AssignmentReference", "AssignmentReference");
		mapTagDebitItem.put("AccountAssignmentType", "AccountAssignmentType");
		mapTagDebitItem.put("ProfitCenter", "ProfitCenterPL");
		mapTagDebitItem.put("YY1_Bet_Mode", "BetMode");
		mapTagDebitItem.put("SoldMaterial", "SoldMaterial");
		mapTagDebitItem.put("ReferenceDocumentItem", TAG_IGNORE);

		// Debit item tags
		mapTagDebitItemLast.put("Debtor", TAG_IGNORE);
		mapTagDebitItemLast.put("GLAccount", "DebitGL");
		mapTagDebitItemLast.put("Amount_Debit_Last", ""); // special tag => AmountInTransactionCurrency, AmountInCompanyCodeCurrency,
		mapTagDebitItemLast.put("Currency_SGD", "Currency_SGD");
		mapTagDebitItemLast.put("DebitCreditCode", "DebitCodeBettingDuty");
		mapTagDebitItemLast.put("DocumentItemText", "DocumentItemText");
		mapTagDebitItemLast.put("AssignmentReference", "AssignmentReference");
		mapTagDebitItemLast.put("AccountAssignmentType", "AccountAssignmentType");
		mapTagDebitItemLast.put("ProfitCenter", "ProfitCenterPL");
		mapTagDebitItemLast.put("YY1_Bet_Mode", "BetMode");
		mapTagDebitItemLast.put("SoldMaterial", "SoldMaterial");
		mapTagDebitItemLast.put("ReferenceDocumentItem", TAG_IGNORE);

		// Credit item tags
		mapTagCreditItem.put("Debtor", TAG_IGNORE);
		mapTagCreditItem.put("GLAccount", "CreditGL");
		mapTagCreditItem.put("Amount_Credit", ""); // special tag => AmountInTransactionCurrency, AmountInCompanyCodeCurrency,
		mapTagCreditItem.put("Currency_SGD", "Currency_SGD");
		mapTagCreditItem.put("DebitCreditCode", "CreditCode");
		mapTagCreditItem.put("DocumentItemText", "DocumentItemText");
		mapTagCreditItem.put("AssignmentReference", "AssignmentReference");
		mapTagCreditItem.put("AccountAssignmentType", TAG_IGNORE);
		mapTagCreditItem.put("ProfitCenter", "ProfitCenterBS");
		mapTagCreditItem.put("YY1_Bet_Mode", TAG_IGNORE);
		mapTagCreditItem.put("SoldMaterial", TAG_IGNORE);
		mapTagCreditItem.put("ReferenceDocumentItem", TAG_IGNORE);
	}

	public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException {

		// get incoming row, getRow() potentially blocks waiting for more rows, returns
		// null if no more rows expected
		final Object[] r = getRow();

		// if no more rows are expected, indicate step is finished and processRow()
		// should not be called again
		if (r == null) {
			// the last group
			if (sbCsv.length() > 0) {
				sbCsv.append(sbCsvDebitLast);

				buildEmptyCells(mapTagCommon, sbCsv);
				sbCsv.append(sbCsvCredit);
				
				// logBasic("====End group");
				// redundant end line
				int idx = sbCsv.lastIndexOf(DEFAULT_END_LINE);
				if (idx >= 0) {
					sbCsv.delete(idx, idx + DEFAULT_END_LINE.length());
				}
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbCsv.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);
			}
			// done
			setOutputDone();
			return false;
		}

		// the "first" flag is inherited from the base step implementation
		// it is used to guard some processing tasks, like figuring out field indexes
		// in the row structure that only need to be done once
		if (first) {
			first = false;

			init();
		}

		StringBuilder sbKey = new StringBuilder();
		for (int i = 0; i &lt; groupedColumns.length; i++) {
			String columnName = groupedColumns[i];
			int idx = getColumnIndex(inputRowMeta, columnName);
			String value = inputRowMeta.getString(r, idx);
			sbKey.append(value);
		}

		String key = sbKey.toString();
		if (!groupKey.equals(key)) { // new group
			if (sbCsv.length() > 0) {
				sbCsv.append(sbCsvDebitLast);
				
				buildEmptyCells(mapTagCommon, sbCsv);
				sbCsv.append(sbCsvCredit);
				
				// logBasic("====End group");

				// redundant end line
				int idx = sbCsv.lastIndexOf(DEFAULT_END_LINE);
				if (idx >= 0) {
					sbCsv.delete(idx, idx + DEFAULT_END_LINE.length());
				}

				// put the row to the output row stream
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbCsv.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);

				sbCsv = new StringBuilder(128);
			}
			groupKey = key;

			// logBasic("====Begin group: " + groupKey);
			// begin group, has common tags
			// build common tags
			buildCells(r, inputRowMeta, mapTagCommon, sbCsv, false);
		} else {
			sbCsv.append(sbCsvDebit);
			// build common tags with empty value
			buildEmptyCells(mapTagCommon, sbCsv);
			
		}
		// build tag Item for Debit
		sbCsvDebit = new StringBuilder(128);
		buildCells(r, inputRowMeta, mapTagDebitItem, sbCsvDebit, true);

		// build tag Item for Debit Last
		sbCsvDebitLast = new StringBuilder(128);
		buildCells(r, inputRowMeta, mapTagDebitItemLast, sbCsvDebitLast, true);

		// build tag Item for Credit
		sbCsvCredit = new StringBuilder(128);
		if (0.0 != inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("BettingDutyBS"))) {
			buildCells(r, inputRowMeta, mapTagCreditItem, sbCsvCredit, true);
		}
		// log progress if it is time to to so
		if (checkFeedback(getLinesRead())) {
			// logBasic("Linenr " + getLinesRead()); // Some basic logging
		}

		// indicate that processRow() should be called again
		return true;
	}

	private void buildEmptyCells(Map mapTag, StringBuilder sbCsv) {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			sbCsv.append(DEFAULT_SEPARATOR);
		}
	}

	private void buildCells(Object[] r, RowMetaInterface inputRowMeta, Map mapTag, StringBuilder sbCsv,
			boolean autoEndRow) throws KettleValueException {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			String tag = (String) tags[i];
			String columnName = (String) mapTag.get(tag);

			boolean handled = TAG_IGNORE.equals(columnName);
			if (!handled) {
				handled = handleSpecialTag(tag, r, inputRowMeta, sbCsv);
			}
			if (!handled) {
				int idx = getColumnIndex(inputRowMeta, columnName);
				String value = inputRowMeta.getString(r, idx);
				if (value != null) {
					if (stringContainsSpecialCharacters(value)) {
						sbCsv.append(DEFAULT_ESCAPE_CHARACTER).append(value).append(DEFAULT_ESCAPE_CHARACTER);
					} else {
						sbCsv.append(value);
					}
				}
			}
			if (i &lt; tags.length - 1) {
				sbCsv.append(DEFAULT_SEPARATOR);
			}
		}

		if (autoEndRow) {
			sbCsv.append(DEFAULT_END_LINE);
		} else {
			sbCsv.append(DEFAULT_SEPARATOR);
		}
	}

	private boolean handleSpecialTag(String tag, Object[] r, RowMetaInterface inputRowMeta, StringBuilder sbXml)
			throws KettleValueException {
		if ("Amount_Debit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("BettingDutyPL"));
			String amount = formatAmount(amountInTransactionCurrency);

			// AmountInTransactionCurrency
			sbXml.append(amount).append(" ");
			return true;
		} else if ("Amount_Debit_Last".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("BettingDutyPLLast"));
			String amount = formatAmount(amountInTransactionCurrency);

			// AmountInTransactionCurrency
			sbXml.append(amount).append(" ");
			return true;
		} else if ("Amount_Credit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("BettingDutyBS"));
			String amount = formatAmount(amountInTransactionCurrency);
			
			// AmountInTransactionCurrency
			sbXml.append(amount).append(" ");
			return true;
		}
		return false;
	}

	private int getColumnIndex(RowMetaInterface inputRowMeta, String columnName) {
		if (mapColumnIdx.containsKey(columnName)) {
			return ((Integer) mapColumnIdx.get(columnName)).intValue();
		}
		int idx = inputRowMeta.indexOfValue(columnName);
		if (idx &lt; 0) {
			logError("====Not found column `" + columnName + "`");
		}
		mapColumnIdx.put(columnName, Integer.valueOf(idx));
		return idx;
	}

	private static boolean stringContainsSpecialCharacters(String value) {
		if (value == null) {
			return false;
		}
		return value.contains(DEFAULT_SEPARATOR) || value.contains(DEFAULT_ESCAPE_CHARACTER)
				|| value.contains(DEFAULT_END_LINE);
	}
	private String formatAmount(Double amount) {
		return formatAmount(amount, "%.2f");
	}

	String formatAmount(Double amount, String format) {
		if(null == amount) {
		return "null";
		}
		return String.format(format, new Object[] {amount});
	}</class_source>
      </definition>
    </definitions>
    <fields>
      <field>
        <field_name>JournalEntryRequest</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
      <field>
        <field_name>GroupKey</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps />
    <target_steps />
    <usage_parameters />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1056</xloc>
      <yloc>2000</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>udjc-BettingDuty-build_csv 2</name>
    <type>UserDefinedJavaClass</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.pentaho.di.core.row.value.ValueMetaString;

	static final String TAG_IGNORE = "_tag_ignore_";
	static final String DEFAULT_SEPARATOR = ",";
	static final String DEFAULT_ESCAPE_CHARACTER = "\"";
	static final String DEFAULT_END_LINE = "\r\n";

	RowMetaInterface inputRowMeta;
	RowMetaInterface outputRowMeta;

	// Step not support generic
	Map mapColumnIdx = new HashMap();// Map&lt;String, Integer>
	String groupKey = ""; // Current combined key
	Map mapTagCommon = new LinkedHashMap(); // Map&lt;String, String>: common header tag - column name
	Map mapTagDebitItem = new LinkedHashMap(); // Map&lt;String, String>: hedger tag - column name for Balance Sheet account
	Map mapTagCreditItem = new LinkedHashMap(); // Map&lt;String, String>: header tag - column name for P&amp;L account

	String[] groupedColumns;
	StringBuilder sbCsv = new StringBuilder(128);

	private void init() {
		// Initialize input, error and output metadata
		inputRowMeta = getInputRowMeta();
		outputRowMeta = new RowMeta();
		outputRowMeta.addValueMeta(new ValueMetaString("JournalEntry"));
		outputRowMeta.addValueMeta(new ValueMetaString("GroupKey"));

		// define grouped column
		groupedColumns = new String[] { //
				"ActualMeeting",
				"EmptyGroup00",
				"GuestOrHostIndicator"
		};

		// common header tags
		mapTagCommon.put("OriginalReferenceDocumentType", "OriginalReferenceDocumentType");
		mapTagCommon.put("OriginalReferenceDocument", "OriginalReferenceDocument");
		mapTagCommon.put("OriginalReferenceDocumentLogicalSystem", "OriginalReferenceDocumentLogicalSystem");
		mapTagCommon.put("BusinessTransactionType", "BusinessTransactionType");
		mapTagCommon.put("AccountingDocumentType", "AccountingDocumentType");
		mapTagCommon.put("DocumentReferenceID", "DocumentReferenceID");
		mapTagCommon.put("DocumentHeaderText", "DocumentHeaderText");
		mapTagCommon.put("Reference1InDocumentHeader", "Reference1InDocumentHeader");
		mapTagCommon.put("CreatedByUser", "CreatedByUser");
		mapTagCommon.put("CompanyCode", "CompanyCode");
		mapTagCommon.put("DocumentDate", "DocumentDate");
		mapTagCommon.put("PostingDate", "PostingDate");

		// Debit item tags
		mapTagDebitItem.put("Debtor", TAG_IGNORE);
		mapTagDebitItem.put("GLAccount", "DebitGL");
		mapTagDebitItem.put("Amount_Debit", ""); // special tag => AmountInTransactionCurrency, AmountInCompanyCodeCurrency,
		mapTagDebitItem.put("Currency_SGD", "Currency_SGD");
		mapTagDebitItem.put("DebitCreditCode", "DebitCode");
		mapTagDebitItem.put("DocumentItemText", "DocumentItemText");
		mapTagDebitItem.put("AssignmentReference", "AssignmentReference");
		mapTagDebitItem.put("AccountAssignmentType", "AccountAssignmentType");
		mapTagDebitItem.put("ProfitCenter", "ProfitCenterPL");
		mapTagDebitItem.put("YY1_Bet_Mode", "BetMode");
		mapTagDebitItem.put("SoldMaterial", "SoldMaterial");
		mapTagDebitItem.put("ReferenceDocumentItem", TAG_IGNORE);

		// Credit item tags
		mapTagCreditItem.put("Debtor", TAG_IGNORE);
		mapTagCreditItem.put("GLAccount", "CreditGL");
		mapTagCreditItem.put("Amount_Credit", ""); // special tag => AmountInTransactionCurrency, AmountInCompanyCodeCurrency,
		mapTagCreditItem.put("Currency_SGD", "Currency_SGD");
		mapTagCreditItem.put("DebitCreditCode", "CreditCode");
		mapTagCreditItem.put("DocumentItemText", "DocumentItemText");
		mapTagCreditItem.put("AssignmentReference", "AssignmentReference");
		mapTagCreditItem.put("AccountAssignmentType", TAG_IGNORE);
		mapTagCreditItem.put("ProfitCenter", "ProfitCenterBS");
		mapTagCreditItem.put("YY1_Bet_Mode", TAG_IGNORE);
		mapTagCreditItem.put("SoldMaterial", TAG_IGNORE);
		mapTagCreditItem.put("ReferenceDocumentItem", TAG_IGNORE);
	}

	public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException {

		// get incoming row, getRow() potentially blocks waiting for more rows, returns
		// null if no more rows expected
		final Object[] r = getRow();

		// if no more rows are expected, indicate step is finished and processRow()
		// should not be called again
		if (r == null) {
			// the last group
			if (sbCsv.length() > 0) {
				// redundant end line
				int idx = sbCsv.lastIndexOf(DEFAULT_END_LINE);
				if (idx >= 0) {
					sbCsv.delete(idx, idx + DEFAULT_END_LINE.length());
				}
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbCsv.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);
			}
			// done
			setOutputDone();
			return false;
		}

		// the "first" flag is inherited from the base step implementation
		// it is used to guard some processing tasks, like figuring out field indexes
		// in the row structure that only need to be done once
		if (first) {
			first = false;

			init();
		}

		StringBuilder sbKey = new StringBuilder();
		for (int i = 0; i &lt; groupedColumns.length; i++) {
			String columnName = groupedColumns[i];
			int idx = 0;
			if(columnName.equals("EmptyGroup00")) {
				sbKey.append("00");
			} else {
				idx = getColumnIndex(inputRowMeta, columnName);
				String value = inputRowMeta.getString(r, idx);
				sbKey.append(value);
			}
		}

		String key = sbKey.toString();
		if (!groupKey.equals(key)) { // new group
			if (sbCsv.length() > 0) {
				// redundant end line
				int idx = sbCsv.lastIndexOf(DEFAULT_END_LINE);
				if (idx >= 0) {
					sbCsv.delete(idx, idx + DEFAULT_END_LINE.length());
				}

				// put the row to the output row stream
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbCsv.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);

				sbCsv = new StringBuilder(128);
			}
			groupKey = key;

			// logBasic("====Begin group: " + groupKey);
			// begin group, has common tags
			// build common tags
			buildCells(r, inputRowMeta, mapTagCommon, sbCsv, false);

			// Build Debit
			buildCells(r, inputRowMeta, mapTagDebitItem, sbCsv, true);

			buildEmptyCells(mapTagCommon, sbCsv);

			// Build Credit
			buildCells(r, inputRowMeta, mapTagCreditItem, sbCsv, true);
		}

		// log progress if it is time to to so
		if (checkFeedback(getLinesRead())) {
			// logBasic("Linenr " + getLinesRead()); // Some basic logging
		}

		// indicate that processRow() should be called again
		return true;
	}

	private void buildEmptyCells(Map mapTag, StringBuilder sbCsv) {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			sbCsv.append(DEFAULT_SEPARATOR);
		}
	}

	private void buildCells(Object[] r, RowMetaInterface inputRowMeta, Map mapTag, StringBuilder sbCsv,
			boolean autoEndRow) throws KettleValueException {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			String tag = (String) tags[i];
			String columnName = (String) mapTag.get(tag);

			boolean handled = TAG_IGNORE.equals(columnName);
			if (!handled) {
				handled = handleSpecialTag(tag, r, inputRowMeta, sbCsv);
			}
			if (!handled) {
				int idx = getColumnIndex(inputRowMeta, columnName);
				String value = inputRowMeta.getString(r, idx);
				if (value != null) {
					if (stringContainsSpecialCharacters(value)) {
						sbCsv.append(DEFAULT_ESCAPE_CHARACTER).append(value).append(DEFAULT_ESCAPE_CHARACTER);
					} else {
						sbCsv.append(value);
					}
				}
			}
			if (i &lt; tags.length - 1) {
				sbCsv.append(DEFAULT_SEPARATOR);
			}
		}

		if (autoEndRow) {
			sbCsv.append(DEFAULT_END_LINE);
		} else {
			sbCsv.append(DEFAULT_SEPARATOR);
		}
	}

	private boolean handleSpecialTag(String tag, Object[] r, RowMetaInterface inputRowMeta, StringBuilder sbXml)
			throws KettleValueException {
		if ("Amount_Debit".equals(tag)) {
			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("BettingDutyPL"));
			String amount = formatAmount(amountInTransactionCurrency);

			// AmountInTransactionCurrency
			sbXml.append(amount).append(" ");
			return true;
		} else if ("Amount_Credit".equals(tag)) {
			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("BettingDutyBS"));
			String amount = formatAmount(amountInTransactionCurrency);
			
			// AmountInTransactionCurrency
			sbXml.append(amount).append(" ");
			return true;
		}
		return false;
	}

	private int getColumnIndex(RowMetaInterface inputRowMeta, String columnName) {
		if (mapColumnIdx.containsKey(columnName)) {
			return ((Integer) mapColumnIdx.get(columnName)).intValue();
		}
		int idx = inputRowMeta.indexOfValue(columnName);
		if (idx &lt; 0) {
			logError("====Not found column `" + columnName + "`");
		}
		mapColumnIdx.put(columnName, Integer.valueOf(idx));
		return idx;
	}

	private static boolean stringContainsSpecialCharacters(String value) {
		if (value == null) {
			return false;
		}
		return value.contains(DEFAULT_SEPARATOR) || value.contains(DEFAULT_ESCAPE_CHARACTER)
				|| value.contains(DEFAULT_END_LINE);
	}
	private String formatAmount(Double amount) {
		return formatAmount(amount, "%.2f");
	}

	String formatAmount(Double amount, String format) {
		if(null == amount) {
		return "null";
		}
		return String.format(format, new Object[] {amount});
	}</class_source>
      </definition>
    </definitions>
    <fields>
      <field>
        <field_name>JournalEntryRequest</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
      <field>
        <field_name>GroupKey</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps />
    <target_steps />
    <usage_parameters />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1088</xloc>
      <yloc>2160</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>udjc-BettingDuty-build_xml</name>
    <type>UserDefinedJavaClass</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.pentaho.di.core.row.value.ValueMetaString;

	static final String TAG_OPEN = "_tag_open_";
	static final String TAG_CLOSE = "_tag_close_";

	RowMetaInterface inputRowMeta;
	RowMetaInterface outputRowMeta;

	// Step not support generic
	Map mapColumnIdx = new HashMap();// Map&lt;String, Integer>
	String groupKey = ""; // Current combined key
	Map mapTagHeader = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name
	Map mapTagDebitItem = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name for P&amp;L account
	Map mapTagLastDebitItem = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name for last P&amp;L account
	Map mapTagCreditItem = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name for Balance Sheet account
	

	String[] groupedColumns;
	StringBuilder sbXml = new StringBuilder(128);
	StringBuilder sbXmlDebit = new StringBuilder(128);
	StringBuilder sbXmlLastDebit = new StringBuilder(128);
	StringBuilder sbXmlCredit = new StringBuilder(128);
	
	private void init() {
		// Initialize input, error and output metadata
		inputRowMeta = getInputRowMeta();
		outputRowMeta = new RowMeta();
		outputRowMeta.addValueMeta(new ValueMetaString("JournalEntryRequest"));
		outputRowMeta.addValueMeta(new ValueMetaString("GroupKey"));
		
		// define grouped column
		groupedColumns = new String[] { //
				"ClubMeeting", //
				"PaymentMode" //
		};

		// header tags
		mapTagHeader.put("OriginalReferenceDocumentType", "OriginalReferenceDocumentType");
		mapTagHeader.put("OriginalReferenceDocument", "OriginalReferenceDocument");
		mapTagHeader.put("OriginalReferenceDocumentLogicalSystem", "OriginalReferenceDocumentLogicalSystem");
		mapTagHeader.put("BusinessTransactionType", "BusinessTransactionType");
		mapTagHeader.put("AccountingDocumentType", "AccountingDocumentType");
		mapTagHeader.put("DocumentReferenceID", "DocumentReferenceID");
		mapTagHeader.put("DocumentHeaderText", "DocumentHeaderText");
		mapTagHeader.put("Reference1InDocumentHeader", "Reference1InDocumentHeader");
		mapTagHeader.put("CreatedByUser", "CreatedByUser");
		mapTagHeader.put("CompanyCode", "CompanyCode");
		mapTagHeader.put("DocumentDate", "DocumentDate");
		mapTagHeader.put("PostingDate", "PostingDate");

		// Debit item tags
		mapTagDebitItem = BuildDebitItem();

		// Credit item tags
		mapTagCreditItem = BuildCreditItem();

		// Last Debit item tags
		mapTagLastDebitItem = BuildLastDebitItem();
	}

	private LinkedHashMap BuildDebitItem() {
		LinkedHashMap debitItem = new LinkedHashMap();
		
		debitItem.put(TAG_OPEN + "Item", "");
		debitItem.put("GLAccount", "DebitGL");
		debitItem.put("Amount_Debit", ""); // special tag => AmountInTransactionCurrency_SGD
		debitItem.put("DebitCreditCode", "DebitCodeBettingDuty");
		debitItem.put("DocumentItemText", "DocumentItemText");
		debitItem.put("AssignmentReference", "AssignmentReference");
		debitItem.put(TAG_OPEN + "AccountAssignment", "");
		debitItem.put("AccountAssignmentType", "AccountAssignmentType");
		debitItem.put("ProfitCenter", "ProfitCenterPL");
		debitItem.put("YY1_Bet_Mode", "BetMode");
		debitItem.put(TAG_CLOSE + "AccountAssignment", "");
		debitItem.put(TAG_OPEN + "ProfitabilitySupplement", "");
		debitItem.put("SoldMaterial", "SoldMaterial");
		debitItem.put(TAG_CLOSE + "ProfitabilitySupplement", "");
		debitItem.put(TAG_CLOSE + "Item", "");
		
		return debitItem;
	}

	private LinkedHashMap BuildLastDebitItem() {
		LinkedHashMap debitItem = new LinkedHashMap();
		
		debitItem.put(TAG_OPEN + "Item", "");
		debitItem.put("GLAccount", "DebitGL");
		debitItem.put("Amount_Debit_Last", ""); // special tag => AmountInTransactionCurrency_SGD
		debitItem.put("DebitCreditCode", "DebitCodeBettingDuty");
		debitItem.put("DocumentItemText", "DocumentItemText");
		debitItem.put("AssignmentReference", "AssignmentReference");
		debitItem.put(TAG_OPEN + "AccountAssignment", "");
		debitItem.put("AccountAssignmentType", "AccountAssignmentType");
		debitItem.put("ProfitCenter", "ProfitCenterPL");
		debitItem.put("YY1_Bet_Mode", "BetMode");
		debitItem.put(TAG_CLOSE + "AccountAssignment", "");
		debitItem.put(TAG_OPEN + "ProfitabilitySupplement", "");
		debitItem.put("SoldMaterial", "SoldMaterial");
		debitItem.put(TAG_CLOSE + "ProfitabilitySupplement", "");
		debitItem.put(TAG_CLOSE + "Item", "");
		
		return debitItem;
	}
	
	private LinkedHashMap BuildCreditItem() {
		LinkedHashMap creditItem = new LinkedHashMap();
		
		creditItem.put(TAG_OPEN + "Item", "");
		creditItem.put("GLAccount", "CreditGL");
		creditItem.put("Amount_Credit", ""); // special tag => AmountInTransactionCurrency_SGD
		creditItem.put("DebitCreditCode", "CreditCode");
		creditItem.put("DocumentItemText", "DocumentItemText");
		creditItem.put("AssignmentReference", "AssignmentReference");
		creditItem.put(TAG_OPEN + "AccountAssignment", "");
		creditItem.put("ProfitCenter", "ProfitCenterBS");
		creditItem.put(TAG_CLOSE + "AccountAssignment", "");
		creditItem.put(TAG_CLOSE + "Item", "");

		return creditItem;
	}
	

	public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException {

		// get incoming row, getRow() potentially blocks waiting for more rows, returns
		// null if no more rows expected
		final Object[] r = getRow();

		// if no more rows are expected, indicate step is finished and processRow()
		// should not be called again
		if (r == null) {
			// the last group
			if (sbXml.length() > 0) {
				sbXml.append(sbXmlLastDebit);
				sbXml.append(sbXmlCredit);

				// logBasic("====End group");
				sbXml.append("&lt;/JournalEntry>").append("&lt;/JournalEntryCreateRequest>");
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbXml.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);
			}
			setOutputDone();
			return false;
		}

		// the "first" flag is inherited from the base step implementation
		// it is used to guard some processing tasks, like figuring out field indexes
		// in the row structure that only need to be done once
		if (first) {
			first = false;

			init();
		}

		StringBuilder sbKey = new StringBuilder();
		for (int i = 0; i &lt; groupedColumns.length; i++) {
			String tag = groupedColumns[i];
			int idx = inputRowMeta.indexOfValue(tag);
			String value = inputRowMeta.getString(r, idx);
			sbKey.append(value);
		}

		String key = sbKey.toString();
		if (!groupKey.equals(key)) { // new group
			if (sbXml.length() > 0) {
				sbXml.append(sbXmlLastDebit);
				sbXml.append(sbXmlCredit);
				
				// logBasic("====End group");

				// end tag JournalEntryCreateRequest
				sbXml.append("&lt;/JournalEntry>")//
						.append("&lt;/JournalEntryCreateRequest>");

				// put the row to the output row stream
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbXml.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);

				sbXml = new StringBuilder(128);
			}
			groupKey = key;

			// logBasic("====Begin group: " + sbKey.toString());
			// begin tag JournalEntryCreateRequest
			sbXml.append("&lt;JournalEntryCreateRequest>")//
					.append("&lt;MessageHeader>")//
					.append("&lt;CreationDateTime>&lt;/CreationDateTime>")//
					.append("&lt;/MessageHeader>")//
					.append("&lt;JournalEntry>");

			// build header tags
			buildXml(r, inputRowMeta, mapTagHeader, sbXml);
		}
		else {
			sbXml.append(sbXmlDebit);
		}
		sbXmlDebit = new StringBuilder(128);
		buildXml(r, inputRowMeta, mapTagDebitItem, sbXmlDebit);

		sbXmlLastDebit = new StringBuilder(128);
		buildXml(r, inputRowMeta, mapTagLastDebitItem, sbXmlLastDebit);

		sbXmlCredit = new StringBuilder(128);
		if (0.0 != inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("BettingDutyBS"))) {
			buildXml(r, inputRowMeta, mapTagCreditItem, sbXmlCredit);
		}

		// log progress if it is time to to so
		if (checkFeedback(getLinesRead())) {
			// logBasic("Linenr " + getLinesRead()); // Some basic logging
		}

		// indicate that processRow() should be called again
		return true;
	}
	


	private void buildXml(Object[] r, RowMetaInterface inputRowMeta, Map mapTag, StringBuilder sbXml)
			throws KettleValueException {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			String tag = (String) tags[i];
			String columnName = (String) mapTag.get(tag);

			boolean handled = handleOpenCloseTag(tag, sbXml);
			if (!handled) {
				handled = handleSpecialTag(tag, r, inputRowMeta, sbXml);
			}
			if (handled) {
				continue;
			}

			int idx = getColumnIndex(inputRowMeta, columnName);
			String value = inputRowMeta.getString(r, idx);
			if("YY1_Bet_Mode".equals(tag)){
				sbXml.append("&lt;yy1:").append(tag).append(">").append(value).append("&lt;/yy1:").append(tag).append(">");
			} else {
				sbXml.append("&lt;").append(tag).append(">").append(value).append("&lt;/").append(tag).append(">");
			}
		}
	}

	private boolean handleSpecialTag(String tag, Object[] r, RowMetaInterface inputRowMeta, StringBuilder sbXml)
			throws KettleValueException {
		if ("Amount_Debit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			String currencySgd = inputRowMeta.getString(r, getColumnIndex(inputRowMeta, "Currency_SGD"));

			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("BettingDutyPL"));
			String amount = formatAmount(amountInTransactionCurrency);

			sbXml.append("&lt;AmountInTransactionCurrency currencyCode=\"").append(currencySgd).append("\">")
					.append(amount).append("&lt;/AmountInTransactionCurrency>");
			return true;

		} else if ("Amount_Debit_Last".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			String currencySgd = inputRowMeta.getString(r, getColumnIndex(inputRowMeta, "Currency_SGD"));

			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("BettingDutyPLLast"));
			String amount = formatAmount(amountInTransactionCurrency);


			sbXml.append("&lt;AmountInTransactionCurrency currencyCode=\"").append(currencySgd).append("\">")
					.append(amount).append("&lt;/AmountInTransactionCurrency>");
			return true;

		}	else if ("Amount_Credit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			String currencySgd = inputRowMeta.getString(r, getColumnIndex(inputRowMeta, "Currency_SGD"));

			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("BettingDutyBS"));
			String amount = formatAmount(amountInTransactionCurrency);
			
			sbXml.append("&lt;AmountInTransactionCurrency currencyCode=\"").append(currencySgd).append("\">")
					.append(amount).append("&lt;/AmountInTransactionCurrency>");
			return true;
		}
		return false;
	}

	private boolean handleOpenCloseTag(String tag, StringBuilder sbXml) {
		if (tag.startsWith(TAG_OPEN)) {
			// logBasic("====Open tag " + tag);
			sbXml.append("&lt;").append(tag.substring(TAG_OPEN.length())).append(">");
			return true;
		} else if (tag.startsWith(TAG_CLOSE)) {
			// logBasic("====Close tag " + tag);
			sbXml.append("&lt;/").append(tag.substring(TAG_CLOSE.length())).append(">");
			return true;
		}
		return false;
	}

	private int getColumnIndex(RowMetaInterface inputRowMeta, String columnName) {
		if (mapColumnIdx.containsKey(columnName)) {
			return ((Integer) mapColumnIdx.get(columnName)).intValue();
		}
		int idx = inputRowMeta.indexOfValue(columnName);
		if (idx &lt; 0) {
			logError("====Not found column `" + columnName + "`");
		}
		mapColumnIdx.put(columnName, Integer.valueOf(idx));
		return idx;
	}
	private String formatAmount(Double amount) {
		return formatAmount(amount, "%.2f");
	}

	String formatAmount(Double amount, String format) {
		if(null == amount) {
		return "null";
		}
		return String.format(format, new Object[] {amount});
	}</class_source>
      </definition>
    </definitions>
    <fields>
      <field>
        <field_name>JournalEntryRequest</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
      <field>
        <field_name>GroupKey</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps />
    <target_steps />
    <usage_parameters />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1056</xloc>
      <yloc>2064</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>udjc-BettingDuty-build_xml 2</name>
    <type>UserDefinedJavaClass</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.pentaho.di.core.row.value.ValueMetaString;

	static final String TAG_OPEN = "_tag_open_";
	static final String TAG_CLOSE = "_tag_close_";

	RowMetaInterface inputRowMeta;
	RowMetaInterface outputRowMeta;

	// Step not support generic
	Map mapColumnIdx = new HashMap();// Map&lt;String, Integer>
	String groupKey = ""; // Current combined key
	Map mapTagHeader = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name
	Map mapTagDebitItem = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name for P&amp;L account
	Map mapTagCreditItem = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name for Balance Sheet account
	
	String[] groupedColumns;
	StringBuilder sbXml = new StringBuilder(128);
	StringBuilder sbXmlDebit = new StringBuilder(128);
	StringBuilder sbXmlCredit = new StringBuilder(128);
	
	private void init() {
		// Initialize input, error and output metadata
		inputRowMeta = getInputRowMeta();
		outputRowMeta = new RowMeta();
		outputRowMeta.addValueMeta(new ValueMetaString("JournalEntryRequest"));
		outputRowMeta.addValueMeta(new ValueMetaString("GroupKey"));
		
		// define grouped column
		groupedColumns = new String[] { //
				"ActualMeeting",
				"EmptyGroup00",
				"GuestOrHostIndicator"
		};

		// header tags
		mapTagHeader.put("OriginalReferenceDocumentType", "OriginalReferenceDocumentType");
		mapTagHeader.put("OriginalReferenceDocument", "OriginalReferenceDocument");
		mapTagHeader.put("OriginalReferenceDocumentLogicalSystem", "OriginalReferenceDocumentLogicalSystem");
		mapTagHeader.put("BusinessTransactionType", "BusinessTransactionType");
		mapTagHeader.put("AccountingDocumentType", "AccountingDocumentType");
		mapTagHeader.put("DocumentReferenceID", "DocumentReferenceID");
		mapTagHeader.put("DocumentHeaderText", "DocumentHeaderText");
		mapTagHeader.put("Reference1InDocumentHeader", "Reference1InDocumentHeader");
		mapTagHeader.put("CreatedByUser", "CreatedByUser");
		mapTagHeader.put("CompanyCode", "CompanyCode");
		mapTagHeader.put("DocumentDate", "DocumentDate");
		mapTagHeader.put("PostingDate", "PostingDate");

		// Debit item tags
		mapTagDebitItem = BuildDebitItem();

		// Credit item tags
		mapTagCreditItem = BuildCreditItem();
	}

	private LinkedHashMap BuildDebitItem() {
		LinkedHashMap debitItem = new LinkedHashMap();
		
		debitItem.put(TAG_OPEN + "Item", "");
		debitItem.put("GLAccount", "DebitGL");
		debitItem.put("Amount_Debit", ""); // special tag => AmountInTransactionCurrency_SGD
		debitItem.put("DebitCreditCode", "DebitCode");
		debitItem.put("DocumentItemText", "DocumentItemText");
		debitItem.put("AssignmentReference", "AssignmentReference");
		debitItem.put(TAG_OPEN + "AccountAssignment", "");
		debitItem.put("AccountAssignmentType", "AccountAssignmentType");
		debitItem.put("ProfitCenter", "ProfitCenterPL");
		debitItem.put("YY1_Bet_Mode", "BetMode");
		debitItem.put(TAG_CLOSE + "AccountAssignment", "");
		debitItem.put(TAG_OPEN + "ProfitabilitySupplement", "");
		debitItem.put("SoldMaterial", "SoldMaterial");
		debitItem.put(TAG_CLOSE + "ProfitabilitySupplement", "");
		debitItem.put(TAG_CLOSE + "Item", "");
		
		return debitItem;
	}

	private LinkedHashMap BuildCreditItem() {
		LinkedHashMap creditItem = new LinkedHashMap();
		
		creditItem.put(TAG_OPEN + "Item", "");
		creditItem.put("GLAccount", "CreditGL");
		creditItem.put("Amount_Credit", ""); // special tag => AmountInTransactionCurrency_SGD
		creditItem.put("DebitCreditCode", "CreditCode");
		creditItem.put("DocumentItemText", "DocumentItemText");
		creditItem.put("AssignmentReference", "AssignmentReference");
		creditItem.put(TAG_OPEN + "AccountAssignment", "");
		creditItem.put("ProfitCenter", "ProfitCenterBS");
		creditItem.put(TAG_CLOSE + "AccountAssignment", "");
		creditItem.put(TAG_CLOSE + "Item", "");

		return creditItem;
	}
	

	public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException {

		// get incoming row, getRow() potentially blocks waiting for more rows, returns
		// null if no more rows expected
		final Object[] r = getRow();

		// if no more rows are expected, indicate step is finished and processRow()
		// should not be called again
		if (r == null) {
			// the last group
			if (sbXml.length() > 0) {
				// logBasic("====End group");
				sbXml.append("&lt;/JournalEntry>").append("&lt;/JournalEntryCreateRequest>");
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbXml.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);
			}
			setOutputDone();
			return false;
		}

		// the "first" flag is inherited from the base step implementation
		// it is used to guard some processing tasks, like figuring out field indexes
		// in the row structure that only need to be done once
		if (first) {
			first = false;

			init();
		}

		StringBuilder sbKey = new StringBuilder();
		for (int i = 0; i &lt; groupedColumns.length; i++) {
			String tag = groupedColumns[i];
			int idx = 0;
			if(tag.equals("EmptyGroup00")) {
				sbKey.append("00");
			} else {
				idx = inputRowMeta.indexOfValue(tag);
				String value = inputRowMeta.getString(r, idx);
				sbKey.append(value);
			}
		}

		String key = sbKey.toString();
		if (!groupKey.equals(key)) { // new group
			if (sbXml.length() > 0) {
				// logBasic("====End group");

				// end tag JournalEntryCreateRequest
				sbXml.append("&lt;/JournalEntry>")//
						.append("&lt;/JournalEntryCreateRequest>");

				// put the row to the output row stream
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbXml.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);

				sbXml = new StringBuilder(128);
			}
			groupKey = key;

			// logBasic("====Begin group: " + sbKey.toString());
			// begin tag JournalEntryCreateRequest
			sbXml.append("&lt;JournalEntryCreateRequest>")//
					.append("&lt;MessageHeader>")//
					.append("&lt;CreationDateTime>&lt;/CreationDateTime>")//
					.append("&lt;/MessageHeader>")//
					.append("&lt;JournalEntry>");

			// build header tags
			buildXml(r, inputRowMeta, mapTagHeader, sbXml);

			// build Debit
			buildXml(r, inputRowMeta, mapTagDebitItem, sbXml);

			// Build Credit
			buildXml(r, inputRowMeta, mapTagCreditItem, sbXml);
		}

		// log progress if it is time to to so
		if (checkFeedback(getLinesRead())) {
			// logBasic("Linenr " + getLinesRead()); // Some basic logging
		}

		// indicate that processRow() should be called again
		return true;
	}

	private void buildXml(Object[] r, RowMetaInterface inputRowMeta, Map mapTag, StringBuilder sbXml)
			throws KettleValueException {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			String tag = (String) tags[i];
			String columnName = (String) mapTag.get(tag);

			boolean handled = handleOpenCloseTag(tag, sbXml);
			if (!handled) {
				handled = handleSpecialTag(tag, r, inputRowMeta, sbXml);
			}
			if (handled) {
				continue;
			}

			int idx = getColumnIndex(inputRowMeta, columnName);
			String value = inputRowMeta.getString(r, idx);
			if("YY1_Bet_Mode".equals(tag)){
				sbXml.append("&lt;yy1:").append(tag).append(">").append(value).append("&lt;/yy1:").append(tag).append(">");
			} else {
				sbXml.append("&lt;").append(tag).append(">").append(value).append("&lt;/").append(tag).append(">");
			}
		}
	}

	private boolean handleSpecialTag(String tag, Object[] r, RowMetaInterface inputRowMeta, StringBuilder sbXml)
			throws KettleValueException {
		if ("Amount_Debit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			String currencySgd = inputRowMeta.getString(r, getColumnIndex(inputRowMeta, "Currency_SGD"));

			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("BettingDutyPL"));
			String amount = formatAmount(amountInTransactionCurrency);

			sbXml.append("&lt;AmountInTransactionCurrency currencyCode=\"").append(currencySgd).append("\">")
					.append(amount).append("&lt;/AmountInTransactionCurrency>");
			return true;

		} else if ("Amount_Credit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			String currencySgd = inputRowMeta.getString(r, getColumnIndex(inputRowMeta, "Currency_SGD"));

			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("BettingDutyBS"));
			String amount = formatAmount(amountInTransactionCurrency);
			
			sbXml.append("&lt;AmountInTransactionCurrency currencyCode=\"").append(currencySgd).append("\">")
					.append(amount).append("&lt;/AmountInTransactionCurrency>");
			return true;
		}
		return false;
	}

	private boolean handleOpenCloseTag(String tag, StringBuilder sbXml) {
		if (tag.startsWith(TAG_OPEN)) {
			// logBasic("====Open tag " + tag);
			sbXml.append("&lt;").append(tag.substring(TAG_OPEN.length())).append(">");
			return true;
		} else if (tag.startsWith(TAG_CLOSE)) {
			// logBasic("====Close tag " + tag);
			sbXml.append("&lt;/").append(tag.substring(TAG_CLOSE.length())).append(">");
			return true;
		}
		return false;
	}

	private int getColumnIndex(RowMetaInterface inputRowMeta, String columnName) {
		if (mapColumnIdx.containsKey(columnName)) {
			return ((Integer) mapColumnIdx.get(columnName)).intValue();
		}
		int idx = inputRowMeta.indexOfValue(columnName);
		if (idx &lt; 0) {
			logError("====Not found column `" + columnName + "`");
		}
		mapColumnIdx.put(columnName, Integer.valueOf(idx));
		return idx;
	}
	private String formatAmount(Double amount) {
		return formatAmount(amount, "%.2f");
	}

	String formatAmount(Double amount, String format) {
		if(null == amount) {
		return "null";
		}
		return String.format(format, new Object[] {amount});
	}</class_source>
      </definition>
    </definitions>
    <fields>
      <field>
        <field_name>JournalEntryRequest</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
      <field>
        <field_name>GroupKey</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps />
    <target_steps />
    <usage_parameters />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1088</xloc>
      <yloc>2224</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>udjc-CashReceipt-build_csv</name>
    <type>UserDefinedJavaClass</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.pentaho.di.core.row.value.ValueMetaString;

	static final String TAG_IGNORE = "_tag_ignore_";
	static final String DEFAULT_SEPARATOR = ",";
	static final String DEFAULT_ESCAPE_CHARACTER = "\"";
	static final String DEFAULT_END_LINE = "\r\n";

	RowMetaInterface inputRowMeta;
	RowMetaInterface outputRowMeta;

	// Step not support generic
	Map mapColumnIdx = new HashMap();// Map&lt;String, Integer>
	String groupKey = ""; // Current combined key
	Map mapTagCommon = new LinkedHashMap(); // Map&lt;String, String>: common header tag - column name
	Map mapTagDebitItem = new LinkedHashMap(); // Map&lt;String, String>: hedger tag - column name for Balance Sheet account
	Map mapTagCreditItem = new LinkedHashMap(); // Map&lt;String, String>: header tag - column name for P&amp;L account

	String[] groupedColumns;
	StringBuilder sbCsv = new StringBuilder(128);
	StringBuilder sbCsvCredit = new StringBuilder(128);

	private void init() {
		// Initialize input, error and output metadata
		inputRowMeta = getInputRowMeta();
		outputRowMeta = new RowMeta();
		outputRowMeta.addValueMeta(new ValueMetaString("JournalEntry"));
		outputRowMeta.addValueMeta(new ValueMetaString("GroupKey"));

		// define grouped column
		groupedColumns = new String[] { //
				"ClubMeeting", //
				"PaymentMode" //
		};

		// common header tags
		mapTagCommon.put("OriginalReferenceDocumentType", "OriginalReferenceDocumentType");
		mapTagCommon.put("OriginalReferenceDocument", "OriginalReferenceDocument");
		mapTagCommon.put("OriginalReferenceDocumentLogicalSystem", "OriginalReferenceDocumentLogicalSystem");
		mapTagCommon.put("BusinessTransactionType", "BusinessTransactionType");
		mapTagCommon.put("AccountingDocumentType", "AccountingDocumentType");
		mapTagCommon.put("DocumentReferenceID", "DocumentReferenceID");
		mapTagCommon.put("DocumentHeaderText", "DocumentHeaderText");
		mapTagCommon.put("Reference1InDocumentHeader", "Reference1InDocumentHeader");
		mapTagCommon.put("CreatedByUser", "CreatedByUser");
		mapTagCommon.put("CompanyCode", "CompanyCode");
		mapTagCommon.put("DocumentDate", "DocumentDate");
		mapTagCommon.put("PostingDate", "PostingDate");

		// Debit item tags
		mapTagDebitItem.put("Debtor", TAG_IGNORE);
		mapTagDebitItem.put("GLAccount", "DebitGL");
		mapTagDebitItem.put("Amount_Debit", ""); // special tag => AmountInTransactionCurrency, AmountInCompanyCodeCurrency,
		mapTagDebitItem.put("Currency_SGD", "Currency_SGD");
		mapTagDebitItem.put("DebitCreditCode", "DebitCode");
		mapTagDebitItem.put("DocumentItemText", "CustomDocumentItemText");
		mapTagDebitItem.put("AssignmentReference", "AssignmentReference");
		mapTagDebitItem.put("AccountAssignmentType", TAG_IGNORE);
		mapTagDebitItem.put("ProfitCenter", "ProfitCenterCashReceiptConst");
		mapTagDebitItem.put("YY1_Bet_Mode", "BetMode");
		mapTagDebitItem.put("SoldMaterial", "SoldMaterial");
		mapTagDebitItem.put("ReferenceDocumentItem", TAG_IGNORE);
		// Credit item tags
		mapTagCreditItem.put("Debtor", "DebtorConst");
		mapTagCreditItem.put("GLAccount", TAG_IGNORE);
		mapTagCreditItem.put("Amount_Credit", ""); // special tag => AmountInTransactionCurrency, AmountInCompanyCodeCurrency,
		mapTagCreditItem.put("Currency_SGD", "Currency_SGD");
		mapTagCreditItem.put("DebitCreditCode", "CreditCode");
		mapTagCreditItem.put("DocumentItemText", "CustomDocumentItemText");
		mapTagCreditItem.put("AssignmentReference", "AssignmentReference");
		mapTagCreditItem.put("AccountAssignmentType", "AccountAssignmentType");
		mapTagCreditItem.put("ProfitCenter", TAG_IGNORE);
		mapTagCreditItem.put("YY1_Bet_Mode", "BetMode");
		mapTagCreditItem.put("SoldMaterial", "SoldMaterial");
		mapTagCreditItem.put("ReferenceDocumentItem", "ReferenceDocumentItem");

	}

	public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException {

		// get incoming row, getRow() potentially blocks waiting for more rows, returns
		// null if no more rows expected
		final Object[] r = getRow();

		// if no more rows are expected, indicate step is finished and processRow()
		// should not be called again
		if (r == null) {
			// the last group
			if (sbCsv.length() > 0) {
				// logBasic("====End group");
				// redundant end line
				int idx = sbCsv.lastIndexOf(DEFAULT_END_LINE);
				if (idx >= 0) {
					sbCsv.delete(idx, idx + DEFAULT_END_LINE.length());
				}
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbCsv.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);
			}
			// done
			setOutputDone();
			return false;
		}

		// the "first" flag is inherited from the base step implementation
		// it is used to guard some processing tasks, like figuring out field indexes
		// in the row structure that only need to be done once
		if (first) {
			first = false;

			init();
		}

		StringBuilder sbKey = new StringBuilder();
		for (int i = 0; i &lt; groupedColumns.length; i++) {
			String columnName = groupedColumns[i];
			int idx = getColumnIndex(inputRowMeta, columnName);
			String value = inputRowMeta.getString(r, idx);
			sbKey.append(value);
		}

		String key = sbKey.toString();
		if (!groupKey.equals(key)) { // new group

			if (sbCsv.length() > 0) {
				// logBasic("====End group");

				// redundant end line
				int idx = sbCsv.lastIndexOf(DEFAULT_END_LINE);
				if (idx >= 0) {
					sbCsv.delete(idx, idx + DEFAULT_END_LINE.length());
				}

				// put the row to the output row stream
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbCsv.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);

				sbCsv = new StringBuilder(128);
			}
			groupKey = key;
			// logBasic("====Begin group: " + groupKey);
			// begin group, has common tags
			// build common tags
			buildCells(r, inputRowMeta, mapTagCommon, sbCsv, false);

			// build tag Item for Debit
			if (0.0 != inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("CashReceiptBS"))) {
				buildCells(r, inputRowMeta, mapTagDebitItem, sbCsv, true);
			}

		
			// build common tags with empty value
			buildEmptyCells(mapTagCommon, sbCsv);
			// build tag Item for Credit
			buildCells(r, inputRowMeta, mapTagCreditItem, sbCsv, true);
		}

		// log progress if it is time to to so
		if (checkFeedback(getLinesRead())) {
			// logBasic("Linenr " + getLinesRead()); // Some basic logging
		}

		// indicate that processRow() should be called again
		return true;
	}

	private void buildEmptyCells(Map mapTag, StringBuilder sbCsv) {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			sbCsv.append(DEFAULT_SEPARATOR);
		}
	}

	private void buildCells(Object[] r, RowMetaInterface inputRowMeta, Map mapTag, StringBuilder sbCsv,
			boolean autoEndRow) throws KettleValueException {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			String tag = (String) tags[i];
			String columnName = (String) mapTag.get(tag);

			boolean handled = TAG_IGNORE.equals(columnName);
			if (!handled) {
				handled = handleSpecialTag(tag, r, inputRowMeta, sbCsv);
			}
			if (!handled) {
				int idx = getColumnIndex(inputRowMeta, columnName);
				String value = inputRowMeta.getString(r, idx);
				if (value != null) {
					if (stringContainsSpecialCharacters(value)) {
						sbCsv.append(DEFAULT_ESCAPE_CHARACTER).append(value).append(DEFAULT_ESCAPE_CHARACTER);
					} else {
						sbCsv.append(value);
					}
				}
			}
			if (i &lt; tags.length - 1) {
				sbCsv.append(DEFAULT_SEPARATOR);
			}
		}

		if (autoEndRow) {
			sbCsv.append(DEFAULT_END_LINE);
		} else {
			sbCsv.append(DEFAULT_SEPARATOR);
		}
	}

	private boolean handleSpecialTag(String tag, Object[] r, RowMetaInterface inputRowMeta, StringBuilder sbXml)
			throws KettleValueException {
		if ("Amount_Debit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("CashReceiptBS"));
			String amount = formatAmount(amountInTransactionCurrency);

			// AmountInTransactionCurrency
			sbXml.append(amount);
			return true;
		} else if ("Amount_Credit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("CashReceiptPL"));
			String amount = formatAmount(amountInTransactionCurrency);
			
			// AmountInTransactionCurrency
			sbXml.append(amount);
			return true;
		}
		return false;
	}

	private int getColumnIndex(RowMetaInterface inputRowMeta, String columnName) {
		if (mapColumnIdx.containsKey(columnName)) {
			return ((Integer) mapColumnIdx.get(columnName)).intValue();
		}
		int idx = inputRowMeta.indexOfValue(columnName);
		if (idx &lt; 0) {
			logError("====Not found column `" + columnName + "`");
		}
		mapColumnIdx.put(columnName, Integer.valueOf(idx));
		return idx;
	}

	private static boolean stringContainsSpecialCharacters(String value) {
		if (value == null) {
			return false;
		}
		return value.contains(DEFAULT_SEPARATOR) || value.contains(DEFAULT_ESCAPE_CHARACTER)
				|| value.contains(DEFAULT_END_LINE);
	}

	private String formatAmount(Double amount) {
		return formatAmount(amount, "%.2f");
	}

	String formatAmount(Double amount, String format) {
		if(null == amount) {
		return "null";
		}
		return String.format(format, new Object[] {amount});
	}</class_source>
      </definition>
    </definitions>
    <fields>
      <field>
        <field_name>JournalEntryRequest</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
      <field>
        <field_name>GroupKey</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps />
    <target_steps />
    <usage_parameters />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1072</xloc>
      <yloc>2768</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>udjc-CashReceipt-build_xml</name>
    <type>UserDefinedJavaClass</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.pentaho.di.core.row.value.ValueMetaString;

	static final String TAG_OPEN = "_tag_open_";
	static final String TAG_CLOSE = "_tag_close_";

	RowMetaInterface inputRowMeta;
	RowMetaInterface outputRowMeta;

	// Step not support generic
	Map mapColumnIdx = new HashMap();// Map&lt;String, Integer>
	String groupKey = ""; // Current the combined key
	Map mapTagHeader = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name
	Map mapTagDebitItem = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name for Balance Sheet account
	Map mapTagCreditItem = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name for P&amp;L account

	String[] groupedColumns;
	StringBuilder sbXml = new StringBuilder(128);
	StringBuilder sbXmlCredit = new StringBuilder(128);
	StringBuilder sbXmlDebit = new StringBuilder(128);
	
	private void init() {
		// Initialize input, error and output metadata
		inputRowMeta = getInputRowMeta();
		outputRowMeta = new RowMeta();
		outputRowMeta.addValueMeta(new ValueMetaString("JournalEntryRequest"));
		outputRowMeta.addValueMeta(new ValueMetaString("GroupKey"));

		
		// define grouped column
		groupedColumns = new String[] { //
				"ClubMeeting", //
				"PaymentMode" //
		};

		// header tags
		mapTagHeader.put("OriginalReferenceDocumentType", "OriginalReferenceDocumentType");
		mapTagHeader.put("OriginalReferenceDocument", "OriginalReferenceDocument");
		mapTagHeader.put("OriginalReferenceDocumentLogicalSystem", "OriginalReferenceDocumentLogicalSystem");
		mapTagHeader.put("BusinessTransactionType", "BusinessTransactionType");
		mapTagHeader.put("AccountingDocumentType", "AccountingDocumentType");
		mapTagHeader.put("DocumentReferenceID", "DocumentReferenceID");
		mapTagHeader.put("DocumentHeaderText", "DocumentHeaderText");
		mapTagHeader.put("Reference1InDocumentHeader", "Reference1InDocumentHeader");
		mapTagHeader.put("CreatedByUser", "CreatedByUser");
		mapTagHeader.put("CompanyCode", "CompanyCode");
		mapTagHeader.put("DocumentDate", "DocumentDate");
		mapTagHeader.put("PostingDate", "PostingDate");

		// Debit item tags
		mapTagDebitItem = BuildDebitItem();

		// Credit item tags
		mapTagCreditItem = BuildCreditItem();
	}

	private LinkedHashMap BuildDebitItem() {
		LinkedHashMap debitItem = new LinkedHashMap();
		
		debitItem.put(TAG_OPEN + "Item", "");
		debitItem.put("GLAccount", "DebitGL");
		debitItem.put("Amount_Debit", ""); // special tag => AmountInTransactionCurrency_SGD
		debitItem.put("DebitCreditCode", "DebitCode");
		debitItem.put("DocumentItemText", "CustomDocumentItemText");
		debitItem.put("AssignmentReference", "AssignmentReference");
		debitItem.put(TAG_OPEN + "AccountAssignment", "");
		debitItem.put("ProfitCenter", "ProfitCenterCashReceiptConst");
		debitItem.put("YY1_Bet_Mode", "BetMode");
		debitItem.put(TAG_CLOSE + "AccountAssignment", "");
		debitItem.put(TAG_OPEN + "ProfitabilitySupplement", "");
		debitItem.put("SoldMaterial", "SoldMaterial");
		debitItem.put(TAG_CLOSE + "ProfitabilitySupplement", "");
		debitItem.put(TAG_CLOSE + "Item", "");
		
		return debitItem;
	}
	
	private LinkedHashMap BuildCreditItem() {
		LinkedHashMap creditItem = new LinkedHashMap();
		
		creditItem.put(TAG_OPEN + "DebtorItem", "");
		creditItem.put("ReferenceDocumentItem", "ReferenceDocumentItem");
		creditItem.put("Debtor", "DebtorConst");
		creditItem.put("Amount_Credit", ""); // special tag => AmountInTransactionCurrency_SGD
		creditItem.put("DebitCreditCode", "CreditCode");
		creditItem.put("DocumentItemText", "CustomDocumentItemText");
		creditItem.put("AssignmentReference", "AssignmentReference");
		creditItem.put(TAG_OPEN + "AccountAssignment", "");
		creditItem.put("AccountAssignmentType", "AccountAssignmentType");
		creditItem.put("YY1_Bet_Mode", "BetMode");
		creditItem.put(TAG_CLOSE + "AccountAssignment", "");
		creditItem.put(TAG_OPEN + "ProfitabilitySupplement", "");
		creditItem.put("SoldMaterial", "SoldMaterial");
		creditItem.put(TAG_CLOSE + "ProfitabilitySupplement", "");
		creditItem.put(TAG_CLOSE + "DebtorItem", "");
		
		return creditItem;
	}
	

	public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException {

		// get incoming row, getRow() potentially blocks waiting for more rows, returns
		// null if no more rows expected
		final Object[] r = getRow();

		// if no more rows are expected, indicate step is finished and processRow()
		// should not be called again
		if (r == null) {

			// the last group
			if (sbXml.length() > 0) {
				// logBasic("====End group");
				sbXml.append("&lt;/JournalEntry>").append("&lt;/JournalEntryCreateRequest>");

				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbXml.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);
			}
			setOutputDone();
			return false;
		}

		// the "first" flag is inherited from the base step implementation
		// it is used to guard some processing tasks, like figuring out field indexes
		// in the row structure that only need to be done once
		if (first) {
			first = false;

			init();
		}

		StringBuilder sbKey = new StringBuilder();
		for (int i = 0; i &lt; groupedColumns.length; i++) {
			String tag = groupedColumns[i];
			int idx = inputRowMeta.indexOfValue(tag);
			String value = inputRowMeta.getString(r, idx);
			sbKey.append(value);
		}

		String key = sbKey.toString();
		if (!groupKey.equals(key)) { // new group
			
			if (sbXml.length() > 0) {
				
				// logBasic("====End group");

				// end tag JournalEntryCreateRequest
				sbXml.append("&lt;/JournalEntry>")//
						.append("&lt;/JournalEntryCreateRequest>");

				// put the row to the output row stream
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbXml.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);

				sbXml = new StringBuilder(128);
			}
			groupKey = key;
			// logBasic("====Begin group: " + sbKey.toString());
			// begin tag JournalEntryCreateRequest
			sbXml.append("&lt;JournalEntryCreateRequest>")//
					.append("&lt;MessageHeader>")//
					.append("&lt;CreationDateTime>&lt;/CreationDateTime>")//
					.append("&lt;/MessageHeader>")//
					.append("&lt;JournalEntry>");

			// build header tags
			buildXml(r, inputRowMeta, mapTagHeader, sbXml);

			// build debit item
			if (0.0 != inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("CashReceiptBS"))) {
				buildXml(r, inputRowMeta, mapTagDebitItem, sbXml);
			}

			// build credit item
			buildXml(r, inputRowMeta, mapTagCreditItem, sbXml);
		}

		// log progress if it is time to to so
		if (checkFeedback(getLinesRead())) {
			// logBasic("Linenr " + getLinesRead()); // Some basic logging
		}

		// indicate that processRow() should be called again
		return true;
	}
	

	private void buildXml(Object[] r, RowMetaInterface inputRowMeta, Map mapTag, StringBuilder sbXml)
			throws KettleValueException {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			String tag = (String) tags[i];
			String columnName = (String) mapTag.get(tag);

			boolean handled = handleOpenCloseTag(tag, sbXml);
			if (!handled) {
				handled = handleSpecialTag(tag, r, inputRowMeta, sbXml);
			}
			if (handled) {
				continue;
			}

			int idx = getColumnIndex(inputRowMeta, columnName);
			String value = inputRowMeta.getString(r, idx);
			if("YY1_Bet_Mode".equals(tag)){
				sbXml.append("&lt;yy1:").append(tag).append(">").append(value).append("&lt;/yy1:").append(tag).append(">");
			} else {
				sbXml.append("&lt;").append(tag).append(">").append(value).append("&lt;/").append(tag).append(">");
			}
		}
	}

	private boolean handleSpecialTag(String tag, Object[] r, RowMetaInterface inputRowMeta, StringBuilder sbXml)
			throws KettleValueException {
		if ("Amount_Debit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			String currencySgd = inputRowMeta.getString(r, getColumnIndex(inputRowMeta, "Currency_SGD"));

			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("CashReceiptBS"));
			String amount = formatAmount(amountInTransactionCurrency);

			sbXml.append("&lt;AmountInTransactionCurrency currencyCode=\"").append(currencySgd).append("\">")
					.append(amount).append("&lt;/AmountInTransactionCurrency>");
			return true;

		} else if ("Amount_Credit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			String currencySgd = inputRowMeta.getString(r, getColumnIndex(inputRowMeta, "Currency_SGD"));

			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("CashReceiptPL"));
			String amount = formatAmount(amountInTransactionCurrency);
			
			sbXml.append("&lt;AmountInTransactionCurrency currencyCode=\"").append(currencySgd).append("\">")
					.append(amount).append("&lt;/AmountInTransactionCurrency>");
			return true;
		}
		return false;
	}

	private boolean handleOpenCloseTag(String tag, StringBuilder sbXml) {
		if (tag.startsWith(TAG_OPEN)) {
			// logBasic("====Open tag " + tag);
			sbXml.append("&lt;").append(tag.substring(TAG_OPEN.length())).append(">");
			return true;
		} else if (tag.startsWith(TAG_CLOSE)) {
			// logBasic("====Close tag " + tag);
			sbXml.append("&lt;/").append(tag.substring(TAG_CLOSE.length())).append(">");
			return true;
		}
		return false;
	}

	private int getColumnIndex(RowMetaInterface inputRowMeta, String columnName) {
		if (mapColumnIdx.containsKey(columnName)) {
			return ((Integer) mapColumnIdx.get(columnName)).intValue();
		}
		int idx = inputRowMeta.indexOfValue(columnName);
		if (idx &lt; 0) {
			logError("====Not found column `" + columnName + "`");
		}
		mapColumnIdx.put(columnName, Integer.valueOf(idx));
		return idx;
	}

	private String formatAmount(Double amount) {
		return formatAmount(amount, "%.2f");
	}

	String formatAmount(Double amount, String format) {
		if(null == amount) {
		return "null";
		}
		return String.format(format, new Object[] {amount});
	}</class_source>
      </definition>
    </definitions>
    <fields>
      <field>
        <field_name>JournalEntryRequest</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
      <field>
        <field_name>GroupKey</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps />
    <target_steps />
    <usage_parameters />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1072</xloc>
      <yloc>2864</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>udjc-DividendPayable-build_csv</name>
    <type>UserDefinedJavaClass</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.pentaho.di.core.row.value.ValueMetaString;

	static final String TAG_IGNORE = "_tag_ignore_";
	static final String DEFAULT_SEPARATOR = ",";
	static final String DEFAULT_ESCAPE_CHARACTER = "\"";
	static final String DEFAULT_END_LINE = "\r\n";

	RowMetaInterface inputRowMeta;
	RowMetaInterface outputRowMeta;

	// Step not support generic
	Map mapColumnIdx = new HashMap();// Map&lt;String, Integer>
	String groupKey = ""; // Current combined key
	Map mapTagCommon = new LinkedHashMap(); // Map&lt;String, String>: common header tag - column name
	Map mapTagDebitItem = new LinkedHashMap(); // Map&lt;String, String>: hedger tag - column name for Balance Sheet account
	Map mapTagCreditItem = new LinkedHashMap(); // Map&lt;String, String>: header tag - column name for P&amp;L account

	String[] groupedColumns;
	StringBuilder sbCsv = new StringBuilder(128);
	StringBuilder sbCsvCredit = new StringBuilder(128);

	private void init() {
		// Initialize input, error and output metadata
		inputRowMeta = getInputRowMeta();
		outputRowMeta = new RowMeta();
		outputRowMeta.addValueMeta(new ValueMetaString("JournalEntry"));
		outputRowMeta.addValueMeta(new ValueMetaString("GroupKey"));

		// define grouped column
		groupedColumns = new String[] { //
				"ClubMeeting", //
				"PaymentMode" //
		};

		// common header tags
		mapTagCommon.put("OriginalReferenceDocumentType", "OriginalReferenceDocumentType");
		mapTagCommon.put("OriginalReferenceDocument", "OriginalReferenceDocument");
		mapTagCommon.put("OriginalReferenceDocumentLogicalSystem", "OriginalReferenceDocumentLogicalSystem");
		mapTagCommon.put("BusinessTransactionType", "BusinessTransactionType");
		mapTagCommon.put("AccountingDocumentType", "AccountingDocumentType");
		mapTagCommon.put("DocumentReferenceID", "DocumentReferenceID");
		mapTagCommon.put("DocumentHeaderText", "DocumentHeaderText");
		mapTagCommon.put("Reference1InDocumentHeader", "Reference1InDocumentHeader");
		mapTagCommon.put("CreatedByUser", "CreatedByUser");
		mapTagCommon.put("CompanyCode", "CompanyCode");
		mapTagCommon.put("DocumentDate", "DocumentDate");
		mapTagCommon.put("PostingDate", "PostingDate");

		// Debit item tags
		mapTagDebitItem.put("Debtor", TAG_IGNORE);
		mapTagDebitItem.put("GLAccount", "DebitGL");
		mapTagDebitItem.put("Amount_Debit", ""); // special tag => AmountInTransactionCurrency, AmountInCompanyCodeCurrency,
		mapTagDebitItem.put("Currency_SGD", "Currency_SGD");
		mapTagDebitItem.put("DebitCreditCode", "DebitCode");
		mapTagDebitItem.put("DocumentItemText", "DocumentItemText");
		mapTagDebitItem.put("AssignmentReference", "AssignmentReference");
		mapTagDebitItem.put("AccountAssignmentType", "AccountAssignmentType");
		mapTagDebitItem.put("ProfitCenter", "ProfitCenterPL");
		mapTagDebitItem.put("YY1_Bet_Mode", "BetMode");
		mapTagDebitItem.put("SoldMaterial", "SoldMaterial");
		mapTagDebitItem.put("ReferenceDocumentItem", TAG_IGNORE);

		// Credit item tags
		mapTagCreditItem.put("Debtor", TAG_IGNORE);
		mapTagCreditItem.put("GLAccount", "CreditGL");
		mapTagCreditItem.put("Amount_Credit", ""); // special tag => AmountInTransactionCurrency, AmountInCompanyCodeCurrency,
		mapTagCreditItem.put("Currency_SGD", "Currency_SGD");
		mapTagCreditItem.put("DebitCreditCode", "CreditCode");
		mapTagCreditItem.put("DocumentItemText", "DocumentItemText");
		mapTagCreditItem.put("AssignmentReference", "AssignmentReference");
		mapTagCreditItem.put("AccountAssignmentType", TAG_IGNORE);
		mapTagCreditItem.put("ProfitCenter", "ProfitCenterBS");
		mapTagCreditItem.put("YY1_Bet_Mode", TAG_IGNORE);
		mapTagCreditItem.put("SoldMaterial", TAG_IGNORE);
		mapTagCreditItem.put("ReferenceDocumentItem", TAG_IGNORE);
	}

	public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException {

		// get incoming row, getRow() potentially blocks waiting for more rows, returns
		// null if no more rows expected
		final Object[] r = getRow();

		// if no more rows are expected, indicate step is finished and processRow()
		// should not be called again
		if (r == null) {
			// the last group
			if (sbCsv.length() > 0) {
				sbCsv.append(sbCsvCredit);
				
				// logBasic("====End group");
				// redundant end line
				int idx = sbCsv.lastIndexOf(DEFAULT_END_LINE);
				if (idx >= 0) {
					sbCsv.delete(idx, idx + DEFAULT_END_LINE.length());
				}
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbCsv.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);
			}
			// done
			setOutputDone();
			return false;
		}

		// the "first" flag is inherited from the base step implementation
		// it is used to guard some processing tasks, like figuring out field indexes
		// in the row structure that only need to be done once
		if (first) {
			first = false;

			init();
		}

		StringBuilder sbKey = new StringBuilder();
		for (int i = 0; i &lt; groupedColumns.length; i++) {
			String columnName = groupedColumns[i];
			int idx = getColumnIndex(inputRowMeta, columnName);
			String value = inputRowMeta.getString(r, idx);
			sbKey.append(value);
		}

		String key = sbKey.toString();
		if (!groupKey.equals(key)) { // new group

			if (sbCsv.length() > 0) {
				sbCsv.append(sbCsvCredit);
				
				// logBasic("====End group");

				// redundant end line
				int idx = sbCsv.lastIndexOf(DEFAULT_END_LINE);
				if (idx >= 0) {
					sbCsv.delete(idx, idx + DEFAULT_END_LINE.length());
				}

				// put the row to the output row stream
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbCsv.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);

				sbCsv = new StringBuilder(128);
			}
			groupKey = key;
			// logBasic("====Begin group: " + groupKey);
			// begin group, has common tags
			// build common tags
			buildCells(r, inputRowMeta, mapTagCommon, sbCsv, false);
		} else {
			// build common tags with empty value
			buildEmptyCells(mapTagCommon, sbCsv);
		}
		// build tag Item for Debit
		buildCells(r, inputRowMeta, mapTagDebitItem, sbCsv, true);

		
		
		sbCsvCredit = new StringBuilder(128);
		if (0.0 != inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("DividendPayableBS"))) {
			// build common tags with empty value
			buildEmptyCells(mapTagCommon, sbCsvCredit);
			// build tag Item for Credit
			buildCells(r, inputRowMeta, mapTagCreditItem, sbCsvCredit, true);
		}
		// log progress if it is time to to so
		if (checkFeedback(getLinesRead())) {
			// logBasic("Linenr " + getLinesRead()); // Some basic logging
		}

		// indicate that processRow() should be called again
		return true;
	}

	private void buildEmptyCells(Map mapTag, StringBuilder sbCsv) {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			sbCsv.append(DEFAULT_SEPARATOR);
		}
	}

	private void buildCells(Object[] r, RowMetaInterface inputRowMeta, Map mapTag, StringBuilder sbCsv,
			boolean autoEndRow) throws KettleValueException {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			String tag = (String) tags[i];
			String columnName = (String) mapTag.get(tag);

			boolean handled = TAG_IGNORE.equals(columnName);
			if (!handled) {
				handled = handleSpecialTag(tag, r, inputRowMeta, sbCsv);
			}
			if (!handled) {
				int idx = getColumnIndex(inputRowMeta, columnName);
				String value = inputRowMeta.getString(r, idx);
				if (value != null) {
					if (stringContainsSpecialCharacters(value)) {
						sbCsv.append(DEFAULT_ESCAPE_CHARACTER).append(value).append(DEFAULT_ESCAPE_CHARACTER);
					} else {
						sbCsv.append(value);
					}
				}
			}
			if (i &lt; tags.length - 1) {
				sbCsv.append(DEFAULT_SEPARATOR);
			}
		}

		if (autoEndRow) {
			sbCsv.append(DEFAULT_END_LINE);
		} else {
			sbCsv.append(DEFAULT_SEPARATOR);
		}
	}

	private boolean handleSpecialTag(String tag, Object[] r, RowMetaInterface inputRowMeta, StringBuilder sbXml)
			throws KettleValueException {
		if ("Amount_Debit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("DividendPayablePL"));
			String amount = formatAmount(amountInTransactionCurrency);

			// AmountInTransactionCurrency
			sbXml.append(amount);
			return true;
		} else if ("Amount_Credit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("DividendPayableBS"));
			String amount = formatAmount(amountInTransactionCurrency);
			
			// AmountInTransactionCurrency
			sbXml.append(amount);
			return true;
		}
		return false;
	}

	private int getColumnIndex(RowMetaInterface inputRowMeta, String columnName) {
		if (mapColumnIdx.containsKey(columnName)) {
			return ((Integer) mapColumnIdx.get(columnName)).intValue();
		}
		int idx = inputRowMeta.indexOfValue(columnName);
		if (idx &lt; 0) {
			logError("====Not found column `" + columnName + "`");
		}
		mapColumnIdx.put(columnName, Integer.valueOf(idx));
		return idx;
	}

	private static boolean stringContainsSpecialCharacters(String value) {
		if (value == null) {
			return false;
		}
		return value.contains(DEFAULT_SEPARATOR) || value.contains(DEFAULT_ESCAPE_CHARACTER)
				|| value.contains(DEFAULT_END_LINE);
	}
	private String formatAmount(Double amount) {
		return formatAmount(amount, "%.2f");
	}

	String formatAmount(Double amount, String format) {
		if(null == amount) {
		return "null";
		}
		return String.format(format, new Object[] {amount});
	}</class_source>
      </definition>
    </definitions>
    <fields>
      <field>
        <field_name>JournalEntryRequest</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
      <field>
        <field_name>GroupKey</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps />
    <target_steps />
    <usage_parameters />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1056</xloc>
      <yloc>1568</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>udjc-DividendPayable-build_xml</name>
    <type>UserDefinedJavaClass</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.pentaho.di.core.row.value.ValueMetaString;

	static final String TAG_OPEN = "_tag_open_";
	static final String TAG_CLOSE = "_tag_close_";

	RowMetaInterface inputRowMeta;
	RowMetaInterface outputRowMeta;

	// Step not support generic
	Map mapColumnIdx = new HashMap();// Map&lt;String, Integer>
	String groupKey = ""; // Current combined key
	Map mapTagHeader = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name
	Map mapTagDebitItem = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name for Balance Sheet account
	Map mapTagCreditItem = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name for P&amp;L account

	String[] groupedColumns;
	StringBuilder sbXml = new StringBuilder(128);
	StringBuilder sbXmlCredit = new StringBuilder(128);
	
	private void init() {
		// Initialize input, error and output metadata
		inputRowMeta = getInputRowMeta();
		outputRowMeta = new RowMeta();
		outputRowMeta.addValueMeta(new ValueMetaString("JournalEntryRequest"));
		outputRowMeta.addValueMeta(new ValueMetaString("GroupKey"));
		
		// define grouped column
		groupedColumns = new String[] { //
				"ClubMeeting", //
				"PaymentMode" //
		};

		// header tags
		mapTagHeader.put("OriginalReferenceDocumentType", "OriginalReferenceDocumentType");
		mapTagHeader.put("OriginalReferenceDocument", "OriginalReferenceDocument");
		mapTagHeader.put("OriginalReferenceDocumentLogicalSystem", "OriginalReferenceDocumentLogicalSystem");
		mapTagHeader.put("BusinessTransactionType", "BusinessTransactionType");
		mapTagHeader.put("AccountingDocumentType", "AccountingDocumentType");
		mapTagHeader.put("DocumentReferenceID", "DocumentReferenceID");
		mapTagHeader.put("DocumentHeaderText", "DocumentHeaderText");
		mapTagHeader.put("Reference1InDocumentHeader", "Reference1InDocumentHeader");
		mapTagHeader.put("CreatedByUser", "CreatedByUser");
		mapTagHeader.put("CompanyCode", "CompanyCode");
		mapTagHeader.put("DocumentDate", "DocumentDate");
		mapTagHeader.put("PostingDate", "PostingDate");

		// Debit item tags
		mapTagDebitItem = BuildDebitItem();

		// Credit item tags
		mapTagCreditItem = BuildCreditItem();
	}

	private LinkedHashMap BuildDebitItem() {
		LinkedHashMap debitItem = new LinkedHashMap();
		
		debitItem.put(TAG_OPEN + "Item", "");
		debitItem.put("GLAccount", "DebitGL");
		debitItem.put("Amount_Debit", ""); // special tag => AmountInTransactionCurrency_SGD
		debitItem.put("DebitCreditCode", "DebitCode");
		debitItem.put("DocumentItemText", "DocumentItemText");
		debitItem.put("AssignmentReference", "AssignmentReference");
		debitItem.put(TAG_OPEN + "AccountAssignment", "");
		debitItem.put("AccountAssignmentType", "AccountAssignmentType");
		debitItem.put("ProfitCenter", "ProfitCenterPL");
		debitItem.put("YY1_Bet_Mode", "BetMode");
		debitItem.put(TAG_CLOSE + "AccountAssignment", "");
		debitItem.put(TAG_OPEN + "ProfitabilitySupplement", "");
		debitItem.put("SoldMaterial", "SoldMaterial");
		debitItem.put(TAG_CLOSE + "ProfitabilitySupplement", "");
		debitItem.put(TAG_CLOSE + "Item", "");
		
		return debitItem;
	}
	
	private LinkedHashMap BuildCreditItem() {
		LinkedHashMap creditItem = new LinkedHashMap();
		
		creditItem.put(TAG_OPEN + "Item", "");
		creditItem.put("GLAccount", "CreditGL");
		creditItem.put("Amount_Credit", ""); // special tag => AmountInTransactionCurrency_SGD
		creditItem.put("DebitCreditCode", "CreditCode");
		creditItem.put("DocumentItemText", "DocumentItemText");
		creditItem.put("AssignmentReference", "AssignmentReference");
		creditItem.put(TAG_OPEN + "AccountAssignment", "");
		creditItem.put("ProfitCenter", "ProfitCenterBS");
		creditItem.put(TAG_CLOSE + "AccountAssignment", "");
		creditItem.put(TAG_CLOSE + "Item", "");

		return creditItem;
	}
	

	public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException {

		// get incoming row, getRow() potentially blocks waiting for more rows, returns
		// null if no more rows expected
		final Object[] r = getRow();

		// if no more rows are expected, indicate step is finished and processRow()
		// should not be called again
		if (r == null) {
			// the last group
			if (sbXml.length() > 0) {
				sbXml.append(sbXmlCredit);

				// logBasic("====End group");
				sbXml.append("&lt;/JournalEntry>").append("&lt;/JournalEntryCreateRequest>");
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbXml.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);
			}
			setOutputDone();
			return false;
		}

		// the "first" flag is inherited from the base step implementation
		// it is used to guard some processing tasks, like figuring out field indexes
		// in the row structure that only need to be done once
		if (first) {
			first = false;

			init();
		}

		StringBuilder sbKey = new StringBuilder();
		for (int i = 0; i &lt; groupedColumns.length; i++) {
			String tag = groupedColumns[i];
			int idx = inputRowMeta.indexOfValue(tag);
			String value = inputRowMeta.getString(r, idx);
			sbKey.append(value);
		}

		String key = sbKey.toString();
		if (!groupKey.equals(key)) { // new group
			if (sbXml.length() > 0) {
				sbXml.append(sbXmlCredit);
				
				// logBasic("====End group");

				// end tag JournalEntryCreateRequest
				sbXml.append("&lt;/JournalEntry>")//
						.append("&lt;/JournalEntryCreateRequest>");

				// put the row to the output row stream
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbXml.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);

				sbXml = new StringBuilder(128);
			}
			groupKey = key;
			// logBasic("====Begin group: " + sbKey.toString());
			// begin tag JournalEntryCreateRequest
			sbXml.append("&lt;JournalEntryCreateRequest>")//
					.append("&lt;MessageHeader>")//
					.append("&lt;CreationDateTime>&lt;/CreationDateTime>")//
					.append("&lt;/MessageHeader>")//
					.append("&lt;JournalEntry>");

			// build header tags
			buildXml(r, inputRowMeta, mapTagHeader, sbXml);
		}
		
		buildXml(r, inputRowMeta, mapTagDebitItem, sbXml);

		sbXmlCredit = new StringBuilder(128);
		if (0.0 != inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("DividendPayableBS"))) {
			buildXml(r, inputRowMeta, mapTagCreditItem, sbXmlCredit);
		}
		// log progress if it is time to to so
		if (checkFeedback(getLinesRead())) {
			// logBasic("Linenr " + getLinesRead()); // Some basic logging
		}

		// indicate that processRow() should be called again
		return true;
	}
	


	private void buildXml(Object[] r, RowMetaInterface inputRowMeta, Map mapTag, StringBuilder sbXml)
			throws KettleValueException {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			String tag = (String) tags[i];
			String columnName = (String) mapTag.get(tag);

			boolean handled = handleOpenCloseTag(tag, sbXml);
			if (!handled) {
				handled = handleSpecialTag(tag, r, inputRowMeta, sbXml);
			}
			if (handled) {
				continue;
			}

			int idx = getColumnIndex(inputRowMeta, columnName);
			String value = inputRowMeta.getString(r, idx);
			if("YY1_Bet_Mode".equals(tag)){
				sbXml.append("&lt;yy1:").append(tag).append(">").append(value).append("&lt;/yy1:").append(tag).append(">");
			} else {
				sbXml.append("&lt;").append(tag).append(">").append(value).append("&lt;/").append(tag).append(">");
			}
		}
	}

	private boolean handleSpecialTag(String tag, Object[] r, RowMetaInterface inputRowMeta, StringBuilder sbXml)
			throws KettleValueException {
		if ("Amount_Debit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			String currencySgd = inputRowMeta.getString(r, getColumnIndex(inputRowMeta, "Currency_SGD"));

			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("DividendPayablePL"));
			String amount = formatAmount(amountInTransactionCurrency);

			sbXml.append("&lt;AmountInTransactionCurrency currencyCode=\"").append(currencySgd).append("\">")
					.append(amount).append("&lt;/AmountInTransactionCurrency>");
			return true;

		} else if ("Amount_Credit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			String currencySgd = inputRowMeta.getString(r, getColumnIndex(inputRowMeta, "Currency_SGD"));

			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("DividendPayableBS"));
			String amount = formatAmount(amountInTransactionCurrency);
			
			sbXml.append("&lt;AmountInTransactionCurrency currencyCode=\"").append(currencySgd).append("\">")
					.append(amount).append("&lt;/AmountInTransactionCurrency>");
			return true;
		}
		return false;
	}

	private boolean handleOpenCloseTag(String tag, StringBuilder sbXml) {
		if (tag.startsWith(TAG_OPEN)) {
			// logBasic("====Open tag " + tag);
			sbXml.append("&lt;").append(tag.substring(TAG_OPEN.length())).append(">");
			return true;
		} else if (tag.startsWith(TAG_CLOSE)) {
			// logBasic("====Close tag " + tag);
			sbXml.append("&lt;/").append(tag.substring(TAG_CLOSE.length())).append(">");
			return true;
		}
		return false;
	}

	private int getColumnIndex(RowMetaInterface inputRowMeta, String columnName) {
		if (mapColumnIdx.containsKey(columnName)) {
			return ((Integer) mapColumnIdx.get(columnName)).intValue();
		}
		int idx = inputRowMeta.indexOfValue(columnName);
		if (idx &lt; 0) {
			logError("====Not found column `" + columnName + "`");
		}
		mapColumnIdx.put(columnName, Integer.valueOf(idx));
		return idx;
	}
	private String formatAmount(Double amount) {
		return formatAmount(amount, "%.2f");
	}

	String formatAmount(Double amount, String format) {
		if(null == amount) {
		return "null";
		}
		return String.format(format, new Object[] {amount});
	}</class_source>
      </definition>
    </definitions>
    <fields>
      <field>
        <field_name>JournalEntryRequest</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
      <field>
        <field_name>GroupKey</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps />
    <target_steps />
    <usage_parameters />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1056</xloc>
      <yloc>1632</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>udjc-Gst-build_csv</name>
    <type>UserDefinedJavaClass</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.pentaho.di.core.row.value.ValueMetaString;

	static final String TAG_IGNORE = "_tag_ignore_";
	static final String DEFAULT_SEPARATOR = ",";
	static final String DEFAULT_ESCAPE_CHARACTER = "\"";
	static final String DEFAULT_END_LINE = "\r\n";

	RowMetaInterface inputRowMeta;
	RowMetaInterface outputRowMeta;

	// Step not support generic
	Map mapColumnIdx = new HashMap();// Map&lt;String, Integer>
	String groupKey = ""; // Current combined key
	Map mapTagCommon = new LinkedHashMap(); // Map&lt;String, String>: common header tag - column name
	Map mapTagDebitItem = new LinkedHashMap(); // Map&lt;String, String>: hedger tag - column name for Balance Sheet account
	Map mapTagCreditItem = new LinkedHashMap(); // Map&lt;String, String>: header tag - column name for P&amp;L account

	String[] groupedColumns;
	StringBuilder sbCsv = new StringBuilder(128);
	StringBuilder sbCsvCredit = new StringBuilder(128);

	private void init() {
		// Initialize input, error and output metadata
		inputRowMeta = getInputRowMeta();
		outputRowMeta = new RowMeta();
		outputRowMeta.addValueMeta(new ValueMetaString("JournalEntry"));
		outputRowMeta.addValueMeta(new ValueMetaString("GroupKey"));

		// define grouped column
		groupedColumns = new String[] { //
				"ClubMeeting", //
				"PaymentMode" //
		};

		// common header tags
		mapTagCommon.put("OriginalReferenceDocumentType", "OriginalReferenceDocumentType");
		mapTagCommon.put("OriginalReferenceDocument", "OriginalReferenceDocument");
		mapTagCommon.put("OriginalReferenceDocumentLogicalSystem", "OriginalReferenceDocumentLogicalSystem");
		mapTagCommon.put("BusinessTransactionType", "BusinessTransactionType");
		mapTagCommon.put("AccountingDocumentType", "AccountingDocumentType");
		mapTagCommon.put("DocumentReferenceID", "DocumentReferenceID");
		mapTagCommon.put("DocumentHeaderText", "DocumentHeaderText");
		mapTagCommon.put("Reference1InDocumentHeader", "Reference1InDocumentHeader");
		mapTagCommon.put("CreatedByUser", "CreatedByUser");
		mapTagCommon.put("CompanyCode", "CompanyCode");
		mapTagCommon.put("DocumentDate", "DocumentDate");
		mapTagCommon.put("PostingDate", "PostingDate");

		// Debit item tags
		mapTagDebitItem.put("Debtor", TAG_IGNORE);
		mapTagDebitItem.put("GLAccount", "DebitGL");
		mapTagDebitItem.put("Amount_Debit", ""); // special tag => AmountInTransactionCurrency, AmountInCompanyCodeCurrency,
		mapTagDebitItem.put("Currency_SGD", "Currency_SGD");
		mapTagDebitItem.put("DebitCreditCode", "DebitCode");
		mapTagDebitItem.put("DocumentItemText", "DocumentItemText");
		mapTagDebitItem.put("AssignmentReference", "AssignmentReference");
		mapTagDebitItem.put("AccountAssignmentType", "AccountAssignmentType");
		mapTagDebitItem.put("ProfitCenter", "ProfitCenterPL");
		mapTagDebitItem.put("YY1_Bet_Mode", "BetMode");
		mapTagDebitItem.put("SoldMaterial", "SoldMaterial");
		mapTagDebitItem.put("ReferenceDocumentItem", TAG_IGNORE);

		// Credit item tags
		mapTagCreditItem.put("Debtor", TAG_IGNORE);
		mapTagCreditItem.put("GLAccount", "CreditGL");
		mapTagCreditItem.put("Amount_Credit", ""); // special tag => AmountInTransactionCurrency, AmountInCompanyCodeCurrency,
		mapTagCreditItem.put("Currency_SGD", "Currency_SGD");
		mapTagCreditItem.put("DebitCreditCode", "CreditCode");
		mapTagCreditItem.put("DocumentItemText", "DocumentItemText");
		mapTagCreditItem.put("AssignmentReference", "AssignmentReference");
		mapTagCreditItem.put("AccountAssignmentType", TAG_IGNORE);
		mapTagCreditItem.put("ProfitCenter", "ProfitCenterBS");
		mapTagCreditItem.put("YY1_Bet_Mode", TAG_IGNORE);
		mapTagCreditItem.put("SoldMaterial", TAG_IGNORE);
		mapTagCreditItem.put("ReferenceDocumentItem", TAG_IGNORE);
	}

	public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException {

		// get incoming row, getRow() potentially blocks waiting for more rows, returns
		// null if no more rows expected
		final Object[] r = getRow();

		// if no more rows are expected, indicate step is finished and processRow()
		// should not be called again
		if (r == null) {
			// the last group
			if (sbCsv.length() > 0) {
				sbCsv.append(sbCsvCredit);
				
				// logBasic("====End group");
				// redundant end line
				int idx = sbCsv.lastIndexOf(DEFAULT_END_LINE);
				if (idx >= 0) {
					sbCsv.delete(idx, idx + DEFAULT_END_LINE.length());
				}
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbCsv.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);
			}
			// done
			setOutputDone();
			return false;
		}

		// the "first" flag is inherited from the base step implementation
		// it is used to guard some processing tasks, like figuring out field indexes
		// in the row structure that only need to be done once
		if (first) {
			first = false;

			init();
		}

		StringBuilder sbKey = new StringBuilder();
		for (int i = 0; i &lt; groupedColumns.length; i++) {
			String columnName = groupedColumns[i];
			int idx = getColumnIndex(inputRowMeta, columnName);
			String value = inputRowMeta.getString(r, idx);
			sbKey.append(value);
		}

		String key = sbKey.toString();
		if (!groupKey.equals(key)) { // new group
			if (sbCsv.length() > 0) {
				sbCsv.append(sbCsvCredit);
				
				// logBasic("====End group");

				// redundant end line
				int idx = sbCsv.lastIndexOf(DEFAULT_END_LINE);
				if (idx >= 0) {
					sbCsv.delete(idx, idx + DEFAULT_END_LINE.length());
				}

				// put the row to the output row stream
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbCsv.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);

				sbCsv = new StringBuilder(128);
			}
			groupKey = key;

			// logBasic("====Begin group: " + groupKey);
			// begin group, has common tags
			// build common tags
			buildCells(r, inputRowMeta, mapTagCommon, sbCsv, false);
		} else {
			// build common tags with empty value
			buildEmptyCells(mapTagCommon, sbCsv);
		}
		// build tag Item for Debit
		buildCells(r, inputRowMeta, mapTagDebitItem, sbCsv, true);

		
		
		sbCsvCredit = new StringBuilder(128);
		if (0.0 != inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("GstBS"))) {
			// build common tags with empty value
			buildEmptyCells(mapTagCommon, sbCsvCredit);
			// build tag Item for Credit
			buildCells(r, inputRowMeta, mapTagCreditItem, sbCsvCredit, true);
		}

		// log progress if it is time to to so
		if (checkFeedback(getLinesRead())) {
			// logBasic("Linenr " + getLinesRead()); // Some basic logging
		}

		// indicate that processRow() should be called again
		return true;
	}

	private void buildEmptyCells(Map mapTag, StringBuilder sbCsv) {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			sbCsv.append(DEFAULT_SEPARATOR);
		}
	}

	private void buildCells(Object[] r, RowMetaInterface inputRowMeta, Map mapTag, StringBuilder sbCsv,
			boolean autoEndRow) throws KettleValueException {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			String tag = (String) tags[i];
			String columnName = (String) mapTag.get(tag);

			boolean handled = TAG_IGNORE.equals(columnName);
			if (!handled) {
				handled = handleSpecialTag(tag, r, inputRowMeta, sbCsv);
			}
			if (!handled) {
				int idx = getColumnIndex(inputRowMeta, columnName);
				String value = inputRowMeta.getString(r, idx);
				if (value != null) {
					if (stringContainsSpecialCharacters(value)) {
						sbCsv.append(DEFAULT_ESCAPE_CHARACTER).append(value).append(DEFAULT_ESCAPE_CHARACTER);
					} else {
						sbCsv.append(value);
					}
				}
			}
			if (i &lt; tags.length - 1) {
				sbCsv.append(DEFAULT_SEPARATOR);
			}
		}

		if (autoEndRow) {
			sbCsv.append(DEFAULT_END_LINE);
		} else {
			sbCsv.append(DEFAULT_SEPARATOR);
		}
	}

	private boolean handleSpecialTag(String tag, Object[] r, RowMetaInterface inputRowMeta, StringBuilder sbXml)
			throws KettleValueException {
		if ("Amount_Debit".equals(tag)) {
			// logBasic("====Special tag: " + tag);

			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("GstPL"));
			String amount = formatAmount(amountInTransactionCurrency);

			// AmountInTransactionCurrency
			sbXml.append(amount);
			return true;
		} else if ("Amount_Credit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("GstBS"));
			String amount = formatAmount(amountInTransactionCurrency);
			
			// AmountInTransactionCurrency
			sbXml.append(amount);
			return true;
		}
		return false;
	}

	private int getColumnIndex(RowMetaInterface inputRowMeta, String columnName) {
		if (mapColumnIdx.containsKey(columnName)) {
			return ((Integer) mapColumnIdx.get(columnName)).intValue();
		}
		int idx = inputRowMeta.indexOfValue(columnName);
		if (idx &lt; 0) {
			logError("====Not found column `" + columnName + "`");
		}
		mapColumnIdx.put(columnName, Integer.valueOf(idx));
		return idx;
	}

	private static boolean stringContainsSpecialCharacters(String value) {
		if (value == null) {
			return false;
		}
		return value.contains(DEFAULT_SEPARATOR) || value.contains(DEFAULT_ESCAPE_CHARACTER)
				|| value.contains(DEFAULT_END_LINE);
	}
	private String formatAmount(Double amount) {
		return formatAmount(amount, "%.2f");
	}

	String formatAmount(Double amount, String format) {
		if(null == amount) {
		return "null";
		}
		return String.format(format, new Object[] {amount});
	}</class_source>
      </definition>
    </definitions>
    <fields>
      <field>
        <field_name>JournalEntryRequest</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
      <field>
        <field_name>GroupKey</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps />
    <target_steps />
    <usage_parameters />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1056</xloc>
      <yloc>1760</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>udjc-Gst-build_xml</name>
    <type>UserDefinedJavaClass</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.pentaho.di.core.row.value.ValueMetaString;

	static final String TAG_OPEN = "_tag_open_";
	static final String TAG_CLOSE = "_tag_close_";

	RowMetaInterface inputRowMeta;
	RowMetaInterface outputRowMeta;

	// Step not support generic
	Map mapColumnIdx = new HashMap();// Map&lt;String, Integer>
	String groupKey = ""; // Current combined key
	Map mapTagHeader = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name
	Map mapTagDebitItem = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name for Balance Sheet account
	Map mapTagCreditItem = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name for P&amp;L account

	String[] groupedColumns;
	StringBuilder sbXml = new StringBuilder(128);
	StringBuilder sbXmlCredit = new StringBuilder(128);
	
	private void init() {
		// Initialize input, error and output metadata
		inputRowMeta = getInputRowMeta();
		outputRowMeta = new RowMeta();
		outputRowMeta.addValueMeta(new ValueMetaString("JournalEntryRequest"));
		outputRowMeta.addValueMeta(new ValueMetaString("GroupKey"));
		
		// define grouped column
		groupedColumns = new String[] { //
				"ClubMeeting", //
				"PaymentMode" //
		};

		// header tags
		mapTagHeader.put("OriginalReferenceDocumentType", "OriginalReferenceDocumentType");
		mapTagHeader.put("OriginalReferenceDocument", "OriginalReferenceDocument");
		mapTagHeader.put("OriginalReferenceDocumentLogicalSystem", "OriginalReferenceDocumentLogicalSystem");
		mapTagHeader.put("BusinessTransactionType", "BusinessTransactionType");
		mapTagHeader.put("AccountingDocumentType", "AccountingDocumentType");
		mapTagHeader.put("DocumentReferenceID", "DocumentReferenceID");
		mapTagHeader.put("DocumentHeaderText", "DocumentHeaderText");
		mapTagHeader.put("Reference1InDocumentHeader", "Reference1InDocumentHeader");
		mapTagHeader.put("CreatedByUser", "CreatedByUser");
		mapTagHeader.put("CompanyCode", "CompanyCode");
		mapTagHeader.put("DocumentDate", "DocumentDate");
		mapTagHeader.put("PostingDate", "PostingDate");

		// Debit item tags
		mapTagDebitItem = BuildDebitItem();

		// Credit item tags
		mapTagCreditItem = BuildCreditItem();
	}

	private LinkedHashMap BuildDebitItem() {
		LinkedHashMap debitItem = new LinkedHashMap();
		
		debitItem.put(TAG_OPEN + "Item", "");
		debitItem.put("GLAccount", "DebitGL");
		debitItem.put("Amount_Debit", ""); // special tag => AmountInTransactionCurrency_SGD
		debitItem.put("DebitCreditCode", "DebitCode");
		debitItem.put("DocumentItemText", "DocumentItemText");
		debitItem.put("AssignmentReference", "AssignmentReference");
		debitItem.put(TAG_OPEN + "AccountAssignment", "");
		debitItem.put("AccountAssignmentType", "AccountAssignmentType");
		debitItem.put("ProfitCenter", "ProfitCenterPL");
		debitItem.put("YY1_Bet_Mode", "BetMode");
		debitItem.put(TAG_CLOSE + "AccountAssignment", "");
		debitItem.put(TAG_OPEN + "ProfitabilitySupplement", "");
		debitItem.put("SoldMaterial", "SoldMaterial");
		debitItem.put(TAG_CLOSE + "ProfitabilitySupplement", "");
		debitItem.put(TAG_CLOSE + "Item", "");
		
		return debitItem;
	}
	
	private LinkedHashMap BuildCreditItem() {
		LinkedHashMap creditItem = new LinkedHashMap();
		
		creditItem.put(TAG_OPEN + "Item", "");
		creditItem.put("GLAccount", "CreditGL");
		creditItem.put("Amount_Credit", ""); // special tag => AmountInTransactionCurrency_SGD
		creditItem.put("DebitCreditCode", "CreditCode");
		creditItem.put("DocumentItemText", "DocumentItemText");
		creditItem.put("AssignmentReference", "AssignmentReference");
		creditItem.put(TAG_OPEN + "AccountAssignment", "");
		creditItem.put("ProfitCenter", "ProfitCenterBS");
		creditItem.put(TAG_CLOSE + "AccountAssignment", "");
		creditItem.put(TAG_CLOSE + "Item", "");

		return creditItem;
	}
	

	public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException {

		// get incoming row, getRow() potentially blocks waiting for more rows, returns
		// null if no more rows expected
		final Object[] r = getRow();

		// if no more rows are expected, indicate step is finished and processRow()
		// should not be called again
		if (r == null) {
			// the last group
			if (sbXml.length() > 0) {
				sbXml.append(sbXmlCredit);

				// logBasic("====End group");
				sbXml.append("&lt;/JournalEntry>").append("&lt;/JournalEntryCreateRequest>");
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbXml.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);
			}
			setOutputDone();
			return false;
		}

		// the "first" flag is inherited from the base step implementation
		// it is used to guard some processing tasks, like figuring out field indexes
		// in the row structure that only need to be done once
		if (first) {
			first = false;

			init();
		}

		StringBuilder sbKey = new StringBuilder();
		for (int i = 0; i &lt; groupedColumns.length; i++) {
			String tag = groupedColumns[i];
			int idx = inputRowMeta.indexOfValue(tag);
			String value = inputRowMeta.getString(r, idx);
			sbKey.append(value);
		}

		String key = sbKey.toString();
		if (!groupKey.equals(key)) { // new group
			if (sbXml.length() > 0) {
				sbXml.append(sbXmlCredit);
				
				// logBasic("====End group");

				// end tag JournalEntryCreateRequest
				sbXml.append("&lt;/JournalEntry>")//
						.append("&lt;/JournalEntryCreateRequest>");

				// put the row to the output row stream
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbXml.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);

				sbXml = new StringBuilder(128);
			}
			groupKey = key;

			// logBasic("====Begin group: " + sbKey.toString());
			// begin tag JournalEntryCreateRequest
			sbXml.append("&lt;JournalEntryCreateRequest>")//
					.append("&lt;MessageHeader>")//
					.append("&lt;CreationDateTime>&lt;/CreationDateTime>")//
					.append("&lt;/MessageHeader>")//
					.append("&lt;JournalEntry>");

			// build header tags
			buildXml(r, inputRowMeta, mapTagHeader, sbXml);
		}
		
		buildXml(r, inputRowMeta, mapTagDebitItem, sbXml);

		sbXmlCredit = new StringBuilder(128);
		if (0.0 != inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("GstBS"))) {
			buildXml(r, inputRowMeta, mapTagCreditItem, sbXmlCredit);
		}

		// log progress if it is time to to so
		if (checkFeedback(getLinesRead())) {
			// logBasic("Linenr " + getLinesRead()); // Some basic logging
		}

		// indicate that processRow() should be called again
		return true;
	}
	


	private void buildXml(Object[] r, RowMetaInterface inputRowMeta, Map mapTag, StringBuilder sbXml)
			throws KettleValueException {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			String tag = (String) tags[i];
			String columnName = (String) mapTag.get(tag);

			boolean handled = handleOpenCloseTag(tag, sbXml);
			if (!handled) {
				handled = handleSpecialTag(tag, r, inputRowMeta, sbXml);
			}
			if (handled) {
				continue;
			}

			int idx = getColumnIndex(inputRowMeta, columnName);
			String value = inputRowMeta.getString(r, idx);
			if("YY1_Bet_Mode".equals(tag)){
				sbXml.append("&lt;yy1:").append(tag).append(">").append(value).append("&lt;/yy1:").append(tag).append(">");
			} else {
				sbXml.append("&lt;").append(tag).append(">").append(value).append("&lt;/").append(tag).append(">");
			}
		}
	}

	private boolean handleSpecialTag(String tag, Object[] r, RowMetaInterface inputRowMeta, StringBuilder sbXml)
			throws KettleValueException {
		if ("Amount_Debit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			String currencySgd = inputRowMeta.getString(r, getColumnIndex(inputRowMeta, "Currency_SGD"));

			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("GstPL"));
			String amount = formatAmount(amountInTransactionCurrency);

			sbXml.append("&lt;AmountInTransactionCurrency currencyCode=\"").append(currencySgd).append("\">")
					.append(amount).append("&lt;/AmountInTransactionCurrency>");
			return true;

		} else if ("Amount_Credit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			String currencySgd = inputRowMeta.getString(r, getColumnIndex(inputRowMeta, "Currency_SGD"));

			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("GstBS"));
			String amount = formatAmount(amountInTransactionCurrency);
			
			sbXml.append("&lt;AmountInTransactionCurrency currencyCode=\"").append(currencySgd).append("\">")
					.append(amount).append("&lt;/AmountInTransactionCurrency>");
			return true;
		}
		return false;
	}

	private boolean handleOpenCloseTag(String tag, StringBuilder sbXml) {
		if (tag.startsWith(TAG_OPEN)) {
			// logBasic("====Open tag " + tag);
			sbXml.append("&lt;").append(tag.substring(TAG_OPEN.length())).append(">");
			return true;
		} else if (tag.startsWith(TAG_CLOSE)) {
			// logBasic("====Close tag " + tag);
			sbXml.append("&lt;/").append(tag.substring(TAG_CLOSE.length())).append(">");
			return true;
		}
		return false;
	}

	private int getColumnIndex(RowMetaInterface inputRowMeta, String columnName) {
		if (mapColumnIdx.containsKey(columnName)) {
			return ((Integer) mapColumnIdx.get(columnName)).intValue();
		}
		int idx = inputRowMeta.indexOfValue(columnName);
		if (idx &lt; 0) {
			logError("====Not found column `" + columnName + "`");
		}
		mapColumnIdx.put(columnName, Integer.valueOf(idx));
		return idx;
	}
	private String formatAmount(Double amount) {
		return formatAmount(amount, "%.2f");
	}

	String formatAmount(Double amount, String format) {
		if(null == amount) {
		return "null";
		}
		return String.format(format, new Object[] {amount});
	}</class_source>
      </definition>
    </definitions>
    <fields>
      <field>
        <field_name>JournalEntryRequest</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
      <field>
        <field_name>GroupKey</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps />
    <target_steps />
    <usage_parameters />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1056</xloc>
      <yloc>1824</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>udjc-LoosingRebate-build_csv</name>
    <type>UserDefinedJavaClass</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.pentaho.di.core.row.value.ValueMetaString;

	static final String TAG_IGNORE = "_tag_ignore_";
	static final String DEFAULT_SEPARATOR = ",";
	static final String DEFAULT_ESCAPE_CHARACTER = "\"";
	static final String DEFAULT_END_LINE = "\r\n";

	RowMetaInterface inputRowMeta;
	RowMetaInterface outputRowMeta;

	// Step not support generic
	Map mapColumnIdx = new HashMap();// Map&lt;String, Integer>
	String groupKey = ""; // Current combined key
	Map mapTagCommon = new LinkedHashMap(); // Map&lt;String, String>: common header tag - column name
	Map mapTagDebitItem = new LinkedHashMap(); // Map&lt;String, String>: hedger tag - column name for Balance Sheet account
	Map mapTagCreditItem = new LinkedHashMap(); // Map&lt;String, String>: header tag - column name for P&amp;L account

	String[] groupedColumns;
	StringBuilder sbCsv = new StringBuilder(128);
	StringBuilder sbCsvCredit = new StringBuilder(128);

	private void init() {
		// Initialize input, error and output metadata
		inputRowMeta = getInputRowMeta();
		outputRowMeta = new RowMeta();
		outputRowMeta.addValueMeta(new ValueMetaString("JournalEntry"));
		outputRowMeta.addValueMeta(new ValueMetaString("GroupKey"));

		// define grouped column
		groupedColumns = new String[] { //
				"ClubMeeting", //
				"PaymentMode" //
		};

		// common header tags
		mapTagCommon.put("OriginalReferenceDocumentType", "OriginalReferenceDocumentType");
		mapTagCommon.put("OriginalReferenceDocument", "OriginalReferenceDocument");
		mapTagCommon.put("OriginalReferenceDocumentLogicalSystem", "OriginalReferenceDocumentLogicalSystem");
		mapTagCommon.put("BusinessTransactionType", "BusinessTransactionType");
		mapTagCommon.put("AccountingDocumentType", "AccountingDocumentType");
		mapTagCommon.put("DocumentReferenceID", "DocumentReferenceID");
		mapTagCommon.put("DocumentHeaderText", "DocumentHeaderText");
		mapTagCommon.put("Reference1InDocumentHeader", "Reference1InDocumentHeader");
		mapTagCommon.put("CreatedByUser", "CreatedByUser");
		mapTagCommon.put("CompanyCode", "CompanyCode");
		mapTagCommon.put("DocumentDate", "DocumentDate");
		mapTagCommon.put("PostingDate", "PostingDate");

		// Debit item tags
		mapTagDebitItem.put("Debtor", TAG_IGNORE);
		mapTagDebitItem.put("GLAccount", "DebitGL");
		mapTagDebitItem.put("Amount_Debit", ""); // special tag => AmountInTransactionCurrency, AmountInCompanyCodeCurrency,
		mapTagDebitItem.put("Currency_SGD", "Currency_SGD");
		mapTagDebitItem.put("DebitCreditCode", "DebitCode");
		mapTagDebitItem.put("DocumentItemText", "DocumentItemText");
		mapTagDebitItem.put("AssignmentReference", "AssignmentReference");
		mapTagDebitItem.put("AccountAssignmentType", "AccountAssignmentType");
		mapTagDebitItem.put("ProfitCenter", "ProfitCenterPL");
		mapTagDebitItem.put("YY1_Bet_Mode", "BetMode");
		mapTagDebitItem.put("SoldMaterial", "SoldMaterial");
		mapTagDebitItem.put("ReferenceDocumentItem", TAG_IGNORE);

		// Credit item tags
		mapTagCreditItem.put("Debtor", TAG_IGNORE);
		mapTagCreditItem.put("GLAccount", "CreditGL");
		mapTagCreditItem.put("Amount_Credit", ""); // special tag => AmountInTransactionCurrency, AmountInCompanyCodeCurrency,
		mapTagCreditItem.put("Currency_SGD", "Currency_SGD");
		mapTagCreditItem.put("DebitCreditCode", "CreditCode");
		mapTagCreditItem.put("DocumentItemText", "DocumentItemText");
		mapTagCreditItem.put("AssignmentReference", "AssignmentReference");
		mapTagCreditItem.put("AccountAssignmentType", TAG_IGNORE);
		mapTagCreditItem.put("ProfitCenter", "ProfitCenterBS");
		mapTagCreditItem.put("YY1_Bet_Mode", TAG_IGNORE);
		mapTagCreditItem.put("SoldMaterial", TAG_IGNORE);
		mapTagCreditItem.put("ReferenceDocumentItem", TAG_IGNORE);
	}

	public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException {

		// get incoming row, getRow() potentially blocks waiting for more rows, returns
		// null if no more rows expected
		final Object[] r = getRow();

		// if no more rows are expected, indicate step is finished and processRow()
		// should not be called again
		if (r == null) {
			// the last group
			if (sbCsv.length() > 0) {
				sbCsv.append(sbCsvCredit);
				
				// logBasic("====End group");
				// redundant end line
				int idx = sbCsv.lastIndexOf(DEFAULT_END_LINE);
				if (idx >= 0) {
					sbCsv.delete(idx, idx + DEFAULT_END_LINE.length());
				}
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbCsv.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);
			}
			// done
			setOutputDone();
			return false;
		}

		// the "first" flag is inherited from the base step implementation
		// it is used to guard some processing tasks, like figuring out field indexes
		// in the row structure that only need to be done once
		if (first) {
			first = false;

			init();
		}

		StringBuilder sbKey = new StringBuilder();
		for (int i = 0; i &lt; groupedColumns.length; i++) {
			String columnName = groupedColumns[i];
			int idx = getColumnIndex(inputRowMeta, columnName);
			String value = inputRowMeta.getString(r, idx);
			sbKey.append(value);
		}

		String key = sbKey.toString();
		if (!groupKey.equals(key)) { // new group
			if (sbCsv.length() > 0) {
				sbCsv.append(sbCsvCredit);
				
				// logBasic("====End group");

				// redundant end line
				int idx = sbCsv.lastIndexOf(DEFAULT_END_LINE);
				if (idx >= 0) {
					sbCsv.delete(idx, idx + DEFAULT_END_LINE.length());
				}

				// put the row to the output row stream
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbCsv.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);

				sbCsv = new StringBuilder(128);
			}
			groupKey = key;

			// logBasic("====Begin group: " + groupKey);
			// begin group, has common tags
			// build common tags
			buildCells(r, inputRowMeta, mapTagCommon, sbCsv, false);
		} else {
			// build common tags with empty value
			buildEmptyCells(mapTagCommon, sbCsv);
		}
		// build tag Item for Debit
		buildCells(r, inputRowMeta, mapTagDebitItem, sbCsv, true);

		
		
		sbCsvCredit = new StringBuilder(128);

		if (0.0 != inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("LosingRebateBS"))) {
			// build common tags with empty value
			buildEmptyCells(mapTagCommon, sbCsvCredit);
			// build tag Item for Credit
			buildCells(r, inputRowMeta, mapTagCreditItem, sbCsvCredit, true);
		}

		// log progress if it is time to to so
		if (checkFeedback(getLinesRead())) {
			// logBasic("Linenr " + getLinesRead()); // Some basic logging
		}

		// indicate that processRow() should be called again
		return true;
	}

	private void buildEmptyCells(Map mapTag, StringBuilder sbCsv) {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			sbCsv.append(DEFAULT_SEPARATOR);
		}
	}

	private void buildCells(Object[] r, RowMetaInterface inputRowMeta, Map mapTag, StringBuilder sbCsv,
			boolean autoEndRow) throws KettleValueException {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			String tag = (String) tags[i];
			String columnName = (String) mapTag.get(tag);

			boolean handled = TAG_IGNORE.equals(columnName);
			if (!handled) {
				handled = handleSpecialTag(tag, r, inputRowMeta, sbCsv);
			}
			if (!handled) {
				int idx = getColumnIndex(inputRowMeta, columnName);
				String value = inputRowMeta.getString(r, idx);
				if (value != null) {
					if (stringContainsSpecialCharacters(value)) {
						sbCsv.append(DEFAULT_ESCAPE_CHARACTER).append(value).append(DEFAULT_ESCAPE_CHARACTER);
					} else {
						sbCsv.append(value);
					}
				}
			}
			if (i &lt; tags.length - 1) {
				sbCsv.append(DEFAULT_SEPARATOR);
			}
		}

		if (autoEndRow) {
			sbCsv.append(DEFAULT_END_LINE);
		} else {
			sbCsv.append(DEFAULT_SEPARATOR);
		}
	}

	private boolean handleSpecialTag(String tag, Object[] r, RowMetaInterface inputRowMeta, StringBuilder sbXml)
			throws KettleValueException {
		if ("Amount_Debit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("LosingRebatePL"));
			String amount = formatAmount(amountInTransactionCurrency);

			// AmountInTransactionCurrency
			sbXml.append(amount);
			return true;
		} else if ("Amount_Credit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("LosingRebateBS"));
			String amount = formatAmount(amountInTransactionCurrency);
			
			// AmountInTransactionCurrency
			sbXml.append(amount);
			return true;
		}
		return false;
	}

	private int getColumnIndex(RowMetaInterface inputRowMeta, String columnName) {
		if (mapColumnIdx.containsKey(columnName)) {
			return ((Integer) mapColumnIdx.get(columnName)).intValue();
		}
		int idx = inputRowMeta.indexOfValue(columnName);
		if (idx &lt; 0) {
			logError("====Not found column `" + columnName + "`");
		}
		mapColumnIdx.put(columnName, Integer.valueOf(idx));
		return idx;
	}

	private static boolean stringContainsSpecialCharacters(String value) {
		if (value == null) {
			return false;
		}
		return value.contains(DEFAULT_SEPARATOR) || value.contains(DEFAULT_ESCAPE_CHARACTER)
				|| value.contains(DEFAULT_END_LINE);
	}
	private String formatAmount(Double amount) {
		return formatAmount(amount, "%.2f");
	}

	String formatAmount(Double amount, String format) {
		if(null == amount) {
		return "null";
		}
		return String.format(format, new Object[] {amount});
	}</class_source>
      </definition>
    </definitions>
    <fields>
      <field>
        <field_name>JournalEntryRequest</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
      <field>
        <field_name>GroupKey</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps />
    <target_steps />
    <usage_parameters />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1088</xloc>
      <yloc>2384</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>udjc-LoosingRebate-build_xml</name>
    <type>UserDefinedJavaClass</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.pentaho.di.core.row.value.ValueMetaString;

	static final String TAG_OPEN = "_tag_open_";
	static final String TAG_CLOSE = "_tag_close_";

	RowMetaInterface inputRowMeta;
	RowMetaInterface outputRowMeta;

	// Step not support generic
	Map mapColumnIdx = new HashMap();// Map&lt;String, Integer>
	String groupKey = ""; // Current combined key
	Map mapTagHeader = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name
	Map mapTagDebitItem = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name for Balance Sheet account
	Map mapTagCreditItem = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name for P&amp;L account

	String[] groupedColumns;
	StringBuilder sbXml = new StringBuilder(128);
	StringBuilder sbXmlCredit = new StringBuilder(128);
	
	private void init() {
		// Initialize input, error and output metadata
		inputRowMeta = getInputRowMeta();
		outputRowMeta = new RowMeta();
		outputRowMeta.addValueMeta(new ValueMetaString("JournalEntryRequest"));
		outputRowMeta.addValueMeta(new ValueMetaString("GroupKey"));
		
		// define grouped column
		groupedColumns = new String[] { //
				"ClubMeeting", //
				"PaymentMode" //
		};

		// header tags
		mapTagHeader.put("OriginalReferenceDocumentType", "OriginalReferenceDocumentType");
		mapTagHeader.put("OriginalReferenceDocument", "OriginalReferenceDocument");
		mapTagHeader.put("OriginalReferenceDocumentLogicalSystem", "OriginalReferenceDocumentLogicalSystem");
		mapTagHeader.put("BusinessTransactionType", "BusinessTransactionType");
		mapTagHeader.put("AccountingDocumentType", "AccountingDocumentType");
		mapTagHeader.put("DocumentReferenceID", "DocumentReferenceID");
		mapTagHeader.put("DocumentHeaderText", "DocumentHeaderText");
		mapTagHeader.put("Reference1InDocumentHeader", "Reference1InDocumentHeader");
		mapTagHeader.put("CreatedByUser", "CreatedByUser");
		mapTagHeader.put("CompanyCode", "CompanyCode");
		mapTagHeader.put("DocumentDate", "DocumentDate");
		mapTagHeader.put("PostingDate", "PostingDate");

		// Debit item tags
		mapTagDebitItem = BuildDebitItem();

		// Credit item tags
		mapTagCreditItem = BuildCreditItem();
	}

	private LinkedHashMap BuildDebitItem() {
		LinkedHashMap debitItem = new LinkedHashMap();
		
		debitItem.put(TAG_OPEN + "Item", "");
		debitItem.put("GLAccount", "DebitGL");
		debitItem.put("Amount_Debit", ""); // special tag => AmountInTransactionCurrency_SGD
		debitItem.put("DebitCreditCode", "DebitCode");
		debitItem.put("DocumentItemText", "DocumentItemText");
		debitItem.put("AssignmentReference", "AssignmentReference");
		debitItem.put(TAG_OPEN + "AccountAssignment", "");
		debitItem.put("AccountAssignmentType", "AccountAssignmentType");
		debitItem.put("ProfitCenter", "ProfitCenterPL");
		debitItem.put("YY1_Bet_Mode", "BetMode");
		debitItem.put(TAG_CLOSE + "AccountAssignment", "");
		debitItem.put(TAG_OPEN + "ProfitabilitySupplement", "");
		debitItem.put("SoldMaterial", "SoldMaterial");
		debitItem.put(TAG_CLOSE + "ProfitabilitySupplement", "");
		debitItem.put(TAG_CLOSE + "Item", "");
		
		return debitItem;
	}
	
	private LinkedHashMap BuildCreditItem() {
		LinkedHashMap creditItem = new LinkedHashMap();
		
		creditItem.put(TAG_OPEN + "Item", "");
		creditItem.put("GLAccount", "CreditGL");
		creditItem.put("Amount_Credit", ""); // special tag => AmountInTransactionCurrency_SGD
		creditItem.put("DebitCreditCode", "CreditCode");
		creditItem.put("DocumentItemText", "DocumentItemText");
		creditItem.put("AssignmentReference", "AssignmentReference");
		creditItem.put(TAG_OPEN + "AccountAssignment", "");
		creditItem.put("ProfitCenter", "ProfitCenterBS");
		creditItem.put(TAG_CLOSE + "AccountAssignment", "");
		creditItem.put(TAG_CLOSE + "Item", "");

		return creditItem;
	}
	

	public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException {

		// get incoming row, getRow() potentially blocks waiting for more rows, returns
		// null if no more rows expected
		final Object[] r = getRow();

		// if no more rows are expected, indicate step is finished and processRow()
		// should not be called again
		if (r == null) {
			// the last group
			if (sbXml.length() > 0) {
				sbXml.append(sbXmlCredit);

				// logBasic("====End group");
				sbXml.append("&lt;/JournalEntry>").append("&lt;/JournalEntryCreateRequest>");
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbXml.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);
			}
			setOutputDone();
			return false;
		}

		// the "first" flag is inherited from the base step implementation
		// it is used to guard some processing tasks, like figuring out field indexes
		// in the row structure that only need to be done once
		if (first) {
			first = false;

			init();
		}

		StringBuilder sbKey = new StringBuilder();
		for (int i = 0; i &lt; groupedColumns.length; i++) {
			String tag = groupedColumns[i];
			int idx = inputRowMeta.indexOfValue(tag);
			String value = inputRowMeta.getString(r, idx);
			sbKey.append(value);
		}

		String key = sbKey.toString();
		if (!groupKey.equals(key)) { // new group
			if (sbXml.length() > 0) {
				sbXml.append(sbXmlCredit);
				
				// logBasic("====End group");

				// end tag JournalEntryCreateRequest
				sbXml.append("&lt;/JournalEntry>")//
						.append("&lt;/JournalEntryCreateRequest>");

				// put the row to the output row stream
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbXml.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);

				sbXml = new StringBuilder(128);
			}
			groupKey = key;

			// logBasic("====Begin group: " + sbKey.toString());
			// begin tag JournalEntryCreateRequest
			sbXml.append("&lt;JournalEntryCreateRequest>")//
					.append("&lt;MessageHeader>")//
					.append("&lt;CreationDateTime>&lt;/CreationDateTime>")//
					.append("&lt;/MessageHeader>")//
					.append("&lt;JournalEntry>");

			// build header tags
			buildXml(r, inputRowMeta, mapTagHeader, sbXml);
		}
		
		buildXml(r, inputRowMeta, mapTagDebitItem, sbXml);

		sbXmlCredit = new StringBuilder(128);
		if (0.0 != inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("LosingRebateBS"))) {
			buildXml(r, inputRowMeta, mapTagCreditItem, sbXmlCredit);
		}
		// log progress if it is time to to so
		if (checkFeedback(getLinesRead())) {
			// logBasic("Linenr " + getLinesRead()); // Some basic logging
		}

		// indicate that processRow() should be called again
		return true;
	}
	


	private void buildXml(Object[] r, RowMetaInterface inputRowMeta, Map mapTag, StringBuilder sbXml)
			throws KettleValueException {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			String tag = (String) tags[i];
			String columnName = (String) mapTag.get(tag);

			boolean handled = handleOpenCloseTag(tag, sbXml);
			if (!handled) {
				handled = handleSpecialTag(tag, r, inputRowMeta, sbXml);
			}
			if (handled) {
				continue;
			}

			int idx = getColumnIndex(inputRowMeta, columnName);
			String value = inputRowMeta.getString(r, idx);
			if("YY1_Bet_Mode".equals(tag)){
				sbXml.append("&lt;yy1:").append(tag).append(">").append(value).append("&lt;/yy1:").append(tag).append(">");
			} else {
				sbXml.append("&lt;").append(tag).append(">").append(value).append("&lt;/").append(tag).append(">");
			}
		}
	}

	private boolean handleSpecialTag(String tag, Object[] r, RowMetaInterface inputRowMeta, StringBuilder sbXml)
			throws KettleValueException {
		if ("Amount_Debit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			String currencySgd = inputRowMeta.getString(r, getColumnIndex(inputRowMeta, "Currency_SGD"));

			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("LosingRebatePL"));
			String amount = formatAmount(amountInTransactionCurrency);

			sbXml.append("&lt;AmountInTransactionCurrency currencyCode=\"").append(currencySgd).append("\">")
					.append(amount).append("&lt;/AmountInTransactionCurrency>");
			return true;

		} else if ("Amount_Credit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			String currencySgd = inputRowMeta.getString(r, getColumnIndex(inputRowMeta, "Currency_SGD"));

			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("LosingRebateBS"));
			String amount = formatAmount(amountInTransactionCurrency);
			
			sbXml.append("&lt;AmountInTransactionCurrency currencyCode=\"").append(currencySgd).append("\">")
					.append(amount).append("&lt;/AmountInTransactionCurrency>");
			return true;
		}
		return false;
	}

	private boolean handleOpenCloseTag(String tag, StringBuilder sbXml) {
		if (tag.startsWith(TAG_OPEN)) {
			// logBasic("====Open tag " + tag);
			sbXml.append("&lt;").append(tag.substring(TAG_OPEN.length())).append(">");
			return true;
		} else if (tag.startsWith(TAG_CLOSE)) {
			// logBasic("====Close tag " + tag);
			sbXml.append("&lt;/").append(tag.substring(TAG_CLOSE.length())).append(">");
			return true;
		}
		return false;
	}

	private int getColumnIndex(RowMetaInterface inputRowMeta, String columnName) {
		if (mapColumnIdx.containsKey(columnName)) {
			return ((Integer) mapColumnIdx.get(columnName)).intValue();
		}
		int idx = inputRowMeta.indexOfValue(columnName);
		if (idx &lt; 0) {
			logError("====Not found column `" + columnName + "`");
		}
		mapColumnIdx.put(columnName, Integer.valueOf(idx));
		return idx;
	}
	private String formatAmount(Double amount) {
		return formatAmount(amount, "%.2f");
	}

	String formatAmount(Double amount, String format) {
		if(null == amount) {
		return "null";
		}
		return String.format(format, new Object[] {amount});
	}</class_source>
      </definition>
    </definitions>
    <fields>
      <field>
        <field_name>JournalEntryRequest</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
      <field>
        <field_name>GroupKey</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps />
    <target_steps />
    <usage_parameters />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1088</xloc>
      <yloc>2448</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>udjc-Turnover-build_csv</name>
    <type>UserDefinedJavaClass</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.pentaho.di.core.row.value.ValueMetaString;

	static final String TAG_IGNORE = "_tag_ignore_";
	static final String DEFAULT_SEPARATOR = ",";
	static final String DEFAULT_ESCAPE_CHARACTER = "\"";
	static final String DEFAULT_END_LINE = "\r\n";

	RowMetaInterface inputRowMeta;
	RowMetaInterface outputRowMeta;

	// Step not support generic
	Map mapColumnIdx = new HashMap();// Map&lt;String, Integer>
	String groupKey = ""; // Current combined key
	Map mapTagCommon = new LinkedHashMap(); // Map&lt;String, String>: common header tag - column name
	Map mapTagDebitItem = new LinkedHashMap(); // Map&lt;String, String>: hedger tag - column name for Balance Sheet account
	Map mapTagCreditItem = new LinkedHashMap(); // Map&lt;String, String>: header tag - column name for P&amp;L account

	String[] groupedColumns;
	StringBuilder sbCsv = new StringBuilder(128);
	StringBuilder sbCsvCredit = new StringBuilder(128);

	private void init() {
		// Initialize input, error and output metadata
		inputRowMeta = getInputRowMeta();
		outputRowMeta = new RowMeta();
		outputRowMeta.addValueMeta(new ValueMetaString("JournalEntry"));
		outputRowMeta.addValueMeta(new ValueMetaString("GroupKey"));

		// define grouped column
		groupedColumns = new String[] { //
				"ClubMeeting", //
				"PaymentMode" //
		};

		// common header tags
		mapTagCommon.put("OriginalReferenceDocumentType", "OriginalReferenceDocumentType");
		mapTagCommon.put("OriginalReferenceDocument", "OriginalReferenceDocument");
		mapTagCommon.put("OriginalReferenceDocumentLogicalSystem", "OriginalReferenceDocumentLogicalSystem");
		mapTagCommon.put("BusinessTransactionType", "BusinessTransactionType");
		mapTagCommon.put("AccountingDocumentType", "AccountingDocumentType");
		mapTagCommon.put("DocumentReferenceID", "DocumentReferenceID");
		mapTagCommon.put("DocumentHeaderText", "DocumentHeaderText");
		mapTagCommon.put("Reference1InDocumentHeader", "Reference1InDocumentHeader");
		mapTagCommon.put("CreatedByUser", "CreatedByUser");
		mapTagCommon.put("CompanyCode", "CompanyCode");
		mapTagCommon.put("DocumentDate", "DocumentDate");
		mapTagCommon.put("PostingDate", "PostingDate");

		// Debit item tags
		mapTagDebitItem.put("Debtor", "DebtorBS");
		mapTagDebitItem.put("GLAccount", "GLAccountBS");
		mapTagDebitItem.put("Amount_Debit", ""); // special tag => AmountInTransactionCurrency, AmountInCompanyCodeCurrency,
		mapTagDebitItem.put("Currency_SGD", "Currency_SGD");
		mapTagDebitItem.put("DebitCreditCode", "DebitCode");
		mapTagDebitItem.put("DocumentItemText", "DocumentItemText");
		mapTagDebitItem.put("AssignmentReference", "AssignmentReference");
		mapTagDebitItem.put("AccountAssignmentType", TAG_IGNORE);
		mapTagDebitItem.put("ProfitCenter", "ProfitCenterBS");
		mapTagDebitItem.put("YY1_Bet_Mode", TAG_IGNORE);
		mapTagDebitItem.put("SoldMaterial", TAG_IGNORE);
		mapTagDebitItem.put("ReferenceDocumentItem", "ReferenceDocumentItem");
		// Credit item tags
		mapTagCreditItem.put("Debtor", TAG_IGNORE);
		mapTagCreditItem.put("GLAccount", "CreditGL");
		mapTagCreditItem.put("Amount_Credit", ""); // special tag => AmountInTransactionCurrency, AmountInCompanyCodeCurrency,
		mapTagCreditItem.put("Currency_SGD", "Currency_SGD");
		mapTagCreditItem.put("DebitCreditCode", "CreditCode");
		mapTagCreditItem.put("DocumentItemText", "DocumentItemText");
		mapTagCreditItem.put("AssignmentReference", "AssignmentReference");
		mapTagCreditItem.put("AccountAssignmentType", "AccountAssignmentType");
		mapTagCreditItem.put("ProfitCenter", "ProfitCenterPL");
		mapTagCreditItem.put("YY1_Bet_Mode", "BetMode");
		mapTagCreditItem.put("SoldMaterial", "SoldMaterial");
		mapTagCreditItem.put("ReferenceDocumentItem", TAG_IGNORE);

	}

	public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException {

		// get incoming row, getRow() potentially blocks waiting for more rows, returns
		// null if no more rows expected
		final Object[] r = getRow();

		// if no more rows are expected, indicate step is finished and processRow()
		// should not be called again
		if (r == null) {
			// the last group
			if (sbCsv.length() > 0) {
				// logBasic("====End group");
				// redundant end line
				int idx = sbCsv.lastIndexOf(DEFAULT_END_LINE);
				if (idx >= 0) {
					sbCsv.delete(idx, idx + DEFAULT_END_LINE.length());
				}
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbCsv.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);
			}
			// done
			setOutputDone();
			return false;
		}

		// the "first" flag is inherited from the base step implementation
		// it is used to guard some processing tasks, like figuring out field indexes
		// in the row structure that only need to be done once
		if (first) {
			first = false;

			init();
		}

		StringBuilder sbKey = new StringBuilder();
		for (int i = 0; i &lt; groupedColumns.length; i++) {
			String columnName = groupedColumns[i];
			int idx = getColumnIndex(inputRowMeta, columnName);
			String value = inputRowMeta.getString(r, idx);
			sbKey.append(value);
		}

		String key = sbKey.toString();
		if (!groupKey.equals(key)) { // new group

			if (sbCsv.length() > 0) {
				// logBasic("====End group");

				// redundant end line
				int idx = sbCsv.lastIndexOf(DEFAULT_END_LINE);
				if (idx >= 0) {
					sbCsv.delete(idx, idx + DEFAULT_END_LINE.length());
				}

				// put the row to the output row stream
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbCsv.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);

				sbCsv = new StringBuilder(128);
			}
			groupKey = key;
			// logBasic("====Begin group: " + groupKey);
			// begin group, has common tags
			// build common tags
			buildCells(r, inputRowMeta, mapTagCommon, sbCsv, false);

			// build tag Item for Debit
			if (0.0 != inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("TurnoverBS"))) {
				buildCells(r, inputRowMeta, mapTagDebitItem, sbCsv, true);
			}
		}
		
		// build common tags with empty value
		buildEmptyCells(mapTagCommon, sbCsv);
		// build tag Item for Credit
		buildCells(r, inputRowMeta, mapTagCreditItem, sbCsv, true);

		// log progress if it is time to to so
		if (checkFeedback(getLinesRead())) {
			// logBasic("Linenr " + getLinesRead()); // Some basic logging
		}

		// indicate that processRow() should be called again
		return true;
	}

	private void buildEmptyCells(Map mapTag, StringBuilder sbCsv) {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			sbCsv.append(DEFAULT_SEPARATOR);
		}
	}

	private void buildCells(Object[] r, RowMetaInterface inputRowMeta, Map mapTag, StringBuilder sbCsv,
			boolean autoEndRow) throws KettleValueException {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			String tag = (String) tags[i];
			String columnName = (String) mapTag.get(tag);

			boolean handled = TAG_IGNORE.equals(columnName);
			if (!handled) {
				handled = handleSpecialTag(tag, r, inputRowMeta, sbCsv);
			}
			if (!handled) {
				int idx = getColumnIndex(inputRowMeta, columnName);
				String value = inputRowMeta.getString(r, idx);
				if (value != null) {
					if (stringContainsSpecialCharacters(value)) {
						sbCsv.append(DEFAULT_ESCAPE_CHARACTER).append(value).append(DEFAULT_ESCAPE_CHARACTER);
					} else {
						sbCsv.append(value);
					}
				}
			}
			if (i &lt; tags.length - 1) {
				sbCsv.append(DEFAULT_SEPARATOR);
			}
		}

		if (autoEndRow) {
			sbCsv.append(DEFAULT_END_LINE);
		} else {
			sbCsv.append(DEFAULT_SEPARATOR);
		}
	}

	private boolean handleSpecialTag(String tag, Object[] r, RowMetaInterface inputRowMeta, StringBuilder sbXml)
			throws KettleValueException {
		if ("Amount_Debit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("TurnoverBS"));
			String amount = formatAmount(amountInTransactionCurrency);

			// AmountInTransactionCurrency
			sbXml.append(amount);
			return true;
		} else if ("Amount_Credit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("TurnoverPL"));
			String amount = formatAmount(amountInTransactionCurrency);
			
			// AmountInTransactionCurrency
			sbXml.append(amount);
			return true;
		}
		return false;
	}

	private int getColumnIndex(RowMetaInterface inputRowMeta, String columnName) {
		if (mapColumnIdx.containsKey(columnName)) {
			return ((Integer) mapColumnIdx.get(columnName)).intValue();
		}
		int idx = inputRowMeta.indexOfValue(columnName);
		if (idx &lt; 0) {
			logError("====Not found column `" + columnName + "`");
		}
		mapColumnIdx.put(columnName, Integer.valueOf(idx));
		return idx;
	}

	private static boolean stringContainsSpecialCharacters(String value) {
		if (value == null) {
			return false;
		}
		return value.contains(DEFAULT_SEPARATOR) || value.contains(DEFAULT_ESCAPE_CHARACTER)
				|| value.contains(DEFAULT_END_LINE);
	}

	private String formatAmount(Double amount) {
		return formatAmount(amount, "%.2f");
	}

	String formatAmount(Double amount, String format) {
		if(null == amount) {
		return "null";
		}
		return String.format(format, new Object[] {amount});
	}</class_source>
      </definition>
    </definitions>
    <fields>
      <field>
        <field_name>JournalEntryRequest</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
      <field>
        <field_name>GroupKey</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps />
    <target_steps />
    <usage_parameters />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1056</xloc>
      <yloc>1360</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>udjc-Turnover-build_xml</name>
    <type>UserDefinedJavaClass</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.pentaho.di.core.row.value.ValueMetaString;

	static final String TAG_OPEN = "_tag_open_";
	static final String TAG_CLOSE = "_tag_close_";

	RowMetaInterface inputRowMeta;
	RowMetaInterface outputRowMeta;

	// Step not support generic
	Map mapColumnIdx = new HashMap();// Map&lt;String, Integer>
	String groupKey = ""; // Current the combined key
	Map mapTagHeader = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name
	Map mapTagDebitItem = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name for Balance Sheet account
	Map mapTagDebitDebtorItem = new LinkedHashMap();
	Map mapTagCreditItem = new LinkedHashMap(); // Map&lt;String, String>: xml tag - column name for P&amp;L account

	String[] groupedColumns;
	StringBuilder sbXml = new StringBuilder(128);
	StringBuilder sbXmlCredit = new StringBuilder(128);
	StringBuilder sbXmlDebit = new StringBuilder(128);
	
	private void init() {
		// Initialize input, error and output metadata
		inputRowMeta = getInputRowMeta();
		outputRowMeta = new RowMeta();
		outputRowMeta.addValueMeta(new ValueMetaString("JournalEntryRequest"));
		outputRowMeta.addValueMeta(new ValueMetaString("GroupKey"));

		
		// define grouped column
		groupedColumns = new String[] { //
				"ClubMeeting", //
				"PaymentMode" //
		};

		// header tags
		mapTagHeader.put("OriginalReferenceDocumentType", "OriginalReferenceDocumentType");
		mapTagHeader.put("OriginalReferenceDocument", "OriginalReferenceDocument");
		mapTagHeader.put("OriginalReferenceDocumentLogicalSystem", "OriginalReferenceDocumentLogicalSystem");
		mapTagHeader.put("BusinessTransactionType", "BusinessTransactionType");
		mapTagHeader.put("AccountingDocumentType", "AccountingDocumentType");
		mapTagHeader.put("DocumentReferenceID", "DocumentReferenceID");
		mapTagHeader.put("DocumentHeaderText", "DocumentHeaderText");
		mapTagHeader.put("Reference1InDocumentHeader", "Reference1InDocumentHeader");
		mapTagHeader.put("CreatedByUser", "CreatedByUser");
		mapTagHeader.put("CompanyCode", "CompanyCode");
		mapTagHeader.put("DocumentDate", "DocumentDate");
		mapTagHeader.put("PostingDate", "PostingDate");

		// Debit item tags
		mapTagDebitItem = BuildDebitItem();

		//Debit debtor item tags
		mapTagDebitDebtorItem = BuildDebitDebtorItem();
		

		// Credit item tags
		mapTagCreditItem = BuildCreditItem();
	}

	private LinkedHashMap BuildDebitItem() {
		LinkedHashMap debitItem = new LinkedHashMap();
		
		debitItem.put(TAG_OPEN + "Item", "");
		debitItem.put("GLAccount", "GLAccountBS");
		debitItem.put("Amount_Debit", ""); // special tag => AmountInTransactionCurrency_SGD
		debitItem.put("DebitCreditCode", "DebitCode");
		debitItem.put("DocumentItemText", "DocumentItemText");
		debitItem.put("AssignmentReference", "AssignmentReference");
		debitItem.put(TAG_OPEN + "AccountAssignment", "");
		debitItem.put("ProfitCenter", "ProfitCenterBS");
		debitItem.put(TAG_CLOSE + "AccountAssignment", "");
		debitItem.put(TAG_CLOSE + "Item", "");
		
		return debitItem;
	}
	
	private LinkedHashMap BuildDebitDebtorItem() {
		LinkedHashMap debitItem = new LinkedHashMap();
		
		debitItem.put(TAG_OPEN + "DebtorItem", "");
		debitItem.put("ReferenceDocumentItem", "ReferenceDocumentItem");
		debitItem.put("Debtor", "DebtorBS");
		debitItem.put("Amount_Debit", ""); // special tag => AmountInTransactionCurrency_SGD
		debitItem.put("DebitCreditCode", "DebitCode");
		debitItem.put("DocumentItemText", "DocumentItemText");
		debitItem.put("AssignmentReference", "AssignmentReference");
		debitItem.put(TAG_OPEN + "AccountAssignment", "");
		debitItem.put("ProfitCenter", "ProfitCenterBS");
		debitItem.put(TAG_CLOSE + "AccountAssignment", "");
		debitItem.put(TAG_CLOSE + "DebtorItem", "");
		
		return debitItem;
	}

	private LinkedHashMap BuildCreditItem() {
		LinkedHashMap creditItem = new LinkedHashMap();
		
		creditItem.put(TAG_OPEN + "Item", "");
		creditItem.put("GLAccount", "CreditGL");
		creditItem.put("Amount_Credit", ""); // special tag => AmountInTransactionCurrency_SGD
		creditItem.put("DebitCreditCode", "CreditCode");
		creditItem.put("DocumentItemText", "DocumentItemText");
		creditItem.put("AssignmentReference", "AssignmentReference");
		creditItem.put(TAG_OPEN + "AccountAssignment", "");
		creditItem.put("AccountAssignmentType", "AccountAssignmentType");
		creditItem.put("ProfitCenter", "ProfitCenterPL");
		creditItem.put("YY1_Bet_Mode", "BetMode");
		creditItem.put(TAG_CLOSE + "AccountAssignment", "");
		creditItem.put(TAG_OPEN + "ProfitabilitySupplement", "");
		creditItem.put("SoldMaterial", "SoldMaterial");
		creditItem.put(TAG_CLOSE + "ProfitabilitySupplement", "");
		creditItem.put(TAG_CLOSE + "Item", "");
		
		return creditItem;
	}
	

	public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException {

		// get incoming row, getRow() potentially blocks waiting for more rows, returns
		// null if no more rows expected
		final Object[] r = getRow();

		// if no more rows are expected, indicate step is finished and processRow()
		// should not be called again
		if (r == null) {

			// the last group
			if (sbXml.length() > 0) {
				// logBasic("====End group");
				sbXml.append("&lt;/JournalEntry>").append("&lt;/JournalEntryCreateRequest>");

				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbXml.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);
			}
			setOutputDone();
			return false;
		}

		// the "first" flag is inherited from the base step implementation
		// it is used to guard some processing tasks, like figuring out field indexes
		// in the row structure that only need to be done once
		if (first) {
			first = false;

			init();
		}

		StringBuilder sbKey = new StringBuilder();
		for (int i = 0; i &lt; groupedColumns.length; i++) {
			String tag = groupedColumns[i];
			int idx = inputRowMeta.indexOfValue(tag);
			String value = inputRowMeta.getString(r, idx);
			sbKey.append(value);
		}

		String key = sbKey.toString();
		if (!groupKey.equals(key)) { // new group
			
			if (sbXml.length() > 0) {
				
				// logBasic("====End group");

				// end tag JournalEntryCreateRequest
				sbXml.append("&lt;/JournalEntry>")//
						.append("&lt;/JournalEntryCreateRequest>");

				// put the row to the output row stream
				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbXml.toString());
				outputRow = RowDataUtil.addValueData(outputRow, 1, groupKey);
				putRow(outputRowMeta, outputRow);

				sbXml = new StringBuilder(128);
			}
			groupKey = key;
			// logBasic("====Begin group: " + sbKey.toString());
			// begin tag JournalEntryCreateRequest
			sbXml.append("&lt;JournalEntryCreateRequest>")//
					.append("&lt;MessageHeader>")//
					.append("&lt;CreationDateTime>&lt;/CreationDateTime>")//
					.append("&lt;/MessageHeader>")//
					.append("&lt;JournalEntry>");

			// build header tags
			buildXml(r, inputRowMeta, mapTagHeader, sbXml);

			// build debit item
			if (0.0 != inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("TurnoverBS"))) {
				if(null != inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("DebtorBS"))) {
					buildXml(r, inputRowMeta, mapTagDebitDebtorItem, sbXml);
				} else {
					buildXml(r, inputRowMeta, mapTagDebitItem, sbXml);
				}
			}
		}
		
		buildXml(r, inputRowMeta, mapTagCreditItem, sbXml);

		

		// log progress if it is time to to so
		if (checkFeedback(getLinesRead())) {
			// logBasic("Linenr " + getLinesRead()); // Some basic logging
		}

		// indicate that processRow() should be called again
		return true;
	}
	


	private void buildXml(Object[] r, RowMetaInterface inputRowMeta, Map mapTag, StringBuilder sbXml)
			throws KettleValueException {
		Object[] tags = mapTag.keySet().toArray();
		for (int i = 0; i &lt; tags.length; i++) {
			String tag = (String) tags[i];
			String columnName = (String) mapTag.get(tag);

			boolean handled = handleOpenCloseTag(tag, sbXml);
			if (!handled) {
				handled = handleSpecialTag(tag, r, inputRowMeta, sbXml);
			}
			if (handled) {
				continue;
			}

			int idx = getColumnIndex(inputRowMeta, columnName);
			String value = inputRowMeta.getString(r, idx);
			if("YY1_Bet_Mode".equals(tag)){
				sbXml.append("&lt;yy1:").append(tag).append(">").append(value).append("&lt;/yy1:").append(tag).append(">");
			} else {
				sbXml.append("&lt;").append(tag).append(">").append(value).append("&lt;/").append(tag).append(">");
			}
		}
	}

	private boolean handleSpecialTag(String tag, Object[] r, RowMetaInterface inputRowMeta, StringBuilder sbXml)
			throws KettleValueException {
		if ("Amount_Debit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			String currencySgd = inputRowMeta.getString(r, getColumnIndex(inputRowMeta, "Currency_SGD"));

			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("TurnoverBS"));
			String amount = formatAmount(amountInTransactionCurrency);

			sbXml.append("&lt;AmountInTransactionCurrency currencyCode=\"").append(currencySgd).append("\">")
					.append(amount).append("&lt;/AmountInTransactionCurrency>");
			return true;

		} else if ("Amount_Credit".equals(tag)) {
			// logBasic("====Special tag: " + tag);
			
			String currencySgd = inputRowMeta.getString(r, getColumnIndex(inputRowMeta, "Currency_SGD"));

			Double amountInTransactionCurrency = inputRowMeta.getNumber(r, inputRowMeta.indexOfValue("TurnoverPL"));
			String amount = formatAmount(amountInTransactionCurrency);
			
			sbXml.append("&lt;AmountInTransactionCurrency currencyCode=\"").append(currencySgd).append("\">")
					.append(amount).append("&lt;/AmountInTransactionCurrency>");
			return true;
		}
		return false;
	}

	private boolean handleOpenCloseTag(String tag, StringBuilder sbXml) {
		if (tag.startsWith(TAG_OPEN)) {
			// logBasic("====Open tag " + tag);
			sbXml.append("&lt;").append(tag.substring(TAG_OPEN.length())).append(">");
			return true;
		} else if (tag.startsWith(TAG_CLOSE)) {
			// logBasic("====Close tag " + tag);
			sbXml.append("&lt;/").append(tag.substring(TAG_CLOSE.length())).append(">");
			return true;
		}
		return false;
	}

	private int getColumnIndex(RowMetaInterface inputRowMeta, String columnName) {
		if (mapColumnIdx.containsKey(columnName)) {
			return ((Integer) mapColumnIdx.get(columnName)).intValue();
		}
		int idx = inputRowMeta.indexOfValue(columnName);
		if (idx &lt; 0) {
			logError("====Not found column `" + columnName + "`");
		}
		mapColumnIdx.put(columnName, Integer.valueOf(idx));
		return idx;
	}

	private String formatAmount(Double amount) {
		return formatAmount(amount, "%.2f");
	}

	String formatAmount(Double amount, String format) {
		if(null == amount) {
		return "null";
		}
		return String.format(format, new Object[] {amount});
	}</class_source>
      </definition>
    </definitions>
    <fields>
      <field>
        <field_name>JournalEntryRequest</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
      <field>
        <field_name>GroupKey</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps />
    <target_steps />
    <usage_parameters />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1056</xloc>
      <yloc>1456</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>udjc-build_csv_content</name>
    <type>UserDefinedJavaClass</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import java.util.HashMap;
import java.util.Map;

import org.pentaho.di.core.row.value.ValueMetaString;

	static final String DEFAULT_SEPARATOR = ",";
	static final String DEFAULT_END_LINE = "\r\n";

	RowMetaInterface inputRowMeta;
	RowMetaInterface outputRowMeta;

	// Step not support generic
	Map mapColumnIdx = new HashMap();// Map&lt;String, Integer>

	StringBuilder sbCsv = new StringBuilder(128);

	private void init() {
		// Initialize input, error and output metadata
		inputRowMeta = getInputRowMeta();
		outputRowMeta = new RowMeta();
		ValueMetaInterface newFieldMeta = new ValueMetaString("Content");
		outputRowMeta.addValueMeta(newFieldMeta);

		// logBasic("====Begin csv content");
		String[] tags = new String[] { "OriginalReferenceDocumentType", //
				"OriginalReferenceDocument", //
				"OriginalReferenceDocumentLogicalSystem", //
				"BusinessTransactionType", //
				"AccountingDocumentType", //
				"DocumentReferenceID", //
				"DocumentHeaderText", //
				"Reference1InDocumentHeader", //
				"CreatedByUser", //
				"CompanyCode", //
				"DocumentDate", //
				"PostingDate", //
				"Debtor", //
				"GLAccount", //
				"AmountInTransactionCurrency", //
				"Currency", //
				"DebitCreditCode", //
				"DocumentItemText", //
				"AssignmentReference", //
				"AccountAssignmentType", //
				"ProfitCenter", //
				"YY1_Bet_Mode", //
				"SoldMaterial",
				"ReferenceDocumentItem"};

		for (int i = 0; i &lt; tags.length; i++) {
			sbCsv.append(tags[i]);
			if (i &lt; tags.length - 1) {
				sbCsv.append(DEFAULT_SEPARATOR);
			}
		}
		
	}

	public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException {

		// get incoming row, getRow() potentially blocks waiting for more rows, returns
		// null if no more rows expected
		final Object[] r = getRow();

		// if no more rows are expected, indicate step is finished and processRow()
		// should not be called again
		if (r == null) {
			if (sbCsv.length() > 0) {
				// logBasic("====End csv content");

				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbCsv.toString());
				putRow(outputRowMeta, outputRow);
			}
			// done
			setOutputDone();
			return false;
		}

		// the "first" flag is inherited from the base step implementation
		// it is used to guard some processing tasks, like figuring out field indexes
		// in the row structure that only need to be done once
		if (first) {
			first = false;

			init();
		}

		int idx = getColumnIndex(inputRowMeta, "JournalEntry");
		String value = inputRowMeta.getString(r, idx);
		sbCsv.append(DEFAULT_END_LINE).append(value).append(DEFAULT_END_LINE);

		// log progress if it is time to to so
		if (checkFeedback(getLinesRead())) {
			// logBasic("Linenr " + getLinesRead()); // Some basic logging
		}

		// indicate that processRow() should be called again
		return true;
	}

	private int getColumnIndex(RowMetaInterface inputRowMeta, String columnName) {
		if (mapColumnIdx.containsKey(columnName)) {
			return ((Integer) mapColumnIdx.get(columnName)).intValue();
		}
		int idx = inputRowMeta.indexOfValue(columnName);
		if (idx &lt; 0) {
			logError("====Not found column `" + columnName + "`");
		}
		mapColumnIdx.put(columnName, Integer.valueOf(idx));
		return idx;
	}</class_source>
      </definition>
    </definitions>
    <fields>
      <field>
        <field_name>Content</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps />
    <target_steps />
    <usage_parameters />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>160</xloc>
      <yloc>1792</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>udjc-build_xml_SoapEnv</name>
    <type>UserDefinedJavaClass</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import java.util.HashMap;
import java.util.Map;

import org.pentaho.di.core.row.value.ValueMetaString;

	RowMetaInterface inputRowMeta;
	RowMetaInterface outputRowMeta;

	// Step not support generic
	Map mapColumnIdx = new HashMap();// Map&lt;String, Integer>

	StringBuilder sbXml = new StringBuilder(128);

	private void init() {
		// Initialize input, error and output metadata
		inputRowMeta = getInputRowMeta();
		outputRowMeta = new RowMeta();
		ValueMetaInterface newFieldMeta = new ValueMetaString("SoapEnv");
		outputRowMeta.addValueMeta(newFieldMeta);

		// logBasic("====Begin SOAP Env");
		sbXml.append("&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>")//
				.append("&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:sfin=\"http://sap.com/xi/SAPSCORE/SFIN\" xmlns:yy1=\"http://SAPCustomFields.com/YY1_\">")
				.append("&lt;soapenv:Header/>")//
				.append("&lt;soapenv:Body>")//
				.append("&lt;sfin:JournalEntryBulkCreateRequest>")//
				.append("&lt;MessageHeader>")//
				.append("&lt;CreationDateTime>&lt;/CreationDateTime>")//
				.append("&lt;TestDataIndicator>1&lt;/TestDataIndicator>")//
				.append("&lt;/MessageHeader>");
	}

	public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException {

		// get incoming row, getRow() potentially blocks waiting for more rows, returns
		// null if no more rows expected
		final Object[] r = getRow();

		// if no more rows are expected, indicate step is finished and processRow()
		// should not be called again
		if (r == null) {
			// the last group
			if (sbXml.length() > 0){
				// logBasic("====End SOAP Env");
				sbXml.append("&lt;/sfin:JournalEntryBulkCreateRequest>").append("&lt;/soapenv:Body>")
						.append("&lt;/soapenv:Envelope>");

				Object[] outputRow = RowDataUtil.createResizedCopy(new Object[] {}, outputRowMeta.size());
				outputRow = RowDataUtil.addValueData(outputRow, 0, sbXml.toString());
				putRow(outputRowMeta, outputRow);
			}
			// done
			setOutputDone();
			return false;
		}

		// the "first" flag is inherited from the base step implementation
		// it is used to guard some processing tasks, like figuring out field indexes
		// in the row structure that only need to be done once
		if (first) {
			first = false;

			init();
		}

		int idx = getColumnIndex(inputRowMeta, "JournalEntryRequest");
		String value = inputRowMeta.getString(r, idx);
		sbXml.append(value);

		// log progress if it is time to to so
		if (checkFeedback(getLinesRead())) {
			// logBasic("Linenr " + getLinesRead()); // Some basic logging
		}

		// indicate that processRow() should be called again
		return true;
	}

	private int getColumnIndex(RowMetaInterface inputRowMeta, String columnName) {
		if (mapColumnIdx.containsKey(columnName)) {
			return ((Integer) mapColumnIdx.get(columnName)).intValue();
		}
		int idx = inputRowMeta.indexOfValue(columnName);
		if (idx &lt; 0) {
			logError("====Not found column `" + columnName + "`");
		}
		mapColumnIdx.put(columnName, Integer.valueOf(idx));
		return idx;
	}
</class_source>
      </definition>
    </definitions>
    <fields>
      <field>
        <field_name>SoapEnv</field_name>
        <field_type>String</field_type>
        <field_length>-1</field_length>
        <field_precision>-1</field_precision>
      </field>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps />
    <target_steps />
    <usage_parameters />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>160</xloc>
      <yloc>2064</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ur-CM_PM_L_TT</name>
    <type>Unique</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <count_rows>N</count_rows>
    <count_field />
    <reject_duplicate_row>N</reject_duplicate_row>
    <error_description />
    <fields>
      <field>
        <name>ClubMeeting</name>
        <case_insensitive>Y</case_insensitive>
      </field>
      <field>
        <name>PaymentMode</name>
        <case_insensitive>N</case_insensitive>
      </field>
      <field>
        <name>Location</name>
        <case_insensitive>Y</case_insensitive>
      </field>
      <field>
        <name>TerminalType</name>
        <case_insensitive>Y</case_insensitive>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1936</xloc>
      <yloc>976</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>ur-MT_AT</name>
    <type>Unique</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <count_rows>N</count_rows>
    <count_field />
    <reject_duplicate_row>N</reject_duplicate_row>
    <error_description />
    <fields>
      <field>
        <name>GuestOrHostIndicator</name>
        <case_insensitive>N</case_insensitive>
      </field>
      <field>
        <name>ActualMeeting</name>
        <case_insensitive>N</case_insensitive>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>2656</xloc>
      <yloc>1200</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>gv-input_bettingdutycmgl</name>
    <type>GetVariable</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>input_bettingdutycmgl</name>
        <variable>${input_bettingdutycmgl.file}</variable>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <length>-1</length>
        <precision>-1</precision>
        <trim_type>none</trim_type>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1184</xloc>
      <yloc>64</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>gv-input_bettingdutynoncmgl</name>
    <type>GetVariable</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>input_bettingdutynoncmgl</name>
        <variable>${input_bettingdutynoncmgl.file}</variable>
        <type>String</type>
        <format />
        <currency />
        <decimal />
        <group />
        <length>-1</length>
        <precision>-1</precision>
        <trim_type>none</trim_type>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1376</xloc>
      <yloc>64</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>mjsv-spec_input</name>
    <type>ScriptValueMod</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <compatible>N</compatible>
    <optimizationLevel>9</optimizationLevel>
    <jsScripts>
      <jsScript>
        <jsScript_type>0</jsScript_type>
        <jsScript_name>Script 1</jsScript_name>
        <jsScript_script>var flag = true;
if(input_bettingdutycmgl = null || input_bettingdutycmgl.trim() === '') {
	flag = false;
}</jsScript_script>
      </jsScript>
    </jsScripts>
    <fields>
      <field>
        <name>flag</name>
        <rename>flag</rename>
        <type>Boolean</type>
        <length>-1</length>
        <precision>-1</precision>
        <replace>N</replace>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1184</xloc>
      <yloc>144</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>fr-bettingdutycmgl</name>
    <type>FilterRows</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <send_true_to>te-bettingdutycmgl</send_true_to>
    <send_false_to />
    <compare>
      <condition>
        <negated>N</negated>
        <leftvalue>flag</leftvalue>
        <function>=</function>
        <rightvalue />
        <value>
          <name>constant</name>
          <type>Boolean</type>
          <text>Y</text>
          <length>-1</length>
          <precision>-1</precision>
          <isnull>N</isnull>
          <mask />
        </value>
      </condition>
    </compare>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1184</xloc>
      <yloc>224</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>mjsv-spec_input 2</name>
    <type>ScriptValueMod</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <compatible>N</compatible>
    <optimizationLevel>9</optimizationLevel>
    <jsScripts>
      <jsScript>
        <jsScript_type>0</jsScript_type>
        <jsScript_name>Script 1</jsScript_name>
        <jsScript_script>var flag = true;
if(input_bettingdutynoncmgl = null || input_bettingdutynoncmgl.trim() === '') {
	flag = false;
}</jsScript_script>
      </jsScript>
    </jsScripts>
    <fields>
      <field>
        <name>flag</name>
        <rename>flag</rename>
        <type>Boolean</type>
        <length>-1</length>
        <precision>-1</precision>
        <replace>N</replace>
      </field>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1376</xloc>
      <yloc>144</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>te-bettingdutycmgl</name>
    <type>TransExecutor</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <specification_method>rep_name</specification_method>
    <trans_object_id />
    <trans_name>TR_BMCS_Bettingdutycmgl_Parquet</trans_name>
    <filename />
    <directory_path>${Internal.Entry.Current.Directory}</directory_path>
    <group_size>1</group_size>
    <group_field />
    <group_time />
    <parameters>
      <variablemapping>
        <variable>input_bettingdutycmgl.file</variable>
        <field>${input_bettingdutycmgl.file}</field>
        <input />
      </variablemapping>
      <inherit_all_vars>N</inherit_all_vars>
    </parameters>
    <execution_result_target_step />
    <execution_time_field>ExecutionTime</execution_time_field>
    <execution_result_field>ExecutionResult</execution_result_field>
    <execution_errors_field>ExecutionNrErrors</execution_errors_field>
    <execution_lines_read_field>ExecutionLinesRead</execution_lines_read_field>
    <execution_lines_written_field>ExecutionLinesWritten</execution_lines_written_field>
    <execution_lines_input_field>ExecutionLinesInput</execution_lines_input_field>
    <execution_lines_output_field>ExecutionLinesOutput</execution_lines_output_field>
    <execution_lines_rejected_field>ExecutionLinesRejected</execution_lines_rejected_field>
    <execution_lines_updated_field>ExecutionLinesUpdated</execution_lines_updated_field>
    <execution_lines_deleted_field>ExecutionLinesDeleted</execution_lines_deleted_field>
    <execution_files_retrieved_field>ExecutionFilesRetrieved</execution_files_retrieved_field>
    <execution_exit_status_field>ExecutionExitStatus</execution_exit_status_field>
    <execution_log_text_field>ExecutionLogText</execution_log_text_field>
    <execution_log_channelid_field>ExecutionLogChannelId</execution_log_channelid_field>
    <result_rows_target_step>sv-bettingdutycmgl</result_rows_target_step>
    <result_rows_field>
      <name>MeetingId</name>
      <type>String</type>
      <length>-1</length>
      <precision>-1</precision>
    </result_rows_field>
    <result_rows_field>
      <name>ClubMeeting</name>
      <type>String</type>
      <length>-1</length>
      <precision>-1</precision>
    </result_rows_field>
    <result_rows_field>
      <name>FixtureDate</name>
      <type>String</type>
      <length>-1</length>
      <precision>-1</precision>
    </result_rows_field>
    <result_rows_field>
      <name>BettingDuty</name>
      <type>Number</type>
      <length>-1</length>
      <precision>-1</precision>
    </result_rows_field>
    <result_rows_field>
      <name>ActualMeeting</name>
      <type>String</type>
      <length>-1</length>
      <precision>-1</precision>
    </result_rows_field>
    <result_rows_field>
      <name>Commingled</name>
      <type>String</type>
      <length>-1</length>
      <precision>-1</precision>
    </result_rows_field>
    <result_files_target_step />
    <result_files_file_name_field>FileName</result_files_file_name_field>
    <executors_output_step />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1184</xloc>
      <yloc>304</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>te-bettingdutynoncmgl</name>
    <type>TransExecutor</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <specification_method>rep_name</specification_method>
    <trans_object_id />
    <trans_name>TR_BMCS_Bettingdutynoncmgl_Parquet</trans_name>
    <filename />
    <directory_path>${Internal.Entry.Current.Directory}</directory_path>
    <group_size>1</group_size>
    <group_field />
    <group_time />
    <parameters>
      <variablemapping>
        <variable>input_bettingdutynoncmgl.file</variable>
        <field>${input_bettingdutycmgl.file}</field>
        <input />
      </variablemapping>
      <inherit_all_vars>N</inherit_all_vars>
    </parameters>
    <execution_result_target_step />
    <execution_time_field>ExecutionTime</execution_time_field>
    <execution_result_field>ExecutionResult</execution_result_field>
    <execution_errors_field>ExecutionNrErrors</execution_errors_field>
    <execution_lines_read_field>ExecutionLinesRead</execution_lines_read_field>
    <execution_lines_written_field>ExecutionLinesWritten</execution_lines_written_field>
    <execution_lines_input_field>ExecutionLinesInput</execution_lines_input_field>
    <execution_lines_output_field>ExecutionLinesOutput</execution_lines_output_field>
    <execution_lines_rejected_field>ExecutionLinesRejected</execution_lines_rejected_field>
    <execution_lines_updated_field>ExecutionLinesUpdated</execution_lines_updated_field>
    <execution_lines_deleted_field>ExecutionLinesDeleted</execution_lines_deleted_field>
    <execution_files_retrieved_field>ExecutionFilesRetrieved</execution_files_retrieved_field>
    <execution_exit_status_field>ExecutionExitStatus</execution_exit_status_field>
    <execution_log_text_field>ExecutionLogText</execution_log_text_field>
    <execution_log_channelid_field>ExecutionLogChannelId</execution_log_channelid_field>
    <result_rows_target_step>sv-bettingdutynoncmgl</result_rows_target_step>
    <result_rows_field>
      <name>MeetingId</name>
      <type>String</type>
      <length>-1</length>
      <precision>-1</precision>
    </result_rows_field>
    <result_rows_field>
      <name>ClubMeeting</name>
      <type>String</type>
      <length>-1</length>
      <precision>-1</precision>
    </result_rows_field>
    <result_rows_field>
      <name>FixtureDate</name>
      <type>String</type>
      <length>-1</length>
      <precision>-1</precision>
    </result_rows_field>
    <result_rows_field>
      <name>BettingDuty</name>
      <type>Number</type>
      <length>-1</length>
      <precision>-1</precision>
    </result_rows_field>
    <result_rows_field>
      <name>ActualMeeting</name>
      <type>String</type>
      <length>-1</length>
      <precision>-1</precision>
    </result_rows_field>
    <result_files_target_step />
    <result_files_file_name_field>FileName</result_files_file_name_field>
    <executors_output_step />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1376</xloc>
      <yloc>304</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>sv-bettingdutynoncmgl</name>
    <type>SelectValues</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>MeetingId</name>
        <rename />
      </field>
      <field>
        <name>ClubMeeting</name>
        <rename />
      </field>
      <field>
        <name>FixtureDate</name>
        <rename />
      </field>
      <field>
        <name>BettingDuty</name>
        <rename />
      </field>
      <field>
        <name>ActualMeeting</name>
        <rename />
      </field>
      <select_unspecified>N</select_unspecified>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1376</xloc>
      <yloc>400</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>fr-bettingdutynoncmgl</name>
    <type>FilterRows</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <send_true_to>te-bettingdutynoncmgl</send_true_to>
    <send_false_to />
    <compare>
      <condition>
        <negated>N</negated>
        <leftvalue>flag</leftvalue>
        <function>=</function>
        <rightvalue />
        <value>
          <name>constant</name>
          <type>Boolean</type>
          <text>Y</text>
          <length>-1</length>
          <precision>-1</precision>
          <isnull>N</isnull>
          <mask />
        </value>
      </condition>
    </compare>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1376</xloc>
      <yloc>224</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>sv-bettingdutycmgl</name>
    <type>SelectValues</type>
    <description />
    <distribute>N</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>MeetingId</name>
        <rename />
      </field>
      <field>
        <name>ClubMeeting</name>
        <rename />
      </field>
      <field>
        <name>FixtureDate</name>
        <rename />
      </field>
      <field>
        <name>BettingDuty</name>
        <rename />
      </field>
      <field>
        <name>ActualMeeting</name>
        <rename />
      </field>
      <field>
        <name>Commingled</name>
        <rename />
      </field>
      <select_unspecified>N</select_unspecified>
    </fields>
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1184</xloc>
      <yloc>400</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step_error_handling>
  </step_error_handling>
  <slave-step-copy-partition-distribution>
  </slave-step-copy-partition-distribution>
  <slave_transformation>N</slave_transformation>
  <attributes>
    <group>
      <name>METASTORE.NamedClusters</name>
      <attribute>
        <key>NamedCluster</key>
        <value>{"namespace":"NamedClusters","id":"NamedCluster","name":"NamedCluster","description":"A NamedCluster","metaStoreName":null}</value>
      </attribute>
    </group>
    <group>
      <name>explorerState</name>
    </group>
    <group>
      <name>{"_":"Embedded MetaStore Elements","namespace":"NamedClusters","type":"NamedCluster"}</name>
      <attribute>
        <key>MapR</key>
        <value>{"children":[{"children":[],"id":"hdfsPassword","value":"abcdefjk12345="},{"children":[],"id":"oozieUrl","value":"http://maprdemo:12345/oozie"},{"children":[],"id":"mapr","value":"Y"},{"children":[],"id":"useGateway","value":"N"},{"children":[],"id":"lastModifiedDate","value":"1560256562814"},{"children":[],"id":"jobTrackerHost","value":"localhost"},{"children":[],"id":"zooKeeperHost","value":"maprdemo"},{"children":[],"id":"shimIdentifier","value":null},{"children":[],"id":"gatewayUrl","value":null},{"children":[],"id":"jobTrackerPort","value":"8032"},{"children":[],"id":"zooKeeperPort","value":"5181"},{"children":[],"id":"name","value":"MapR"},{"children":[],"id":"hdfsPort","value":"8020"},{"children":[],"id":"hdfsUsername","value":"user"},{"children":[],"id":"gatewayPassword","value":null},{"children":[],"id":"kafkaBootstrapServers","value":null},{"children":[],"id":"storageScheme","value":"maprfs"},{"children":[],"id":"hdfsHost","value":"localhost"},{"children":[],"id":"gatewayUsername","value":null}],"id":"MapR","value":null,"name":"MapR","owner":null,"ownerPermissionsList":[]}</value>
      </attribute>
      <attribute>
        <key>MapR-Server</key>
        <value>{"children":[{"children":[],"id":"hdfsPassword","value":"abcdefjk12345="},{"children":[],"id":"oozieUrl","value":"http://11.123.123.45:11000/oozie"},{"children":[],"id":"mapr","value":"Y"},{"children":[],"id":"useGateway","value":"N"},{"children":[],"id":"lastModifiedDate","value":"1691760213319"},{"children":[],"id":"jobTrackerHost","value":"localhost"},{"children":[],"id":"zooKeeperHost","value":"11.123.123.45"},{"children":[],"id":"shimIdentifier","value":null},{"children":[],"id":"gatewayUrl","value":null},{"children":[],"id":"jobTrackerPort","value":"8032"},{"children":[],"id":"zooKeeperPort","value":"5181"},{"children":[],"id":"name","value":"MapR-Server"},{"children":[],"id":"hdfsPort","value":"5181"},{"children":[],"id":"hdfsUsername","value":"mapr"},{"children":[],"id":"gatewayPassword","value":null},{"children":[],"id":"kafkaBootstrapServers","value":null},{"children":[],"id":"storageScheme","value":"maprfs"},{"children":[],"id":"hdfsHost","value":"11.123.123.45"},{"children":[],"id":"gatewayUsername","value":null}],"id":"MapR-Server","value":null,"name":"MapR-Server","owner":null,"ownerPermissionsList":[]}</value>
      </attribute>
      <attribute>
        <key>MapR-DevServer</key>
        <value>{"children":[{"children":[],"id":"hdfsPassword","value":"abcdefjk12345="},{"children":[],"id":"oozieUrl","value":"http://11.123.123.45:11000/oozie"},{"children":[],"id":"mapr","value":"Y"},{"children":[],"id":"useGateway","value":"N"},{"children":[],"id":"lastModifiedDate","value":"1665041548259"},{"children":[],"id":"jobTrackerHost","value":"localhost"},{"children":[],"id":"zooKeeperHost","value":"11.123.123.45"},{"children":[],"id":"shimIdentifier","value":null},{"children":[],"id":"gatewayUrl","value":null},{"children":[],"id":"jobTrackerPort","value":"8032"},{"children":[],"id":"zooKeeperPort","value":"5181"},{"children":[],"id":"name","value":"MapR-DevServer"},{"children":[],"id":"hdfsPort","value":"5181"},{"children":[],"id":"hdfsUsername","value":"mapr"},{"children":[],"id":"gatewayPassword","value":null},{"children":[],"id":"kafkaBootstrapServers","value":null},{"children":[],"id":"storageScheme","value":"maprfs"},{"children":[],"id":"hdfsHost","value":"11.123.123.45"},{"children":[],"id":"gatewayUsername","value":null}],"id":"MapR-DevServer","value":null,"name":"MapR-DevServer","owner":null,"ownerPermissionsList":[]}</value>
      </attribute>
      <attribute>
        <key>MapR-106</key>
        <value>{"children":[{"children":[],"id":"hdfsPassword","value":"abcdefjk12345="},{"children":[],"id":"oozieUrl","value":"https://11.123.123.45:12345/oozie"},{"children":[],"id":"mapr","value":"Y"},{"children":[],"id":"useGateway","value":"N"},{"children":[],"id":"lastModifiedDate","value":"1664777592882"},{"children":[],"id":"jobTrackerHost","value":"localhost"},{"children":[],"id":"zooKeeperHost","value":"11.123.123.45"},{"children":[],"id":"shimIdentifier","value":null},{"children":[],"id":"gatewayUrl","value":null},{"children":[],"id":"jobTrackerPort","value":"8032"},{"children":[],"id":"zooKeeperPort","value":"5181"},{"children":[],"id":"name","value":"MapR-106"},{"children":[],"id":"hdfsPort","value":"5181"},{"children":[],"id":"hdfsUsername","value":"mapr"},{"children":[],"id":"gatewayPassword","value":null},{"children":[],"id":"kafkaBootstrapServers","value":null},{"children":[],"id":"storageScheme","value":"maprfs"},{"children":[],"id":"hdfsHost","value":"11.123.123.45"},{"children":[],"id":"gatewayUsername","value":null}],"id":"MapR-106","value":null,"name":"MapR-106","owner":null,"ownerPermissionsList":[]}</value>
      </attribute>
    </group>
  </attributes>
</transformation>
